// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.LoadBalancerAdaptiveRoutingArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerLocationStrategyArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerRandomSteeringArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerRuleArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerSessionAffinityAttributesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerState extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerState Empty = new LoadBalancerState();

    /**
     * Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    @Import(name="adaptiveRouting")
    private @Nullable Output<LoadBalancerAdaptiveRoutingArgs> adaptiveRouting;

    /**
     * @return Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    public Optional<Output<LoadBalancerAdaptiveRoutingArgs>> adaptiveRouting() {
        return Optional.ofNullable(this.adaptiveRouting);
    }

    /**
     * A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    @Import(name="countryPools")
    private @Nullable Output<Map<String,List<String>>> countryPools;

    /**
     * @return A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> countryPools() {
        return Optional.ofNullable(this.countryPools);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
     * 
     */
    @Import(name="defaultPools")
    private @Nullable Output<List<String>> defaultPools;

    /**
     * @return A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
     * 
     */
    public Optional<Output<List<String>>> defaultPools() {
        return Optional.ofNullable(this.defaultPools);
    }

    /**
     * Object description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Object description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether to enable (the default) this load balancer.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether to enable (the default) this load balancer.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    @Import(name="fallbackPool")
    private @Nullable Output<String> fallbackPool;

    /**
     * @return The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    public Optional<Output<String>> fallbackPool() {
        return Optional.ofNullable(this.fallbackPool);
    }

    /**
     * Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
     * 
     */
    @Import(name="locationStrategy")
    private @Nullable Output<LoadBalancerLocationStrategyArgs> locationStrategy;

    /**
     * @return Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
     * 
     */
    public Optional<Output<LoadBalancerLocationStrategyArgs>> locationStrategy() {
        return Optional.ofNullable(this.locationStrategy);
    }

    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare&#39;s DNS, the Load Balancer will take precedence and the DNS record will not be used.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare&#39;s DNS, the Load Balancer will take precedence and the DNS record will not be used.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of networks where Load Balancer or Pool is enabled.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<String>> networks;

    /**
     * @return List of networks where Load Balancer or Pool is enabled.
     * 
     */
    public Optional<Output<List<String>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    @Import(name="popPools")
    private @Nullable Output<Map<String,List<String>>> popPools;

    /**
     * @return (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> popPools() {
        return Optional.ofNullable(this.popPools);
    }

    /**
     * Whether the hostname should be gray clouded (false) or orange clouded (true).
     * 
     */
    @Import(name="proxied")
    private @Nullable Output<Boolean> proxied;

    /**
     * @return Whether the hostname should be gray clouded (false) or orange clouded (true).
     * 
     */
    public Optional<Output<Boolean>> proxied() {
        return Optional.ofNullable(this.proxied);
    }

    /**
     * Configures pool weights.
     * 
     */
    @Import(name="randomSteering")
    private @Nullable Output<LoadBalancerRandomSteeringArgs> randomSteering;

    /**
     * @return Configures pool weights.
     * 
     */
    public Optional<Output<LoadBalancerRandomSteeringArgs>> randomSteering() {
        return Optional.ofNullable(this.randomSteering);
    }

    /**
     * A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    @Import(name="regionPools")
    private @Nullable Output<Map<String,List<String>>> regionPools;

    /**
     * @return A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> regionPools() {
        return Optional.ofNullable(this.regionPools);
    }

    /**
     * BETA Field Not General Access: A list of rules for this load balancer to execute.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<LoadBalancerRuleArgs>> rules;

    /**
     * @return BETA Field Not General Access: A list of rules for this load balancer to execute.
     * 
     */
    public Optional<Output<List<LoadBalancerRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are:
     * 
     */
    @Import(name="sessionAffinity")
    private @Nullable Output<String> sessionAffinity;

    /**
     * @return Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are:
     * 
     */
    public Optional<Output<String>> sessionAffinity() {
        return Optional.ofNullable(this.sessionAffinity);
    }

    /**
     * Configures attributes for session affinity.
     * 
     */
    @Import(name="sessionAffinityAttributes")
    private @Nullable Output<LoadBalancerSessionAffinityAttributesArgs> sessionAffinityAttributes;

    /**
     * @return Configures attributes for session affinity.
     * 
     */
    public Optional<Output<LoadBalancerSessionAffinityAttributesArgs>> sessionAffinityAttributes() {
        return Optional.ofNullable(this.sessionAffinityAttributes);
    }

    /**
     * Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
     * 
     */
    @Import(name="sessionAffinityTtl")
    private @Nullable Output<Double> sessionAffinityTtl;

    /**
     * @return Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
     * 
     */
    public Optional<Output<Double>> sessionAffinityTtl() {
        return Optional.ofNullable(this.sessionAffinityTtl);
    }

    /**
     * Steering Policy for this load balancer.
     * 
     */
    @Import(name="steeringPolicy")
    private @Nullable Output<String> steeringPolicy;

    /**
     * @return Steering Policy for this load balancer.
     * 
     */
    public Optional<Output<String>> steeringPolicy() {
        return Optional.ofNullable(this.steeringPolicy);
    }

    /**
     * Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Double> ttl;

    /**
     * @return Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    public Optional<Output<Double>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private LoadBalancerState() {}

    private LoadBalancerState(LoadBalancerState $) {
        this.adaptiveRouting = $.adaptiveRouting;
        this.countryPools = $.countryPools;
        this.createdOn = $.createdOn;
        this.defaultPools = $.defaultPools;
        this.description = $.description;
        this.enabled = $.enabled;
        this.fallbackPool = $.fallbackPool;
        this.locationStrategy = $.locationStrategy;
        this.modifiedOn = $.modifiedOn;
        this.name = $.name;
        this.networks = $.networks;
        this.popPools = $.popPools;
        this.proxied = $.proxied;
        this.randomSteering = $.randomSteering;
        this.regionPools = $.regionPools;
        this.rules = $.rules;
        this.sessionAffinity = $.sessionAffinity;
        this.sessionAffinityAttributes = $.sessionAffinityAttributes;
        this.sessionAffinityTtl = $.sessionAffinityTtl;
        this.steeringPolicy = $.steeringPolicy;
        this.ttl = $.ttl;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerState $;

        public Builder() {
            $ = new LoadBalancerState();
        }

        public Builder(LoadBalancerState defaults) {
            $ = new LoadBalancerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adaptiveRouting Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
         * 
         * @return builder
         * 
         */
        public Builder adaptiveRouting(@Nullable Output<LoadBalancerAdaptiveRoutingArgs> adaptiveRouting) {
            $.adaptiveRouting = adaptiveRouting;
            return this;
        }

        /**
         * @param adaptiveRouting Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
         * 
         * @return builder
         * 
         */
        public Builder adaptiveRouting(LoadBalancerAdaptiveRoutingArgs adaptiveRouting) {
            return adaptiveRouting(Output.of(adaptiveRouting));
        }

        /**
         * @param countryPools A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
         * 
         * @return builder
         * 
         */
        public Builder countryPools(@Nullable Output<Map<String,List<String>>> countryPools) {
            $.countryPools = countryPools;
            return this;
        }

        /**
         * @param countryPools A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
         * 
         * @return builder
         * 
         */
        public Builder countryPools(Map<String,List<String>> countryPools) {
            return countryPools(Output.of(countryPools));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param defaultPools A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
         * 
         * @return builder
         * 
         */
        public Builder defaultPools(@Nullable Output<List<String>> defaultPools) {
            $.defaultPools = defaultPools;
            return this;
        }

        /**
         * @param defaultPools A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
         * 
         * @return builder
         * 
         */
        public Builder defaultPools(List<String> defaultPools) {
            return defaultPools(Output.of(defaultPools));
        }

        /**
         * @param defaultPools A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
         * 
         * @return builder
         * 
         */
        public Builder defaultPools(String... defaultPools) {
            return defaultPools(List.of(defaultPools));
        }

        /**
         * @param description Object description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Object description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether to enable (the default) this load balancer.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to enable (the default) this load balancer.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fallbackPool The pool ID to use when all other pools are detected as unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPool(@Nullable Output<String> fallbackPool) {
            $.fallbackPool = fallbackPool;
            return this;
        }

        /**
         * @param fallbackPool The pool ID to use when all other pools are detected as unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPool(String fallbackPool) {
            return fallbackPool(Output.of(fallbackPool));
        }

        /**
         * @param locationStrategy Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
         * 
         * @return builder
         * 
         */
        public Builder locationStrategy(@Nullable Output<LoadBalancerLocationStrategyArgs> locationStrategy) {
            $.locationStrategy = locationStrategy;
            return this;
        }

        /**
         * @param locationStrategy Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
         * 
         * @return builder
         * 
         */
        public Builder locationStrategy(LoadBalancerLocationStrategyArgs locationStrategy) {
            return locationStrategy(Output.of(locationStrategy));
        }

        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param name The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare&#39;s DNS, the Load Balancer will take precedence and the DNS record will not be used.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare&#39;s DNS, the Load Balancer will take precedence and the DNS record will not be used.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks List of networks where Load Balancer or Pool is enabled.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<String>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks List of networks where Load Balancer or Pool is enabled.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<String> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks List of networks where Load Balancer or Pool is enabled.
         * 
         * @return builder
         * 
         */
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param popPools (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
         * 
         * @return builder
         * 
         */
        public Builder popPools(@Nullable Output<Map<String,List<String>>> popPools) {
            $.popPools = popPools;
            return this;
        }

        /**
         * @param popPools (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
         * 
         * @return builder
         * 
         */
        public Builder popPools(Map<String,List<String>> popPools) {
            return popPools(Output.of(popPools));
        }

        /**
         * @param proxied Whether the hostname should be gray clouded (false) or orange clouded (true).
         * 
         * @return builder
         * 
         */
        public Builder proxied(@Nullable Output<Boolean> proxied) {
            $.proxied = proxied;
            return this;
        }

        /**
         * @param proxied Whether the hostname should be gray clouded (false) or orange clouded (true).
         * 
         * @return builder
         * 
         */
        public Builder proxied(Boolean proxied) {
            return proxied(Output.of(proxied));
        }

        /**
         * @param randomSteering Configures pool weights.
         * 
         * @return builder
         * 
         */
        public Builder randomSteering(@Nullable Output<LoadBalancerRandomSteeringArgs> randomSteering) {
            $.randomSteering = randomSteering;
            return this;
        }

        /**
         * @param randomSteering Configures pool weights.
         * 
         * @return builder
         * 
         */
        public Builder randomSteering(LoadBalancerRandomSteeringArgs randomSteering) {
            return randomSteering(Output.of(randomSteering));
        }

        /**
         * @param regionPools A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
         * 
         * @return builder
         * 
         */
        public Builder regionPools(@Nullable Output<Map<String,List<String>>> regionPools) {
            $.regionPools = regionPools;
            return this;
        }

        /**
         * @param regionPools A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
         * 
         * @return builder
         * 
         */
        public Builder regionPools(Map<String,List<String>> regionPools) {
            return regionPools(Output.of(regionPools));
        }

        /**
         * @param rules BETA Field Not General Access: A list of rules for this load balancer to execute.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<LoadBalancerRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules BETA Field Not General Access: A list of rules for this load balancer to execute.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<LoadBalancerRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules BETA Field Not General Access: A list of rules for this load balancer to execute.
         * 
         * @return builder
         * 
         */
        public Builder rules(LoadBalancerRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param sessionAffinity Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are:
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(@Nullable Output<String> sessionAffinity) {
            $.sessionAffinity = sessionAffinity;
            return this;
        }

        /**
         * @param sessionAffinity Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are:
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(String sessionAffinity) {
            return sessionAffinity(Output.of(sessionAffinity));
        }

        /**
         * @param sessionAffinityAttributes Configures attributes for session affinity.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityAttributes(@Nullable Output<LoadBalancerSessionAffinityAttributesArgs> sessionAffinityAttributes) {
            $.sessionAffinityAttributes = sessionAffinityAttributes;
            return this;
        }

        /**
         * @param sessionAffinityAttributes Configures attributes for session affinity.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityAttributes(LoadBalancerSessionAffinityAttributesArgs sessionAffinityAttributes) {
            return sessionAffinityAttributes(Output.of(sessionAffinityAttributes));
        }

        /**
         * @param sessionAffinityTtl Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityTtl(@Nullable Output<Double> sessionAffinityTtl) {
            $.sessionAffinityTtl = sessionAffinityTtl;
            return this;
        }

        /**
         * @param sessionAffinityTtl Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityTtl(Double sessionAffinityTtl) {
            return sessionAffinityTtl(Output.of(sessionAffinityTtl));
        }

        /**
         * @param steeringPolicy Steering Policy for this load balancer.
         * 
         * @return builder
         * 
         */
        public Builder steeringPolicy(@Nullable Output<String> steeringPolicy) {
            $.steeringPolicy = steeringPolicy;
            return this;
        }

        /**
         * @param steeringPolicy Steering Policy for this load balancer.
         * 
         * @return builder
         * 
         */
        public Builder steeringPolicy(String steeringPolicy) {
            return steeringPolicy(Output.of(steeringPolicy));
        }

        /**
         * @param ttl Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Double> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Double ttl) {
            return ttl(Output.of(ttl));
        }

        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public LoadBalancerState build() {
            return $;
        }
    }

}
