// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.WorkerVersionMigrationsRenamedClass;
import com.pulumi.cloudflare.outputs.WorkerVersionMigrationsStep;
import com.pulumi.cloudflare.outputs.WorkerVersionMigrationsTransferredClass;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkerVersionMigrations {
    /**
     * @return A list of classes to delete Durable Object namespaces from.
     * 
     */
    private @Nullable List<String> deletedClasses;
    /**
     * @return A list of classes to create Durable Object namespaces from.
     * 
     */
    private @Nullable List<String> newClasses;
    /**
     * @return A list of classes to create Durable Object namespaces with SQLite from.
     * 
     */
    private @Nullable List<String> newSqliteClasses;
    /**
     * @return Tag to set as the latest migration tag.
     * 
     */
    private @Nullable String newTag;
    /**
     * @return Tag used to verify against the latest migration tag for this Worker. If they don&#39;t match, the upload is rejected.
     * 
     */
    private @Nullable String oldTag;
    /**
     * @return A list of classes with Durable Object namespaces that were renamed.
     * 
     */
    private @Nullable List<WorkerVersionMigrationsRenamedClass> renamedClasses;
    /**
     * @return Migrations to apply in order.
     * 
     */
    private @Nullable List<WorkerVersionMigrationsStep> steps;
    /**
     * @return A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.
     * 
     */
    private @Nullable List<WorkerVersionMigrationsTransferredClass> transferredClasses;

    private WorkerVersionMigrations() {}
    /**
     * @return A list of classes to delete Durable Object namespaces from.
     * 
     */
    public List<String> deletedClasses() {
        return this.deletedClasses == null ? List.of() : this.deletedClasses;
    }
    /**
     * @return A list of classes to create Durable Object namespaces from.
     * 
     */
    public List<String> newClasses() {
        return this.newClasses == null ? List.of() : this.newClasses;
    }
    /**
     * @return A list of classes to create Durable Object namespaces with SQLite from.
     * 
     */
    public List<String> newSqliteClasses() {
        return this.newSqliteClasses == null ? List.of() : this.newSqliteClasses;
    }
    /**
     * @return Tag to set as the latest migration tag.
     * 
     */
    public Optional<String> newTag() {
        return Optional.ofNullable(this.newTag);
    }
    /**
     * @return Tag used to verify against the latest migration tag for this Worker. If they don&#39;t match, the upload is rejected.
     * 
     */
    public Optional<String> oldTag() {
        return Optional.ofNullable(this.oldTag);
    }
    /**
     * @return A list of classes with Durable Object namespaces that were renamed.
     * 
     */
    public List<WorkerVersionMigrationsRenamedClass> renamedClasses() {
        return this.renamedClasses == null ? List.of() : this.renamedClasses;
    }
    /**
     * @return Migrations to apply in order.
     * 
     */
    public List<WorkerVersionMigrationsStep> steps() {
        return this.steps == null ? List.of() : this.steps;
    }
    /**
     * @return A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.
     * 
     */
    public List<WorkerVersionMigrationsTransferredClass> transferredClasses() {
        return this.transferredClasses == null ? List.of() : this.transferredClasses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkerVersionMigrations defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> deletedClasses;
        private @Nullable List<String> newClasses;
        private @Nullable List<String> newSqliteClasses;
        private @Nullable String newTag;
        private @Nullable String oldTag;
        private @Nullable List<WorkerVersionMigrationsRenamedClass> renamedClasses;
        private @Nullable List<WorkerVersionMigrationsStep> steps;
        private @Nullable List<WorkerVersionMigrationsTransferredClass> transferredClasses;
        public Builder() {}
        public Builder(WorkerVersionMigrations defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deletedClasses = defaults.deletedClasses;
    	      this.newClasses = defaults.newClasses;
    	      this.newSqliteClasses = defaults.newSqliteClasses;
    	      this.newTag = defaults.newTag;
    	      this.oldTag = defaults.oldTag;
    	      this.renamedClasses = defaults.renamedClasses;
    	      this.steps = defaults.steps;
    	      this.transferredClasses = defaults.transferredClasses;
        }

        @CustomType.Setter
        public Builder deletedClasses(@Nullable List<String> deletedClasses) {

            this.deletedClasses = deletedClasses;
            return this;
        }
        public Builder deletedClasses(String... deletedClasses) {
            return deletedClasses(List.of(deletedClasses));
        }
        @CustomType.Setter
        public Builder newClasses(@Nullable List<String> newClasses) {

            this.newClasses = newClasses;
            return this;
        }
        public Builder newClasses(String... newClasses) {
            return newClasses(List.of(newClasses));
        }
        @CustomType.Setter
        public Builder newSqliteClasses(@Nullable List<String> newSqliteClasses) {

            this.newSqliteClasses = newSqliteClasses;
            return this;
        }
        public Builder newSqliteClasses(String... newSqliteClasses) {
            return newSqliteClasses(List.of(newSqliteClasses));
        }
        @CustomType.Setter
        public Builder newTag(@Nullable String newTag) {

            this.newTag = newTag;
            return this;
        }
        @CustomType.Setter
        public Builder oldTag(@Nullable String oldTag) {

            this.oldTag = oldTag;
            return this;
        }
        @CustomType.Setter
        public Builder renamedClasses(@Nullable List<WorkerVersionMigrationsRenamedClass> renamedClasses) {

            this.renamedClasses = renamedClasses;
            return this;
        }
        public Builder renamedClasses(WorkerVersionMigrationsRenamedClass... renamedClasses) {
            return renamedClasses(List.of(renamedClasses));
        }
        @CustomType.Setter
        public Builder steps(@Nullable List<WorkerVersionMigrationsStep> steps) {

            this.steps = steps;
            return this;
        }
        public Builder steps(WorkerVersionMigrationsStep... steps) {
            return steps(List.of(steps));
        }
        @CustomType.Setter
        public Builder transferredClasses(@Nullable List<WorkerVersionMigrationsTransferredClass> transferredClasses) {

            this.transferredClasses = transferredClasses;
            return this;
        }
        public Builder transferredClasses(WorkerVersionMigrationsTransferredClass... transferredClasses) {
            return transferredClasses(List.of(transferredClasses));
        }
        public WorkerVersionMigrations build() {
            final var _resultValue = new WorkerVersionMigrations();
            _resultValue.deletedClasses = deletedClasses;
            _resultValue.newClasses = newClasses;
            _resultValue.newSqliteClasses = newSqliteClasses;
            _resultValue.newTag = newTag;
            _resultValue.oldTag = oldTag;
            _resultValue.renamedClasses = renamedClasses;
            _resultValue.steps = steps;
            _resultValue.transferredClasses = transferredClasses;
            return _resultValue;
        }
    }
}
