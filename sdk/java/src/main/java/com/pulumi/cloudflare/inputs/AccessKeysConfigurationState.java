// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessKeysConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final AccessKeysConfigurationState Empty = new AccessKeysConfigurationState();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The number of days until the next key rotation.
     * 
     */
    @Import(name="daysUntilNextRotation")
    private @Nullable Output<Double> daysUntilNextRotation;

    /**
     * @return The number of days until the next key rotation.
     * 
     */
    public Optional<Output<Double>> daysUntilNextRotation() {
        return Optional.ofNullable(this.daysUntilNextRotation);
    }

    /**
     * The number of days between key rotations.
     * 
     */
    @Import(name="keyRotationIntervalDays")
    private @Nullable Output<Double> keyRotationIntervalDays;

    /**
     * @return The number of days between key rotations.
     * 
     */
    public Optional<Output<Double>> keyRotationIntervalDays() {
        return Optional.ofNullable(this.keyRotationIntervalDays);
    }

    /**
     * The timestamp of the previous key rotation.
     * 
     */
    @Import(name="lastKeyRotationAt")
    private @Nullable Output<String> lastKeyRotationAt;

    /**
     * @return The timestamp of the previous key rotation.
     * 
     */
    public Optional<Output<String>> lastKeyRotationAt() {
        return Optional.ofNullable(this.lastKeyRotationAt);
    }

    private AccessKeysConfigurationState() {}

    private AccessKeysConfigurationState(AccessKeysConfigurationState $) {
        this.accountId = $.accountId;
        this.daysUntilNextRotation = $.daysUntilNextRotation;
        this.keyRotationIntervalDays = $.keyRotationIntervalDays;
        this.lastKeyRotationAt = $.lastKeyRotationAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessKeysConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessKeysConfigurationState $;

        public Builder() {
            $ = new AccessKeysConfigurationState();
        }

        public Builder(AccessKeysConfigurationState defaults) {
            $ = new AccessKeysConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param daysUntilNextRotation The number of days until the next key rotation.
         * 
         * @return builder
         * 
         */
        public Builder daysUntilNextRotation(@Nullable Output<Double> daysUntilNextRotation) {
            $.daysUntilNextRotation = daysUntilNextRotation;
            return this;
        }

        /**
         * @param daysUntilNextRotation The number of days until the next key rotation.
         * 
         * @return builder
         * 
         */
        public Builder daysUntilNextRotation(Double daysUntilNextRotation) {
            return daysUntilNextRotation(Output.of(daysUntilNextRotation));
        }

        /**
         * @param keyRotationIntervalDays The number of days between key rotations.
         * 
         * @return builder
         * 
         */
        public Builder keyRotationIntervalDays(@Nullable Output<Double> keyRotationIntervalDays) {
            $.keyRotationIntervalDays = keyRotationIntervalDays;
            return this;
        }

        /**
         * @param keyRotationIntervalDays The number of days between key rotations.
         * 
         * @return builder
         * 
         */
        public Builder keyRotationIntervalDays(Double keyRotationIntervalDays) {
            return keyRotationIntervalDays(Output.of(keyRotationIntervalDays));
        }

        /**
         * @param lastKeyRotationAt The timestamp of the previous key rotation.
         * 
         * @return builder
         * 
         */
        public Builder lastKeyRotationAt(@Nullable Output<String> lastKeyRotationAt) {
            $.lastKeyRotationAt = lastKeyRotationAt;
            return this;
        }

        /**
         * @param lastKeyRotationAt The timestamp of the previous key rotation.
         * 
         * @return builder
         * 
         */
        public Builder lastKeyRotationAt(String lastKeyRotationAt) {
            return lastKeyRotationAt(Output.of(lastKeyRotationAt));
        }

        public AccessKeysConfigurationState build() {
            return $;
        }
    }

}
