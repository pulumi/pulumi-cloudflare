// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessApplicationDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessApplicationDestinationArgs Empty = new AccessApplicationDestinationArgs();

    /**
     * The private CIDR of the destination. Only valid when type=private. IPs are computed as /32 cidr. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    @Import(name="cidr")
    private @Nullable Output<String> cidr;

    /**
     * @return The private CIDR of the destination. Only valid when type=private. IPs are computed as /32 cidr. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    public Optional<Output<String>> cidr() {
        return Optional.ofNullable(this.cidr);
    }

    /**
     * The private hostname of the destination. Only valid when type=private. Private hostnames currently match only Server Name Indications (SNI). Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The private hostname of the destination. Only valid when type=private. Private hostnames currently match only Server Name Indications (SNI). Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The l4 protocol that matches this destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    @Import(name="l4Protocol")
    private @Nullable Output<String> l4Protocol;

    /**
     * @return The l4 protocol that matches this destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    public Optional<Output<String>> l4Protocol() {
        return Optional.ofNullable(this.l4Protocol);
    }

    /**
     * The port range of the destination. Only valid when type=private. Single ports are supported. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    @Import(name="portRange")
    private @Nullable Output<String> portRange;

    /**
     * @return The port range of the destination. Only valid when type=private. Single ports are supported. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    public Optional<Output<String>> portRange() {
        return Optional.ofNullable(this.portRange);
    }

    /**
     * The destination type. Available values: `public`, `private`. Defaults to `public`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The destination type. Available values: `public`, `private`. Defaults to `public`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The public URI of the destination. Can include a domain and path with wildcards. Only valid when type=public.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The public URI of the destination. Can include a domain and path with wildcards. Only valid when type=public.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    /**
     * The VNet ID of the destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    @Import(name="vnetId")
    private @Nullable Output<String> vnetId;

    /**
     * @return The VNet ID of the destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    public Optional<Output<String>> vnetId() {
        return Optional.ofNullable(this.vnetId);
    }

    private AccessApplicationDestinationArgs() {}

    private AccessApplicationDestinationArgs(AccessApplicationDestinationArgs $) {
        this.cidr = $.cidr;
        this.hostname = $.hostname;
        this.l4Protocol = $.l4Protocol;
        this.portRange = $.portRange;
        this.type = $.type;
        this.uri = $.uri;
        this.vnetId = $.vnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessApplicationDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessApplicationDestinationArgs $;

        public Builder() {
            $ = new AccessApplicationDestinationArgs();
        }

        public Builder(AccessApplicationDestinationArgs defaults) {
            $ = new AccessApplicationDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidr The private CIDR of the destination. Only valid when type=private. IPs are computed as /32 cidr. Private destinations are an early access feature and gated behind a feature flag.
         * 
         * @return builder
         * 
         */
        public Builder cidr(@Nullable Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr The private CIDR of the destination. Only valid when type=private. IPs are computed as /32 cidr. Private destinations are an early access feature and gated behind a feature flag.
         * 
         * @return builder
         * 
         */
        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param hostname The private hostname of the destination. Only valid when type=private. Private hostnames currently match only Server Name Indications (SNI). Private destinations are an early access feature and gated behind a feature flag.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The private hostname of the destination. Only valid when type=private. Private hostnames currently match only Server Name Indications (SNI). Private destinations are an early access feature and gated behind a feature flag.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param l4Protocol The l4 protocol that matches this destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
         * 
         * @return builder
         * 
         */
        public Builder l4Protocol(@Nullable Output<String> l4Protocol) {
            $.l4Protocol = l4Protocol;
            return this;
        }

        /**
         * @param l4Protocol The l4 protocol that matches this destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
         * 
         * @return builder
         * 
         */
        public Builder l4Protocol(String l4Protocol) {
            return l4Protocol(Output.of(l4Protocol));
        }

        /**
         * @param portRange The port range of the destination. Only valid when type=private. Single ports are supported. Private destinations are an early access feature and gated behind a feature flag.
         * 
         * @return builder
         * 
         */
        public Builder portRange(@Nullable Output<String> portRange) {
            $.portRange = portRange;
            return this;
        }

        /**
         * @param portRange The port range of the destination. Only valid when type=private. Single ports are supported. Private destinations are an early access feature and gated behind a feature flag.
         * 
         * @return builder
         * 
         */
        public Builder portRange(String portRange) {
            return portRange(Output.of(portRange));
        }

        /**
         * @param type The destination type. Available values: `public`, `private`. Defaults to `public`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The destination type. Available values: `public`, `private`. Defaults to `public`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uri The public URI of the destination. Can include a domain and path with wildcards. Only valid when type=public.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The public URI of the destination. Can include a domain and path with wildcards. Only valid when type=public.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        /**
         * @param vnetId The VNet ID of the destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
         * 
         * @return builder
         * 
         */
        public Builder vnetId(@Nullable Output<String> vnetId) {
            $.vnetId = vnetId;
            return this;
        }

        /**
         * @param vnetId The VNet ID of the destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
         * 
         * @return builder
         * 
         */
        public Builder vnetId(String vnetId) {
            return vnetId(Output.of(vnetId));
        }

        public AccessApplicationDestinationArgs build() {
            return $;
        }
    }

}
