// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessApplicationDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessApplicationDestinationArgs Empty = new AccessApplicationDestinationArgs();

    /**
     * The destination type. Available values: `public`, `private`. Defaults to `public`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The destination type. Available values: `public`, `private`. Defaults to `public`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The URI of the destination. Public destinations can include a domain and path with wildcards. Private destinations are an early access feature and gated behind a feature flag. Private destinations support private IPv4, IPv6, and Server Name Indications (SNI) with optional port ranges.
     * 
     */
    @Import(name="uri", required=true)
    private Output<String> uri;

    /**
     * @return The URI of the destination. Public destinations can include a domain and path with wildcards. Private destinations are an early access feature and gated behind a feature flag. Private destinations support private IPv4, IPv6, and Server Name Indications (SNI) with optional port ranges.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    private AccessApplicationDestinationArgs() {}

    private AccessApplicationDestinationArgs(AccessApplicationDestinationArgs $) {
        this.type = $.type;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessApplicationDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessApplicationDestinationArgs $;

        public Builder() {
            $ = new AccessApplicationDestinationArgs();
        }

        public Builder(AccessApplicationDestinationArgs defaults) {
            $ = new AccessApplicationDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type The destination type. Available values: `public`, `private`. Defaults to `public`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The destination type. Available values: `public`, `private`. Defaults to `public`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uri The URI of the destination. Public destinations can include a domain and path with wildcards. Private destinations are an early access feature and gated behind a feature flag. Private destinations support private IPv4, IPv6, and Server Name Indications (SNI) with optional port ranges.
         * 
         * @return builder
         * 
         */
        public Builder uri(Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The URI of the destination. Public destinations can include a domain and path with wildcards. Private destinations are an early access feature and gated behind a feature flag. Private destinations support private IPv4, IPv6, and Server Name Indications (SNI) with optional port ranges.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public AccessApplicationDestinationArgs build() {
            if ($.uri == null) {
                throw new MissingRequiredPropertyException("AccessApplicationDestinationArgs", "uri");
            }
            return $;
        }
    }

}
