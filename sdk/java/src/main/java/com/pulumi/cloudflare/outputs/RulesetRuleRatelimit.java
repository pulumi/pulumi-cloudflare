// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RulesetRuleRatelimit {
    /**
     * @return Characteristics of the request on which the ratelimiter counter will be incremented.
     * 
     */
    private List<String> characteristics;
    /**
     * @return Defines when the ratelimit counter should be incremented. It is optional and defaults to the same as the rule&#39;s expression.
     * 
     */
    private @Nullable String countingExpression;
    /**
     * @return Period of time in seconds after which the action will be disabled following its first execution.
     * 
     */
    private @Nullable Integer mitigationTimeout;
    /**
     * @return Period in seconds over which the counter is being incremented.
     * 
     */
    private Integer period;
    /**
     * @return The threshold of requests per period after which the action will be executed for the first time.
     * 
     */
    private @Nullable Integer requestsPerPeriod;
    /**
     * @return Defines if ratelimit counting is only done when an origin is reached.
     * 
     */
    private @Nullable Boolean requestsToOrigin;
    /**
     * @return The score threshold per period for which the action will be executed the first time.
     * 
     */
    private @Nullable Integer scorePerPeriod;
    /**
     * @return The response header name provided by the origin which should contain the score to increment ratelimit counter on.
     * 
     */
    private @Nullable String scoreResponseHeaderName;

    private RulesetRuleRatelimit() {}
    /**
     * @return Characteristics of the request on which the ratelimiter counter will be incremented.
     * 
     */
    public List<String> characteristics() {
        return this.characteristics;
    }
    /**
     * @return Defines when the ratelimit counter should be incremented. It is optional and defaults to the same as the rule&#39;s expression.
     * 
     */
    public Optional<String> countingExpression() {
        return Optional.ofNullable(this.countingExpression);
    }
    /**
     * @return Period of time in seconds after which the action will be disabled following its first execution.
     * 
     */
    public Optional<Integer> mitigationTimeout() {
        return Optional.ofNullable(this.mitigationTimeout);
    }
    /**
     * @return Period in seconds over which the counter is being incremented.
     * 
     */
    public Integer period() {
        return this.period;
    }
    /**
     * @return The threshold of requests per period after which the action will be executed for the first time.
     * 
     */
    public Optional<Integer> requestsPerPeriod() {
        return Optional.ofNullable(this.requestsPerPeriod);
    }
    /**
     * @return Defines if ratelimit counting is only done when an origin is reached.
     * 
     */
    public Optional<Boolean> requestsToOrigin() {
        return Optional.ofNullable(this.requestsToOrigin);
    }
    /**
     * @return The score threshold per period for which the action will be executed the first time.
     * 
     */
    public Optional<Integer> scorePerPeriod() {
        return Optional.ofNullable(this.scorePerPeriod);
    }
    /**
     * @return The response header name provided by the origin which should contain the score to increment ratelimit counter on.
     * 
     */
    public Optional<String> scoreResponseHeaderName() {
        return Optional.ofNullable(this.scoreResponseHeaderName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesetRuleRatelimit defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> characteristics;
        private @Nullable String countingExpression;
        private @Nullable Integer mitigationTimeout;
        private Integer period;
        private @Nullable Integer requestsPerPeriod;
        private @Nullable Boolean requestsToOrigin;
        private @Nullable Integer scorePerPeriod;
        private @Nullable String scoreResponseHeaderName;
        public Builder() {}
        public Builder(RulesetRuleRatelimit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.characteristics = defaults.characteristics;
    	      this.countingExpression = defaults.countingExpression;
    	      this.mitigationTimeout = defaults.mitigationTimeout;
    	      this.period = defaults.period;
    	      this.requestsPerPeriod = defaults.requestsPerPeriod;
    	      this.requestsToOrigin = defaults.requestsToOrigin;
    	      this.scorePerPeriod = defaults.scorePerPeriod;
    	      this.scoreResponseHeaderName = defaults.scoreResponseHeaderName;
        }

        @CustomType.Setter
        public Builder characteristics(List<String> characteristics) {
            if (characteristics == null) {
              throw new MissingRequiredPropertyException("RulesetRuleRatelimit", "characteristics");
            }
            this.characteristics = characteristics;
            return this;
        }
        public Builder characteristics(String... characteristics) {
            return characteristics(List.of(characteristics));
        }
        @CustomType.Setter
        public Builder countingExpression(@Nullable String countingExpression) {

            this.countingExpression = countingExpression;
            return this;
        }
        @CustomType.Setter
        public Builder mitigationTimeout(@Nullable Integer mitigationTimeout) {

            this.mitigationTimeout = mitigationTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder period(Integer period) {
            if (period == null) {
              throw new MissingRequiredPropertyException("RulesetRuleRatelimit", "period");
            }
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder requestsPerPeriod(@Nullable Integer requestsPerPeriod) {

            this.requestsPerPeriod = requestsPerPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder requestsToOrigin(@Nullable Boolean requestsToOrigin) {

            this.requestsToOrigin = requestsToOrigin;
            return this;
        }
        @CustomType.Setter
        public Builder scorePerPeriod(@Nullable Integer scorePerPeriod) {

            this.scorePerPeriod = scorePerPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder scoreResponseHeaderName(@Nullable String scoreResponseHeaderName) {

            this.scoreResponseHeaderName = scoreResponseHeaderName;
            return this;
        }
        public RulesetRuleRatelimit build() {
            final var _resultValue = new RulesetRuleRatelimit();
            _resultValue.characteristics = characteristics;
            _resultValue.countingExpression = countingExpression;
            _resultValue.mitigationTimeout = mitigationTimeout;
            _resultValue.period = period;
            _resultValue.requestsPerPeriod = requestsPerPeriod;
            _resultValue.requestsToOrigin = requestsToOrigin;
            _resultValue.scorePerPeriod = scorePerPeriod;
            _resultValue.scoreResponseHeaderName = scoreResponseHeaderName;
            return _resultValue;
        }
    }
}
