// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneDnssecState extends com.pulumi.resources.ResourceArgs {

    public static final ZoneDnssecState Empty = new ZoneDnssecState();

    /**
     * Zone DNSSEC algorithm.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return Zone DNSSEC algorithm.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * Zone DNSSEC digest.
     * 
     */
    @Import(name="digest")
    private @Nullable Output<String> digest;

    /**
     * @return Zone DNSSEC digest.
     * 
     */
    public Optional<Output<String>> digest() {
        return Optional.ofNullable(this.digest);
    }

    /**
     * Digest algorithm use for Zone DNSSEC.
     * 
     */
    @Import(name="digestAlgorithm")
    private @Nullable Output<String> digestAlgorithm;

    /**
     * @return Digest algorithm use for Zone DNSSEC.
     * 
     */
    public Optional<Output<String>> digestAlgorithm() {
        return Optional.ofNullable(this.digestAlgorithm);
    }

    /**
     * Digest Type for Zone DNSSEC.
     * 
     */
    @Import(name="digestType")
    private @Nullable Output<String> digestType;

    /**
     * @return Digest Type for Zone DNSSEC.
     * 
     */
    public Optional<Output<String>> digestType() {
        return Optional.ofNullable(this.digestType);
    }

    /**
     * DS for the Zone DNSSEC.
     * 
     */
    @Import(name="ds")
    private @Nullable Output<String> ds;

    /**
     * @return DS for the Zone DNSSEC.
     * 
     */
    public Optional<Output<String>> ds() {
        return Optional.ofNullable(this.ds);
    }

    /**
     * Zone DNSSEC flags.
     * 
     */
    @Import(name="flags")
    private @Nullable Output<Integer> flags;

    /**
     * @return Zone DNSSEC flags.
     * 
     */
    public Optional<Output<Integer>> flags() {
        return Optional.ofNullable(this.flags);
    }

    /**
     * Key Tag for the Zone DNSSEC.
     * 
     */
    @Import(name="keyTag")
    private @Nullable Output<Integer> keyTag;

    /**
     * @return Key Tag for the Zone DNSSEC.
     * 
     */
    public Optional<Output<Integer>> keyTag() {
        return Optional.ofNullable(this.keyTag);
    }

    /**
     * Key type used for Zone DNSSEC.
     * 
     */
    @Import(name="keyType")
    private @Nullable Output<String> keyType;

    /**
     * @return Key type used for Zone DNSSEC.
     * 
     */
    public Optional<Output<String>> keyType() {
        return Optional.ofNullable(this.keyType);
    }

    /**
     * Zone DNSSEC updated time.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return Zone DNSSEC updated time.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * Public Key for the Zone DNSSEC.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return Public Key for the Zone DNSSEC.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * The status of the Zone DNSSEC.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Zone DNSSEC.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The zone id for the zone.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone id for the zone.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ZoneDnssecState() {}

    private ZoneDnssecState(ZoneDnssecState $) {
        this.algorithm = $.algorithm;
        this.digest = $.digest;
        this.digestAlgorithm = $.digestAlgorithm;
        this.digestType = $.digestType;
        this.ds = $.ds;
        this.flags = $.flags;
        this.keyTag = $.keyTag;
        this.keyType = $.keyType;
        this.modifiedOn = $.modifiedOn;
        this.publicKey = $.publicKey;
        this.status = $.status;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneDnssecState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneDnssecState $;

        public Builder() {
            $ = new ZoneDnssecState();
        }

        public Builder(ZoneDnssecState defaults) {
            $ = new ZoneDnssecState(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Zone DNSSEC algorithm.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Zone DNSSEC algorithm.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param digest Zone DNSSEC digest.
         * 
         * @return builder
         * 
         */
        public Builder digest(@Nullable Output<String> digest) {
            $.digest = digest;
            return this;
        }

        /**
         * @param digest Zone DNSSEC digest.
         * 
         * @return builder
         * 
         */
        public Builder digest(String digest) {
            return digest(Output.of(digest));
        }

        /**
         * @param digestAlgorithm Digest algorithm use for Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder digestAlgorithm(@Nullable Output<String> digestAlgorithm) {
            $.digestAlgorithm = digestAlgorithm;
            return this;
        }

        /**
         * @param digestAlgorithm Digest algorithm use for Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder digestAlgorithm(String digestAlgorithm) {
            return digestAlgorithm(Output.of(digestAlgorithm));
        }

        /**
         * @param digestType Digest Type for Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder digestType(@Nullable Output<String> digestType) {
            $.digestType = digestType;
            return this;
        }

        /**
         * @param digestType Digest Type for Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder digestType(String digestType) {
            return digestType(Output.of(digestType));
        }

        /**
         * @param ds DS for the Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder ds(@Nullable Output<String> ds) {
            $.ds = ds;
            return this;
        }

        /**
         * @param ds DS for the Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder ds(String ds) {
            return ds(Output.of(ds));
        }

        /**
         * @param flags Zone DNSSEC flags.
         * 
         * @return builder
         * 
         */
        public Builder flags(@Nullable Output<Integer> flags) {
            $.flags = flags;
            return this;
        }

        /**
         * @param flags Zone DNSSEC flags.
         * 
         * @return builder
         * 
         */
        public Builder flags(Integer flags) {
            return flags(Output.of(flags));
        }

        /**
         * @param keyTag Key Tag for the Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder keyTag(@Nullable Output<Integer> keyTag) {
            $.keyTag = keyTag;
            return this;
        }

        /**
         * @param keyTag Key Tag for the Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder keyTag(Integer keyTag) {
            return keyTag(Output.of(keyTag));
        }

        /**
         * @param keyType Key type used for Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder keyType(@Nullable Output<String> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType Key type used for Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder keyType(String keyType) {
            return keyType(Output.of(keyType));
        }

        /**
         * @param modifiedOn Zone DNSSEC updated time.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn Zone DNSSEC updated time.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param publicKey Public Key for the Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey Public Key for the Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param status The status of the Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Zone DNSSEC.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param zoneId The zone id for the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone id for the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ZoneDnssecState build() {
            return $;
        }
    }

}
