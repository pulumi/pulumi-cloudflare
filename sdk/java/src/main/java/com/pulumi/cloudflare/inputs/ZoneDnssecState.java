// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneDnssecState extends com.pulumi.resources.ResourceArgs {

    public static final ZoneDnssecState Empty = new ZoneDnssecState();

    /**
     * Algorithm key code.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return Algorithm key code.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * Digest hash.
     * 
     */
    @Import(name="digest")
    private @Nullable Output<String> digest;

    /**
     * @return Digest hash.
     * 
     */
    public Optional<Output<String>> digest() {
        return Optional.ofNullable(this.digest);
    }

    /**
     * Type of digest algorithm.
     * 
     */
    @Import(name="digestAlgorithm")
    private @Nullable Output<String> digestAlgorithm;

    /**
     * @return Type of digest algorithm.
     * 
     */
    public Optional<Output<String>> digestAlgorithm() {
        return Optional.ofNullable(this.digestAlgorithm);
    }

    /**
     * Coded type for digest algorithm.
     * 
     */
    @Import(name="digestType")
    private @Nullable Output<String> digestType;

    /**
     * @return Coded type for digest algorithm.
     * 
     */
    public Optional<Output<String>> digestType() {
        return Optional.ofNullable(this.digestType);
    }

    /**
     * If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
     * providers to serve a DNSSEC-signed zone at the same time.
     * This is required for DNSKEY records (except those automatically
     * generated by Cloudflare) to be added to the zone.
     * 
     */
    @Import(name="dnssecMultiSigner")
    private @Nullable Output<Boolean> dnssecMultiSigner;

    /**
     * @return If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
     * providers to serve a DNSSEC-signed zone at the same time.
     * This is required for DNSKEY records (except those automatically
     * generated by Cloudflare) to be added to the zone.
     * 
     */
    public Optional<Output<Boolean>> dnssecMultiSigner() {
        return Optional.ofNullable(this.dnssecMultiSigner);
    }

    /**
     * If true, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without
     * requiring Cloudflare to sign any records on the fly. Note that this feature has some limitations. See [Cloudflare as
     * Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for
     * details.
     * 
     */
    @Import(name="dnssecPresigned")
    private @Nullable Output<Boolean> dnssecPresigned;

    /**
     * @return If true, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without
     * requiring Cloudflare to sign any records on the fly. Note that this feature has some limitations. See [Cloudflare as
     * Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for
     * details.
     * 
     */
    public Optional<Output<Boolean>> dnssecPresigned() {
        return Optional.ofNullable(this.dnssecPresigned);
    }

    /**
     * If true, enables the use of NSEC3 together with DNSSEC on the zone. Combined with setting dnssec_presigned to true, this
     * enables the use of NSEC3 records when transferring in from an external provider. If dnssec_presigned is instead set to
     * false (default), NSEC3 records will be generated and signed at request time. See [DNSSEC with
     * NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.
     * 
     */
    @Import(name="dnssecUseNsec3")
    private @Nullable Output<Boolean> dnssecUseNsec3;

    /**
     * @return If true, enables the use of NSEC3 together with DNSSEC on the zone. Combined with setting dnssec_presigned to true, this
     * enables the use of NSEC3 records when transferring in from an external provider. If dnssec_presigned is instead set to
     * false (default), NSEC3 records will be generated and signed at request time. See [DNSSEC with
     * NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.
     * 
     */
    public Optional<Output<Boolean>> dnssecUseNsec3() {
        return Optional.ofNullable(this.dnssecUseNsec3);
    }

    /**
     * Full DS record.
     * 
     */
    @Import(name="ds")
    private @Nullable Output<String> ds;

    /**
     * @return Full DS record.
     * 
     */
    public Optional<Output<String>> ds() {
        return Optional.ofNullable(this.ds);
    }

    /**
     * Flag for DNSSEC record.
     * 
     */
    @Import(name="flags")
    private @Nullable Output<Double> flags;

    /**
     * @return Flag for DNSSEC record.
     * 
     */
    public Optional<Output<Double>> flags() {
        return Optional.ofNullable(this.flags);
    }

    /**
     * Code for key tag.
     * 
     */
    @Import(name="keyTag")
    private @Nullable Output<Double> keyTag;

    /**
     * @return Code for key tag.
     * 
     */
    public Optional<Output<Double>> keyTag() {
        return Optional.ofNullable(this.keyTag);
    }

    /**
     * Algorithm key type.
     * 
     */
    @Import(name="keyType")
    private @Nullable Output<String> keyType;

    /**
     * @return Algorithm key type.
     * 
     */
    public Optional<Output<String>> keyType() {
        return Optional.ofNullable(this.keyType);
    }

    /**
     * When DNSSEC was last modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return When DNSSEC was last modified.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * Public key for DS record.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return Public key for DS record.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * Status of DNSSEC, based on user-desired state and presence of necessary records. Available values: &#34;active&#34;, &#34;disabled&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of DNSSEC, based on user-desired state and presence of necessary records. Available values: &#34;active&#34;, &#34;disabled&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ZoneDnssecState() {}

    private ZoneDnssecState(ZoneDnssecState $) {
        this.algorithm = $.algorithm;
        this.digest = $.digest;
        this.digestAlgorithm = $.digestAlgorithm;
        this.digestType = $.digestType;
        this.dnssecMultiSigner = $.dnssecMultiSigner;
        this.dnssecPresigned = $.dnssecPresigned;
        this.dnssecUseNsec3 = $.dnssecUseNsec3;
        this.ds = $.ds;
        this.flags = $.flags;
        this.keyTag = $.keyTag;
        this.keyType = $.keyType;
        this.modifiedOn = $.modifiedOn;
        this.publicKey = $.publicKey;
        this.status = $.status;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneDnssecState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneDnssecState $;

        public Builder() {
            $ = new ZoneDnssecState();
        }

        public Builder(ZoneDnssecState defaults) {
            $ = new ZoneDnssecState(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Algorithm key code.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Algorithm key code.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param digest Digest hash.
         * 
         * @return builder
         * 
         */
        public Builder digest(@Nullable Output<String> digest) {
            $.digest = digest;
            return this;
        }

        /**
         * @param digest Digest hash.
         * 
         * @return builder
         * 
         */
        public Builder digest(String digest) {
            return digest(Output.of(digest));
        }

        /**
         * @param digestAlgorithm Type of digest algorithm.
         * 
         * @return builder
         * 
         */
        public Builder digestAlgorithm(@Nullable Output<String> digestAlgorithm) {
            $.digestAlgorithm = digestAlgorithm;
            return this;
        }

        /**
         * @param digestAlgorithm Type of digest algorithm.
         * 
         * @return builder
         * 
         */
        public Builder digestAlgorithm(String digestAlgorithm) {
            return digestAlgorithm(Output.of(digestAlgorithm));
        }

        /**
         * @param digestType Coded type for digest algorithm.
         * 
         * @return builder
         * 
         */
        public Builder digestType(@Nullable Output<String> digestType) {
            $.digestType = digestType;
            return this;
        }

        /**
         * @param digestType Coded type for digest algorithm.
         * 
         * @return builder
         * 
         */
        public Builder digestType(String digestType) {
            return digestType(Output.of(digestType));
        }

        /**
         * @param dnssecMultiSigner If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
         * providers to serve a DNSSEC-signed zone at the same time.
         * This is required for DNSKEY records (except those automatically
         * generated by Cloudflare) to be added to the zone.
         * 
         * @return builder
         * 
         */
        public Builder dnssecMultiSigner(@Nullable Output<Boolean> dnssecMultiSigner) {
            $.dnssecMultiSigner = dnssecMultiSigner;
            return this;
        }

        /**
         * @param dnssecMultiSigner If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
         * providers to serve a DNSSEC-signed zone at the same time.
         * This is required for DNSKEY records (except those automatically
         * generated by Cloudflare) to be added to the zone.
         * 
         * @return builder
         * 
         */
        public Builder dnssecMultiSigner(Boolean dnssecMultiSigner) {
            return dnssecMultiSigner(Output.of(dnssecMultiSigner));
        }

        /**
         * @param dnssecPresigned If true, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without
         * requiring Cloudflare to sign any records on the fly. Note that this feature has some limitations. See [Cloudflare as
         * Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for
         * details.
         * 
         * @return builder
         * 
         */
        public Builder dnssecPresigned(@Nullable Output<Boolean> dnssecPresigned) {
            $.dnssecPresigned = dnssecPresigned;
            return this;
        }

        /**
         * @param dnssecPresigned If true, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without
         * requiring Cloudflare to sign any records on the fly. Note that this feature has some limitations. See [Cloudflare as
         * Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for
         * details.
         * 
         * @return builder
         * 
         */
        public Builder dnssecPresigned(Boolean dnssecPresigned) {
            return dnssecPresigned(Output.of(dnssecPresigned));
        }

        /**
         * @param dnssecUseNsec3 If true, enables the use of NSEC3 together with DNSSEC on the zone. Combined with setting dnssec_presigned to true, this
         * enables the use of NSEC3 records when transferring in from an external provider. If dnssec_presigned is instead set to
         * false (default), NSEC3 records will be generated and signed at request time. See [DNSSEC with
         * NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.
         * 
         * @return builder
         * 
         */
        public Builder dnssecUseNsec3(@Nullable Output<Boolean> dnssecUseNsec3) {
            $.dnssecUseNsec3 = dnssecUseNsec3;
            return this;
        }

        /**
         * @param dnssecUseNsec3 If true, enables the use of NSEC3 together with DNSSEC on the zone. Combined with setting dnssec_presigned to true, this
         * enables the use of NSEC3 records when transferring in from an external provider. If dnssec_presigned is instead set to
         * false (default), NSEC3 records will be generated and signed at request time. See [DNSSEC with
         * NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.
         * 
         * @return builder
         * 
         */
        public Builder dnssecUseNsec3(Boolean dnssecUseNsec3) {
            return dnssecUseNsec3(Output.of(dnssecUseNsec3));
        }

        /**
         * @param ds Full DS record.
         * 
         * @return builder
         * 
         */
        public Builder ds(@Nullable Output<String> ds) {
            $.ds = ds;
            return this;
        }

        /**
         * @param ds Full DS record.
         * 
         * @return builder
         * 
         */
        public Builder ds(String ds) {
            return ds(Output.of(ds));
        }

        /**
         * @param flags Flag for DNSSEC record.
         * 
         * @return builder
         * 
         */
        public Builder flags(@Nullable Output<Double> flags) {
            $.flags = flags;
            return this;
        }

        /**
         * @param flags Flag for DNSSEC record.
         * 
         * @return builder
         * 
         */
        public Builder flags(Double flags) {
            return flags(Output.of(flags));
        }

        /**
         * @param keyTag Code for key tag.
         * 
         * @return builder
         * 
         */
        public Builder keyTag(@Nullable Output<Double> keyTag) {
            $.keyTag = keyTag;
            return this;
        }

        /**
         * @param keyTag Code for key tag.
         * 
         * @return builder
         * 
         */
        public Builder keyTag(Double keyTag) {
            return keyTag(Output.of(keyTag));
        }

        /**
         * @param keyType Algorithm key type.
         * 
         * @return builder
         * 
         */
        public Builder keyType(@Nullable Output<String> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType Algorithm key type.
         * 
         * @return builder
         * 
         */
        public Builder keyType(String keyType) {
            return keyType(Output.of(keyType));
        }

        /**
         * @param modifiedOn When DNSSEC was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn When DNSSEC was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param publicKey Public key for DS record.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey Public key for DS record.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param status Status of DNSSEC, based on user-desired state and presence of necessary records. Available values: &#34;active&#34;, &#34;disabled&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of DNSSEC, based on user-desired state and presence of necessary records. Available values: &#34;active&#34;, &#34;disabled&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ZoneDnssecState build() {
            return $;
        }
    }

}
