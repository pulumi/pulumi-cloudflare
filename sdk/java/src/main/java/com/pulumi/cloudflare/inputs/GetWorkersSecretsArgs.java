// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetWorkersSecretsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWorkersSecretsArgs Empty = new GetWorkersSecretsArgs();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Name of the Workers for Platforms dispatch namespace.
     * 
     */
    @Import(name="dispatchNamespace", required=true)
    private Output<String> dispatchNamespace;

    /**
     * @return Name of the Workers for Platforms dispatch namespace.
     * 
     */
    public Output<String> dispatchNamespace() {
        return this.dispatchNamespace;
    }

    /**
     * Max items to fetch, default: 1000
     * 
     */
    @Import(name="maxItems")
    private @Nullable Output<Integer> maxItems;

    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Output<Integer>> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    /**
     * Name of the script, used in URLs and route configuration.
     * 
     */
    @Import(name="scriptName", required=true)
    private Output<String> scriptName;

    /**
     * @return Name of the script, used in URLs and route configuration.
     * 
     */
    public Output<String> scriptName() {
        return this.scriptName;
    }

    private GetWorkersSecretsArgs() {}

    private GetWorkersSecretsArgs(GetWorkersSecretsArgs $) {
        this.accountId = $.accountId;
        this.dispatchNamespace = $.dispatchNamespace;
        this.maxItems = $.maxItems;
        this.scriptName = $.scriptName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWorkersSecretsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWorkersSecretsArgs $;

        public Builder() {
            $ = new GetWorkersSecretsArgs();
        }

        public Builder(GetWorkersSecretsArgs defaults) {
            $ = new GetWorkersSecretsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param dispatchNamespace Name of the Workers for Platforms dispatch namespace.
         * 
         * @return builder
         * 
         */
        public Builder dispatchNamespace(Output<String> dispatchNamespace) {
            $.dispatchNamespace = dispatchNamespace;
            return this;
        }

        /**
         * @param dispatchNamespace Name of the Workers for Platforms dispatch namespace.
         * 
         * @return builder
         * 
         */
        public Builder dispatchNamespace(String dispatchNamespace) {
            return dispatchNamespace(Output.of(dispatchNamespace));
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(@Nullable Output<Integer> maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(Integer maxItems) {
            return maxItems(Output.of(maxItems));
        }

        /**
         * @param scriptName Name of the script, used in URLs and route configuration.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(Output<String> scriptName) {
            $.scriptName = scriptName;
            return this;
        }

        /**
         * @param scriptName Name of the script, used in URLs and route configuration.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(String scriptName) {
            return scriptName(Output.of(scriptName));
        }

        public GetWorkersSecretsArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GetWorkersSecretsArgs", "accountId");
            }
            if ($.dispatchNamespace == null) {
                throw new MissingRequiredPropertyException("GetWorkersSecretsArgs", "dispatchNamespace");
            }
            if ($.scriptName == null) {
                throw new MissingRequiredPropertyException("GetWorkersSecretsArgs", "scriptName");
            }
            return $;
        }
    }

}
