// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ZeroTrustAccessIdentityProviderConfigHeaderAttributeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustAccessIdentityProviderConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustAccessIdentityProviderConfigArgs Empty = new ZeroTrustAccessIdentityProviderConfigArgs();

    /**
     * Your companies TLD
     * 
     */
    @Import(name="appsDomain")
    private @Nullable Output<String> appsDomain;

    /**
     * @return Your companies TLD
     * 
     */
    public Optional<Output<String>> appsDomain() {
        return Optional.ofNullable(this.appsDomain);
    }

    /**
     * A list of SAML attribute names that will be added to your signed JWT token and can be used in SAML policy rules.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<List<String>> attributes;

    /**
     * @return A list of SAML attribute names that will be added to your signed JWT token and can be used in SAML policy rules.
     * 
     */
    public Optional<Output<List<String>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * The authorization_endpoint URL of your IdP
     * 
     */
    @Import(name="authUrl")
    private @Nullable Output<String> authUrl;

    /**
     * @return The authorization_endpoint URL of your IdP
     * 
     */
    public Optional<Output<String>> authUrl() {
        return Optional.ofNullable(this.authUrl);
    }

    /**
     * Your okta authorization server id
     * 
     */
    @Import(name="authorizationServerId")
    private @Nullable Output<String> authorizationServerId;

    /**
     * @return Your okta authorization server id
     * 
     */
    public Optional<Output<String>> authorizationServerId() {
        return Optional.ofNullable(this.authorizationServerId);
    }

    /**
     * Your centrify account url
     * 
     */
    @Import(name="centrifyAccount")
    private @Nullable Output<String> centrifyAccount;

    /**
     * @return Your centrify account url
     * 
     */
    public Optional<Output<String>> centrifyAccount() {
        return Optional.ofNullable(this.centrifyAccount);
    }

    /**
     * Your centrify app id
     * 
     */
    @Import(name="centrifyAppId")
    private @Nullable Output<String> centrifyAppId;

    /**
     * @return Your centrify app id
     * 
     */
    public Optional<Output<String>> centrifyAppId() {
        return Optional.ofNullable(this.centrifyAppId);
    }

    /**
     * The jwks_uri endpoint of your IdP to allow the IdP keys to sign the tokens
     * 
     */
    @Import(name="certsUrl")
    private @Nullable Output<String> certsUrl;

    /**
     * @return The jwks_uri endpoint of your IdP to allow the IdP keys to sign the tokens
     * 
     */
    public Optional<Output<String>> certsUrl() {
        return Optional.ofNullable(this.certsUrl);
    }

    /**
     * Custom claims
     * 
     */
    @Import(name="claims")
    private @Nullable Output<List<String>> claims;

    /**
     * @return Custom claims
     * 
     */
    public Optional<Output<List<String>>> claims() {
        return Optional.ofNullable(this.claims);
    }

    /**
     * Your OAuth Client ID
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return Your OAuth Client ID
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Your OAuth Client Secret
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return Your OAuth Client Secret
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * Should Cloudflare try to load authentication contexts from your account
     * 
     */
    @Import(name="conditionalAccessEnabled")
    private @Nullable Output<Boolean> conditionalAccessEnabled;

    /**
     * @return Should Cloudflare try to load authentication contexts from your account
     * 
     */
    public Optional<Output<Boolean>> conditionalAccessEnabled() {
        return Optional.ofNullable(this.conditionalAccessEnabled);
    }

    /**
     * Your Azure directory uuid
     * 
     */
    @Import(name="directoryId")
    private @Nullable Output<String> directoryId;

    /**
     * @return Your Azure directory uuid
     * 
     */
    public Optional<Output<String>> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }

    /**
     * The attribute name for email in the SAML response.
     * 
     */
    @Import(name="emailAttributeName")
    private @Nullable Output<String> emailAttributeName;

    /**
     * @return The attribute name for email in the SAML response.
     * 
     */
    public Optional<Output<String>> emailAttributeName() {
        return Optional.ofNullable(this.emailAttributeName);
    }

    /**
     * The claim name for email in the id_token response.
     * 
     */
    @Import(name="emailClaimName")
    private @Nullable Output<String> emailClaimName;

    /**
     * @return The claim name for email in the id_token response.
     * 
     */
    public Optional<Output<String>> emailClaimName() {
        return Optional.ofNullable(this.emailClaimName);
    }

    /**
     * Add a list of attribute names that will be returned in the response header from the Access callback.
     * 
     */
    @Import(name="headerAttributes")
    private @Nullable Output<List<ZeroTrustAccessIdentityProviderConfigHeaderAttributeArgs>> headerAttributes;

    /**
     * @return Add a list of attribute names that will be returned in the response header from the Access callback.
     * 
     */
    public Optional<Output<List<ZeroTrustAccessIdentityProviderConfigHeaderAttributeArgs>>> headerAttributes() {
        return Optional.ofNullable(this.headerAttributes);
    }

    /**
     * X509 certificate to verify the signature in the SAML authentication response
     * 
     */
    @Import(name="idpPublicCerts")
    private @Nullable Output<List<String>> idpPublicCerts;

    /**
     * @return X509 certificate to verify the signature in the SAML authentication response
     * 
     */
    public Optional<Output<List<String>>> idpPublicCerts() {
        return Optional.ofNullable(this.idpPublicCerts);
    }

    /**
     * IdP Entity ID or Issuer URL
     * 
     */
    @Import(name="issuerUrl")
    private @Nullable Output<String> issuerUrl;

    /**
     * @return IdP Entity ID or Issuer URL
     * 
     */
    public Optional<Output<String>> issuerUrl() {
        return Optional.ofNullable(this.issuerUrl);
    }

    /**
     * Your okta account url
     * 
     */
    @Import(name="oktaAccount")
    private @Nullable Output<String> oktaAccount;

    /**
     * @return Your okta account url
     * 
     */
    public Optional<Output<String>> oktaAccount() {
        return Optional.ofNullable(this.oktaAccount);
    }

    /**
     * Your OneLogin account url
     * 
     */
    @Import(name="oneloginAccount")
    private @Nullable Output<String> oneloginAccount;

    /**
     * @return Your OneLogin account url
     * 
     */
    public Optional<Output<String>> oneloginAccount() {
        return Optional.ofNullable(this.oneloginAccount);
    }

    /**
     * Your PingOne environment identifier
     * 
     */
    @Import(name="pingEnvId")
    private @Nullable Output<String> pingEnvId;

    /**
     * @return Your PingOne environment identifier
     * 
     */
    public Optional<Output<String>> pingEnvId() {
        return Optional.ofNullable(this.pingEnvId);
    }

    /**
     * Enable Proof Key for Code Exchange (PKCE)
     * 
     */
    @Import(name="pkceEnabled")
    private @Nullable Output<Boolean> pkceEnabled;

    /**
     * @return Enable Proof Key for Code Exchange (PKCE)
     * 
     */
    public Optional<Output<Boolean>> pkceEnabled() {
        return Optional.ofNullable(this.pkceEnabled);
    }

    /**
     * Indicates the type of user interaction that is required. prompt=login forces the user to enter their credentials on that request, negating single-sign on. prompt=none is the opposite. It ensures that the user isn&#39;t presented with any interactive prompt. If the request can&#39;t be completed silently by using single-sign on, the Microsoft identity platform returns an interaction*required error. prompt=select*account interrupts single sign-on providing account selection experience listing all the accounts either in session or any remembered account or an option to choose to use a different account altogether.
     * Available values: &#34;login&#34;, &#34;select_account&#34;, &#34;none&#34;.
     * 
     */
    @Import(name="prompt")
    private @Nullable Output<String> prompt;

    /**
     * @return Indicates the type of user interaction that is required. prompt=login forces the user to enter their credentials on that request, negating single-sign on. prompt=none is the opposite. It ensures that the user isn&#39;t presented with any interactive prompt. If the request can&#39;t be completed silently by using single-sign on, the Microsoft identity platform returns an interaction*required error. prompt=select*account interrupts single sign-on providing account selection experience listing all the accounts either in session or any remembered account or an option to choose to use a different account altogether.
     * Available values: &#34;login&#34;, &#34;select_account&#34;, &#34;none&#34;.
     * 
     */
    public Optional<Output<String>> prompt() {
        return Optional.ofNullable(this.prompt);
    }

    @Import(name="redirectUrl")
    private @Nullable Output<String> redirectUrl;

    public Optional<Output<String>> redirectUrl() {
        return Optional.ofNullable(this.redirectUrl);
    }

    /**
     * OAuth scopes
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return OAuth scopes
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Sign the SAML authentication request with Access credentials. To verify the signature, use the public key from the Access certs endpoints.
     * 
     */
    @Import(name="signRequest")
    private @Nullable Output<Boolean> signRequest;

    /**
     * @return Sign the SAML authentication request with Access credentials. To verify the signature, use the public key from the Access certs endpoints.
     * 
     */
    public Optional<Output<Boolean>> signRequest() {
        return Optional.ofNullable(this.signRequest);
    }

    /**
     * URL to send the SAML authentication requests to
     * 
     */
    @Import(name="ssoTargetUrl")
    private @Nullable Output<String> ssoTargetUrl;

    /**
     * @return URL to send the SAML authentication requests to
     * 
     */
    public Optional<Output<String>> ssoTargetUrl() {
        return Optional.ofNullable(this.ssoTargetUrl);
    }

    /**
     * Should Cloudflare try to load groups from your account
     * 
     */
    @Import(name="supportGroups")
    private @Nullable Output<Boolean> supportGroups;

    /**
     * @return Should Cloudflare try to load groups from your account
     * 
     */
    public Optional<Output<Boolean>> supportGroups() {
        return Optional.ofNullable(this.supportGroups);
    }

    /**
     * The token_endpoint URL of your IdP
     * 
     */
    @Import(name="tokenUrl")
    private @Nullable Output<String> tokenUrl;

    /**
     * @return The token_endpoint URL of your IdP
     * 
     */
    public Optional<Output<String>> tokenUrl() {
        return Optional.ofNullable(this.tokenUrl);
    }

    private ZeroTrustAccessIdentityProviderConfigArgs() {}

    private ZeroTrustAccessIdentityProviderConfigArgs(ZeroTrustAccessIdentityProviderConfigArgs $) {
        this.appsDomain = $.appsDomain;
        this.attributes = $.attributes;
        this.authUrl = $.authUrl;
        this.authorizationServerId = $.authorizationServerId;
        this.centrifyAccount = $.centrifyAccount;
        this.centrifyAppId = $.centrifyAppId;
        this.certsUrl = $.certsUrl;
        this.claims = $.claims;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.conditionalAccessEnabled = $.conditionalAccessEnabled;
        this.directoryId = $.directoryId;
        this.emailAttributeName = $.emailAttributeName;
        this.emailClaimName = $.emailClaimName;
        this.headerAttributes = $.headerAttributes;
        this.idpPublicCerts = $.idpPublicCerts;
        this.issuerUrl = $.issuerUrl;
        this.oktaAccount = $.oktaAccount;
        this.oneloginAccount = $.oneloginAccount;
        this.pingEnvId = $.pingEnvId;
        this.pkceEnabled = $.pkceEnabled;
        this.prompt = $.prompt;
        this.redirectUrl = $.redirectUrl;
        this.scopes = $.scopes;
        this.signRequest = $.signRequest;
        this.ssoTargetUrl = $.ssoTargetUrl;
        this.supportGroups = $.supportGroups;
        this.tokenUrl = $.tokenUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustAccessIdentityProviderConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustAccessIdentityProviderConfigArgs $;

        public Builder() {
            $ = new ZeroTrustAccessIdentityProviderConfigArgs();
        }

        public Builder(ZeroTrustAccessIdentityProviderConfigArgs defaults) {
            $ = new ZeroTrustAccessIdentityProviderConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appsDomain Your companies TLD
         * 
         * @return builder
         * 
         */
        public Builder appsDomain(@Nullable Output<String> appsDomain) {
            $.appsDomain = appsDomain;
            return this;
        }

        /**
         * @param appsDomain Your companies TLD
         * 
         * @return builder
         * 
         */
        public Builder appsDomain(String appsDomain) {
            return appsDomain(Output.of(appsDomain));
        }

        /**
         * @param attributes A list of SAML attribute names that will be added to your signed JWT token and can be used in SAML policy rules.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<List<String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes A list of SAML attribute names that will be added to your signed JWT token and can be used in SAML policy rules.
         * 
         * @return builder
         * 
         */
        public Builder attributes(List<String> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param attributes A list of SAML attribute names that will be added to your signed JWT token and can be used in SAML policy rules.
         * 
         * @return builder
         * 
         */
        public Builder attributes(String... attributes) {
            return attributes(List.of(attributes));
        }

        /**
         * @param authUrl The authorization_endpoint URL of your IdP
         * 
         * @return builder
         * 
         */
        public Builder authUrl(@Nullable Output<String> authUrl) {
            $.authUrl = authUrl;
            return this;
        }

        /**
         * @param authUrl The authorization_endpoint URL of your IdP
         * 
         * @return builder
         * 
         */
        public Builder authUrl(String authUrl) {
            return authUrl(Output.of(authUrl));
        }

        /**
         * @param authorizationServerId Your okta authorization server id
         * 
         * @return builder
         * 
         */
        public Builder authorizationServerId(@Nullable Output<String> authorizationServerId) {
            $.authorizationServerId = authorizationServerId;
            return this;
        }

        /**
         * @param authorizationServerId Your okta authorization server id
         * 
         * @return builder
         * 
         */
        public Builder authorizationServerId(String authorizationServerId) {
            return authorizationServerId(Output.of(authorizationServerId));
        }

        /**
         * @param centrifyAccount Your centrify account url
         * 
         * @return builder
         * 
         */
        public Builder centrifyAccount(@Nullable Output<String> centrifyAccount) {
            $.centrifyAccount = centrifyAccount;
            return this;
        }

        /**
         * @param centrifyAccount Your centrify account url
         * 
         * @return builder
         * 
         */
        public Builder centrifyAccount(String centrifyAccount) {
            return centrifyAccount(Output.of(centrifyAccount));
        }

        /**
         * @param centrifyAppId Your centrify app id
         * 
         * @return builder
         * 
         */
        public Builder centrifyAppId(@Nullable Output<String> centrifyAppId) {
            $.centrifyAppId = centrifyAppId;
            return this;
        }

        /**
         * @param centrifyAppId Your centrify app id
         * 
         * @return builder
         * 
         */
        public Builder centrifyAppId(String centrifyAppId) {
            return centrifyAppId(Output.of(centrifyAppId));
        }

        /**
         * @param certsUrl The jwks_uri endpoint of your IdP to allow the IdP keys to sign the tokens
         * 
         * @return builder
         * 
         */
        public Builder certsUrl(@Nullable Output<String> certsUrl) {
            $.certsUrl = certsUrl;
            return this;
        }

        /**
         * @param certsUrl The jwks_uri endpoint of your IdP to allow the IdP keys to sign the tokens
         * 
         * @return builder
         * 
         */
        public Builder certsUrl(String certsUrl) {
            return certsUrl(Output.of(certsUrl));
        }

        /**
         * @param claims Custom claims
         * 
         * @return builder
         * 
         */
        public Builder claims(@Nullable Output<List<String>> claims) {
            $.claims = claims;
            return this;
        }

        /**
         * @param claims Custom claims
         * 
         * @return builder
         * 
         */
        public Builder claims(List<String> claims) {
            return claims(Output.of(claims));
        }

        /**
         * @param claims Custom claims
         * 
         * @return builder
         * 
         */
        public Builder claims(String... claims) {
            return claims(List.of(claims));
        }

        /**
         * @param clientId Your OAuth Client ID
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Your OAuth Client ID
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret Your OAuth Client Secret
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret Your OAuth Client Secret
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param conditionalAccessEnabled Should Cloudflare try to load authentication contexts from your account
         * 
         * @return builder
         * 
         */
        public Builder conditionalAccessEnabled(@Nullable Output<Boolean> conditionalAccessEnabled) {
            $.conditionalAccessEnabled = conditionalAccessEnabled;
            return this;
        }

        /**
         * @param conditionalAccessEnabled Should Cloudflare try to load authentication contexts from your account
         * 
         * @return builder
         * 
         */
        public Builder conditionalAccessEnabled(Boolean conditionalAccessEnabled) {
            return conditionalAccessEnabled(Output.of(conditionalAccessEnabled));
        }

        /**
         * @param directoryId Your Azure directory uuid
         * 
         * @return builder
         * 
         */
        public Builder directoryId(@Nullable Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        /**
         * @param directoryId Your Azure directory uuid
         * 
         * @return builder
         * 
         */
        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        /**
         * @param emailAttributeName The attribute name for email in the SAML response.
         * 
         * @return builder
         * 
         */
        public Builder emailAttributeName(@Nullable Output<String> emailAttributeName) {
            $.emailAttributeName = emailAttributeName;
            return this;
        }

        /**
         * @param emailAttributeName The attribute name for email in the SAML response.
         * 
         * @return builder
         * 
         */
        public Builder emailAttributeName(String emailAttributeName) {
            return emailAttributeName(Output.of(emailAttributeName));
        }

        /**
         * @param emailClaimName The claim name for email in the id_token response.
         * 
         * @return builder
         * 
         */
        public Builder emailClaimName(@Nullable Output<String> emailClaimName) {
            $.emailClaimName = emailClaimName;
            return this;
        }

        /**
         * @param emailClaimName The claim name for email in the id_token response.
         * 
         * @return builder
         * 
         */
        public Builder emailClaimName(String emailClaimName) {
            return emailClaimName(Output.of(emailClaimName));
        }

        /**
         * @param headerAttributes Add a list of attribute names that will be returned in the response header from the Access callback.
         * 
         * @return builder
         * 
         */
        public Builder headerAttributes(@Nullable Output<List<ZeroTrustAccessIdentityProviderConfigHeaderAttributeArgs>> headerAttributes) {
            $.headerAttributes = headerAttributes;
            return this;
        }

        /**
         * @param headerAttributes Add a list of attribute names that will be returned in the response header from the Access callback.
         * 
         * @return builder
         * 
         */
        public Builder headerAttributes(List<ZeroTrustAccessIdentityProviderConfigHeaderAttributeArgs> headerAttributes) {
            return headerAttributes(Output.of(headerAttributes));
        }

        /**
         * @param headerAttributes Add a list of attribute names that will be returned in the response header from the Access callback.
         * 
         * @return builder
         * 
         */
        public Builder headerAttributes(ZeroTrustAccessIdentityProviderConfigHeaderAttributeArgs... headerAttributes) {
            return headerAttributes(List.of(headerAttributes));
        }

        /**
         * @param idpPublicCerts X509 certificate to verify the signature in the SAML authentication response
         * 
         * @return builder
         * 
         */
        public Builder idpPublicCerts(@Nullable Output<List<String>> idpPublicCerts) {
            $.idpPublicCerts = idpPublicCerts;
            return this;
        }

        /**
         * @param idpPublicCerts X509 certificate to verify the signature in the SAML authentication response
         * 
         * @return builder
         * 
         */
        public Builder idpPublicCerts(List<String> idpPublicCerts) {
            return idpPublicCerts(Output.of(idpPublicCerts));
        }

        /**
         * @param idpPublicCerts X509 certificate to verify the signature in the SAML authentication response
         * 
         * @return builder
         * 
         */
        public Builder idpPublicCerts(String... idpPublicCerts) {
            return idpPublicCerts(List.of(idpPublicCerts));
        }

        /**
         * @param issuerUrl IdP Entity ID or Issuer URL
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(@Nullable Output<String> issuerUrl) {
            $.issuerUrl = issuerUrl;
            return this;
        }

        /**
         * @param issuerUrl IdP Entity ID or Issuer URL
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(String issuerUrl) {
            return issuerUrl(Output.of(issuerUrl));
        }

        /**
         * @param oktaAccount Your okta account url
         * 
         * @return builder
         * 
         */
        public Builder oktaAccount(@Nullable Output<String> oktaAccount) {
            $.oktaAccount = oktaAccount;
            return this;
        }

        /**
         * @param oktaAccount Your okta account url
         * 
         * @return builder
         * 
         */
        public Builder oktaAccount(String oktaAccount) {
            return oktaAccount(Output.of(oktaAccount));
        }

        /**
         * @param oneloginAccount Your OneLogin account url
         * 
         * @return builder
         * 
         */
        public Builder oneloginAccount(@Nullable Output<String> oneloginAccount) {
            $.oneloginAccount = oneloginAccount;
            return this;
        }

        /**
         * @param oneloginAccount Your OneLogin account url
         * 
         * @return builder
         * 
         */
        public Builder oneloginAccount(String oneloginAccount) {
            return oneloginAccount(Output.of(oneloginAccount));
        }

        /**
         * @param pingEnvId Your PingOne environment identifier
         * 
         * @return builder
         * 
         */
        public Builder pingEnvId(@Nullable Output<String> pingEnvId) {
            $.pingEnvId = pingEnvId;
            return this;
        }

        /**
         * @param pingEnvId Your PingOne environment identifier
         * 
         * @return builder
         * 
         */
        public Builder pingEnvId(String pingEnvId) {
            return pingEnvId(Output.of(pingEnvId));
        }

        /**
         * @param pkceEnabled Enable Proof Key for Code Exchange (PKCE)
         * 
         * @return builder
         * 
         */
        public Builder pkceEnabled(@Nullable Output<Boolean> pkceEnabled) {
            $.pkceEnabled = pkceEnabled;
            return this;
        }

        /**
         * @param pkceEnabled Enable Proof Key for Code Exchange (PKCE)
         * 
         * @return builder
         * 
         */
        public Builder pkceEnabled(Boolean pkceEnabled) {
            return pkceEnabled(Output.of(pkceEnabled));
        }

        /**
         * @param prompt Indicates the type of user interaction that is required. prompt=login forces the user to enter their credentials on that request, negating single-sign on. prompt=none is the opposite. It ensures that the user isn&#39;t presented with any interactive prompt. If the request can&#39;t be completed silently by using single-sign on, the Microsoft identity platform returns an interaction*required error. prompt=select*account interrupts single sign-on providing account selection experience listing all the accounts either in session or any remembered account or an option to choose to use a different account altogether.
         * Available values: &#34;login&#34;, &#34;select_account&#34;, &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder prompt(@Nullable Output<String> prompt) {
            $.prompt = prompt;
            return this;
        }

        /**
         * @param prompt Indicates the type of user interaction that is required. prompt=login forces the user to enter their credentials on that request, negating single-sign on. prompt=none is the opposite. It ensures that the user isn&#39;t presented with any interactive prompt. If the request can&#39;t be completed silently by using single-sign on, the Microsoft identity platform returns an interaction*required error. prompt=select*account interrupts single sign-on providing account selection experience listing all the accounts either in session or any remembered account or an option to choose to use a different account altogether.
         * Available values: &#34;login&#34;, &#34;select_account&#34;, &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder prompt(String prompt) {
            return prompt(Output.of(prompt));
        }

        public Builder redirectUrl(@Nullable Output<String> redirectUrl) {
            $.redirectUrl = redirectUrl;
            return this;
        }

        public Builder redirectUrl(String redirectUrl) {
            return redirectUrl(Output.of(redirectUrl));
        }

        /**
         * @param scopes OAuth scopes
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes OAuth scopes
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes OAuth scopes
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param signRequest Sign the SAML authentication request with Access credentials. To verify the signature, use the public key from the Access certs endpoints.
         * 
         * @return builder
         * 
         */
        public Builder signRequest(@Nullable Output<Boolean> signRequest) {
            $.signRequest = signRequest;
            return this;
        }

        /**
         * @param signRequest Sign the SAML authentication request with Access credentials. To verify the signature, use the public key from the Access certs endpoints.
         * 
         * @return builder
         * 
         */
        public Builder signRequest(Boolean signRequest) {
            return signRequest(Output.of(signRequest));
        }

        /**
         * @param ssoTargetUrl URL to send the SAML authentication requests to
         * 
         * @return builder
         * 
         */
        public Builder ssoTargetUrl(@Nullable Output<String> ssoTargetUrl) {
            $.ssoTargetUrl = ssoTargetUrl;
            return this;
        }

        /**
         * @param ssoTargetUrl URL to send the SAML authentication requests to
         * 
         * @return builder
         * 
         */
        public Builder ssoTargetUrl(String ssoTargetUrl) {
            return ssoTargetUrl(Output.of(ssoTargetUrl));
        }

        /**
         * @param supportGroups Should Cloudflare try to load groups from your account
         * 
         * @return builder
         * 
         */
        public Builder supportGroups(@Nullable Output<Boolean> supportGroups) {
            $.supportGroups = supportGroups;
            return this;
        }

        /**
         * @param supportGroups Should Cloudflare try to load groups from your account
         * 
         * @return builder
         * 
         */
        public Builder supportGroups(Boolean supportGroups) {
            return supportGroups(Output.of(supportGroups));
        }

        /**
         * @param tokenUrl The token_endpoint URL of your IdP
         * 
         * @return builder
         * 
         */
        public Builder tokenUrl(@Nullable Output<String> tokenUrl) {
            $.tokenUrl = tokenUrl;
            return this;
        }

        /**
         * @param tokenUrl The token_endpoint URL of your IdP
         * 
         * @return builder
         * 
         */
        public Builder tokenUrl(String tokenUrl) {
            return tokenUrl(Output.of(tokenUrl));
        }

        public ZeroTrustAccessIdentityProviderConfigArgs build() {
            return $;
        }
    }

}
