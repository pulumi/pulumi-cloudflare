// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetD1DatabaseFilter;
import com.pulumi.cloudflare.outputs.GetD1DatabaseReadReplication;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetD1DatabaseResult {
    /**
     * @return Account identifier tag.
     * 
     */
    private String accountId;
    /**
     * @return Specifies the timestamp the resource was created as an ISO8601 string.
     * 
     */
    private String createdAt;
    /**
     * @return D1 database identifier (UUID).
     * 
     */
    private @Nullable String databaseId;
    /**
     * @return The D1 database&#39;s size, in bytes.
     * 
     */
    private Double fileSize;
    private @Nullable GetD1DatabaseFilter filter;
    /**
     * @return D1 database identifier (UUID).
     * 
     */
    private String id;
    /**
     * @return D1 database name.
     * 
     */
    private String name;
    private Double numTables;
    /**
     * @return Configuration for D1 read replication.
     * 
     */
    private GetD1DatabaseReadReplication readReplication;
    /**
     * @return D1 database identifier (UUID).
     * 
     */
    private String uuid;
    private String version;

    private GetD1DatabaseResult() {}
    /**
     * @return Account identifier tag.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Specifies the timestamp the resource was created as an ISO8601 string.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return D1 database identifier (UUID).
     * 
     */
    public Optional<String> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }
    /**
     * @return The D1 database&#39;s size, in bytes.
     * 
     */
    public Double fileSize() {
        return this.fileSize;
    }
    public Optional<GetD1DatabaseFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return D1 database identifier (UUID).
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return D1 database name.
     * 
     */
    public String name() {
        return this.name;
    }
    public Double numTables() {
        return this.numTables;
    }
    /**
     * @return Configuration for D1 read replication.
     * 
     */
    public GetD1DatabaseReadReplication readReplication() {
        return this.readReplication;
    }
    /**
     * @return D1 database identifier (UUID).
     * 
     */
    public String uuid() {
        return this.uuid;
    }
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetD1DatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String createdAt;
        private @Nullable String databaseId;
        private Double fileSize;
        private @Nullable GetD1DatabaseFilter filter;
        private String id;
        private String name;
        private Double numTables;
        private GetD1DatabaseReadReplication readReplication;
        private String uuid;
        private String version;
        public Builder() {}
        public Builder(GetD1DatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.createdAt = defaults.createdAt;
    	      this.databaseId = defaults.databaseId;
    	      this.fileSize = defaults.fileSize;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.numTables = defaults.numTables;
    	      this.readReplication = defaults.readReplication;
    	      this.uuid = defaults.uuid;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetD1DatabaseResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetD1DatabaseResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(@Nullable String databaseId) {

            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder fileSize(Double fileSize) {
            if (fileSize == null) {
              throw new MissingRequiredPropertyException("GetD1DatabaseResult", "fileSize");
            }
            this.fileSize = fileSize;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable GetD1DatabaseFilter filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetD1DatabaseResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetD1DatabaseResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder numTables(Double numTables) {
            if (numTables == null) {
              throw new MissingRequiredPropertyException("GetD1DatabaseResult", "numTables");
            }
            this.numTables = numTables;
            return this;
        }
        @CustomType.Setter
        public Builder readReplication(GetD1DatabaseReadReplication readReplication) {
            if (readReplication == null) {
              throw new MissingRequiredPropertyException("GetD1DatabaseResult", "readReplication");
            }
            this.readReplication = readReplication;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetD1DatabaseResult", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetD1DatabaseResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetD1DatabaseResult build() {
            final var _resultValue = new GetD1DatabaseResult();
            _resultValue.accountId = accountId;
            _resultValue.createdAt = createdAt;
            _resultValue.databaseId = databaseId;
            _resultValue.fileSize = fileSize;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.numTables = numTables;
            _resultValue.readReplication = readReplication;
            _resultValue.uuid = uuid;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
