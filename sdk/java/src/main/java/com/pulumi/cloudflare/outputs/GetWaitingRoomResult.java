// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetWaitingRoomAdditionalRoute;
import com.pulumi.cloudflare.outputs.GetWaitingRoomCookieAttributes;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWaitingRoomResult {
    /**
     * @return Only available for the Waiting Room Advanced subscription. Additional hostname and path combinations to which this waiting room will be applied. There is an implied wildcard at the end of the path. The hostname and path combination must be unique to this and all other waiting rooms.
     * 
     */
    private List<GetWaitingRoomAdditionalRoute> additionalRoutes;
    /**
     * @return Configures cookie attributes for the waiting room cookie. This encrypted cookie stores a user&#39;s status in the waiting room, such as queue position.
     * 
     */
    private GetWaitingRoomCookieAttributes cookieAttributes;
    /**
     * @return Appends a &#39;_&#39; + a custom suffix to the end of Cloudflare Waiting Room&#39;s cookie name(_*cf*waitingroom). If `cookie_suffix` is &#34;abcd&#34;, the cookie name will be `__cf_waitingroom_abcd`. This field is required if using `additional_routes`.
     * 
     */
    private String cookieSuffix;
    private String createdOn;
    /**
     * @return Only available for the Waiting Room Advanced subscription. This is a template html file that will be rendered at the edge. If no custom*page*html is provided, the default waiting room will be used. The template is based on mustache ( https://mustache.github.io/ ). There are several variables that are evaluated by the Cloudflare edge:
     * 
     */
    private String customPageHtml;
    private String defaultTemplateLanguage;
    private String description;
    private Boolean disableSessionRenewal;
    private List<String> enabledOriginCommands;
    private String host;
    private String id;
    private Boolean jsonResponseEnabled;
    private String modifiedOn;
    private String name;
    private Integer newUsersPerMinute;
    private String nextEventPrequeueStartTime;
    private String nextEventStartTime;
    private String path;
    private Boolean queueAll;
    private String queueingMethod;
    private Integer queueingStatusCode;
    private Integer sessionDuration;
    private Boolean suspended;
    private Integer totalActiveUsers;
    private String turnstileAction;
    private String turnstileMode;
    private @Nullable String waitingRoomId;
    /**
     * @return Identifier.
     * 
     */
    private String zoneId;

    private GetWaitingRoomResult() {}
    /**
     * @return Only available for the Waiting Room Advanced subscription. Additional hostname and path combinations to which this waiting room will be applied. There is an implied wildcard at the end of the path. The hostname and path combination must be unique to this and all other waiting rooms.
     * 
     */
    public List<GetWaitingRoomAdditionalRoute> additionalRoutes() {
        return this.additionalRoutes;
    }
    /**
     * @return Configures cookie attributes for the waiting room cookie. This encrypted cookie stores a user&#39;s status in the waiting room, such as queue position.
     * 
     */
    public GetWaitingRoomCookieAttributes cookieAttributes() {
        return this.cookieAttributes;
    }
    /**
     * @return Appends a &#39;_&#39; + a custom suffix to the end of Cloudflare Waiting Room&#39;s cookie name(_*cf*waitingroom). If `cookie_suffix` is &#34;abcd&#34;, the cookie name will be `__cf_waitingroom_abcd`. This field is required if using `additional_routes`.
     * 
     */
    public String cookieSuffix() {
        return this.cookieSuffix;
    }
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return Only available for the Waiting Room Advanced subscription. This is a template html file that will be rendered at the edge. If no custom*page*html is provided, the default waiting room will be used. The template is based on mustache ( https://mustache.github.io/ ). There are several variables that are evaluated by the Cloudflare edge:
     * 
     */
    public String customPageHtml() {
        return this.customPageHtml;
    }
    public String defaultTemplateLanguage() {
        return this.defaultTemplateLanguage;
    }
    public String description() {
        return this.description;
    }
    public Boolean disableSessionRenewal() {
        return this.disableSessionRenewal;
    }
    public List<String> enabledOriginCommands() {
        return this.enabledOriginCommands;
    }
    public String host() {
        return this.host;
    }
    public String id() {
        return this.id;
    }
    public Boolean jsonResponseEnabled() {
        return this.jsonResponseEnabled;
    }
    public String modifiedOn() {
        return this.modifiedOn;
    }
    public String name() {
        return this.name;
    }
    public Integer newUsersPerMinute() {
        return this.newUsersPerMinute;
    }
    public String nextEventPrequeueStartTime() {
        return this.nextEventPrequeueStartTime;
    }
    public String nextEventStartTime() {
        return this.nextEventStartTime;
    }
    public String path() {
        return this.path;
    }
    public Boolean queueAll() {
        return this.queueAll;
    }
    public String queueingMethod() {
        return this.queueingMethod;
    }
    public Integer queueingStatusCode() {
        return this.queueingStatusCode;
    }
    public Integer sessionDuration() {
        return this.sessionDuration;
    }
    public Boolean suspended() {
        return this.suspended;
    }
    public Integer totalActiveUsers() {
        return this.totalActiveUsers;
    }
    public String turnstileAction() {
        return this.turnstileAction;
    }
    public String turnstileMode() {
        return this.turnstileMode;
    }
    public Optional<String> waitingRoomId() {
        return Optional.ofNullable(this.waitingRoomId);
    }
    /**
     * @return Identifier.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWaitingRoomResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetWaitingRoomAdditionalRoute> additionalRoutes;
        private GetWaitingRoomCookieAttributes cookieAttributes;
        private String cookieSuffix;
        private String createdOn;
        private String customPageHtml;
        private String defaultTemplateLanguage;
        private String description;
        private Boolean disableSessionRenewal;
        private List<String> enabledOriginCommands;
        private String host;
        private String id;
        private Boolean jsonResponseEnabled;
        private String modifiedOn;
        private String name;
        private Integer newUsersPerMinute;
        private String nextEventPrequeueStartTime;
        private String nextEventStartTime;
        private String path;
        private Boolean queueAll;
        private String queueingMethod;
        private Integer queueingStatusCode;
        private Integer sessionDuration;
        private Boolean suspended;
        private Integer totalActiveUsers;
        private String turnstileAction;
        private String turnstileMode;
        private @Nullable String waitingRoomId;
        private String zoneId;
        public Builder() {}
        public Builder(GetWaitingRoomResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalRoutes = defaults.additionalRoutes;
    	      this.cookieAttributes = defaults.cookieAttributes;
    	      this.cookieSuffix = defaults.cookieSuffix;
    	      this.createdOn = defaults.createdOn;
    	      this.customPageHtml = defaults.customPageHtml;
    	      this.defaultTemplateLanguage = defaults.defaultTemplateLanguage;
    	      this.description = defaults.description;
    	      this.disableSessionRenewal = defaults.disableSessionRenewal;
    	      this.enabledOriginCommands = defaults.enabledOriginCommands;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.jsonResponseEnabled = defaults.jsonResponseEnabled;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.name = defaults.name;
    	      this.newUsersPerMinute = defaults.newUsersPerMinute;
    	      this.nextEventPrequeueStartTime = defaults.nextEventPrequeueStartTime;
    	      this.nextEventStartTime = defaults.nextEventStartTime;
    	      this.path = defaults.path;
    	      this.queueAll = defaults.queueAll;
    	      this.queueingMethod = defaults.queueingMethod;
    	      this.queueingStatusCode = defaults.queueingStatusCode;
    	      this.sessionDuration = defaults.sessionDuration;
    	      this.suspended = defaults.suspended;
    	      this.totalActiveUsers = defaults.totalActiveUsers;
    	      this.turnstileAction = defaults.turnstileAction;
    	      this.turnstileMode = defaults.turnstileMode;
    	      this.waitingRoomId = defaults.waitingRoomId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder additionalRoutes(List<GetWaitingRoomAdditionalRoute> additionalRoutes) {
            if (additionalRoutes == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "additionalRoutes");
            }
            this.additionalRoutes = additionalRoutes;
            return this;
        }
        public Builder additionalRoutes(GetWaitingRoomAdditionalRoute... additionalRoutes) {
            return additionalRoutes(List.of(additionalRoutes));
        }
        @CustomType.Setter
        public Builder cookieAttributes(GetWaitingRoomCookieAttributes cookieAttributes) {
            if (cookieAttributes == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "cookieAttributes");
            }
            this.cookieAttributes = cookieAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder cookieSuffix(String cookieSuffix) {
            if (cookieSuffix == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "cookieSuffix");
            }
            this.cookieSuffix = cookieSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder customPageHtml(String customPageHtml) {
            if (customPageHtml == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "customPageHtml");
            }
            this.customPageHtml = customPageHtml;
            return this;
        }
        @CustomType.Setter
        public Builder defaultTemplateLanguage(String defaultTemplateLanguage) {
            if (defaultTemplateLanguage == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "defaultTemplateLanguage");
            }
            this.defaultTemplateLanguage = defaultTemplateLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disableSessionRenewal(Boolean disableSessionRenewal) {
            if (disableSessionRenewal == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "disableSessionRenewal");
            }
            this.disableSessionRenewal = disableSessionRenewal;
            return this;
        }
        @CustomType.Setter
        public Builder enabledOriginCommands(List<String> enabledOriginCommands) {
            if (enabledOriginCommands == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "enabledOriginCommands");
            }
            this.enabledOriginCommands = enabledOriginCommands;
            return this;
        }
        public Builder enabledOriginCommands(String... enabledOriginCommands) {
            return enabledOriginCommands(List.of(enabledOriginCommands));
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder jsonResponseEnabled(Boolean jsonResponseEnabled) {
            if (jsonResponseEnabled == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "jsonResponseEnabled");
            }
            this.jsonResponseEnabled = jsonResponseEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder newUsersPerMinute(Integer newUsersPerMinute) {
            if (newUsersPerMinute == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "newUsersPerMinute");
            }
            this.newUsersPerMinute = newUsersPerMinute;
            return this;
        }
        @CustomType.Setter
        public Builder nextEventPrequeueStartTime(String nextEventPrequeueStartTime) {
            if (nextEventPrequeueStartTime == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "nextEventPrequeueStartTime");
            }
            this.nextEventPrequeueStartTime = nextEventPrequeueStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder nextEventStartTime(String nextEventStartTime) {
            if (nextEventStartTime == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "nextEventStartTime");
            }
            this.nextEventStartTime = nextEventStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder queueAll(Boolean queueAll) {
            if (queueAll == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "queueAll");
            }
            this.queueAll = queueAll;
            return this;
        }
        @CustomType.Setter
        public Builder queueingMethod(String queueingMethod) {
            if (queueingMethod == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "queueingMethod");
            }
            this.queueingMethod = queueingMethod;
            return this;
        }
        @CustomType.Setter
        public Builder queueingStatusCode(Integer queueingStatusCode) {
            if (queueingStatusCode == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "queueingStatusCode");
            }
            this.queueingStatusCode = queueingStatusCode;
            return this;
        }
        @CustomType.Setter
        public Builder sessionDuration(Integer sessionDuration) {
            if (sessionDuration == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "sessionDuration");
            }
            this.sessionDuration = sessionDuration;
            return this;
        }
        @CustomType.Setter
        public Builder suspended(Boolean suspended) {
            if (suspended == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "suspended");
            }
            this.suspended = suspended;
            return this;
        }
        @CustomType.Setter
        public Builder totalActiveUsers(Integer totalActiveUsers) {
            if (totalActiveUsers == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "totalActiveUsers");
            }
            this.totalActiveUsers = totalActiveUsers;
            return this;
        }
        @CustomType.Setter
        public Builder turnstileAction(String turnstileAction) {
            if (turnstileAction == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "turnstileAction");
            }
            this.turnstileAction = turnstileAction;
            return this;
        }
        @CustomType.Setter
        public Builder turnstileMode(String turnstileMode) {
            if (turnstileMode == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "turnstileMode");
            }
            this.turnstileMode = turnstileMode;
            return this;
        }
        @CustomType.Setter
        public Builder waitingRoomId(@Nullable String waitingRoomId) {

            this.waitingRoomId = waitingRoomId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetWaitingRoomResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetWaitingRoomResult build() {
            final var _resultValue = new GetWaitingRoomResult();
            _resultValue.additionalRoutes = additionalRoutes;
            _resultValue.cookieAttributes = cookieAttributes;
            _resultValue.cookieSuffix = cookieSuffix;
            _resultValue.createdOn = createdOn;
            _resultValue.customPageHtml = customPageHtml;
            _resultValue.defaultTemplateLanguage = defaultTemplateLanguage;
            _resultValue.description = description;
            _resultValue.disableSessionRenewal = disableSessionRenewal;
            _resultValue.enabledOriginCommands = enabledOriginCommands;
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.jsonResponseEnabled = jsonResponseEnabled;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.name = name;
            _resultValue.newUsersPerMinute = newUsersPerMinute;
            _resultValue.nextEventPrequeueStartTime = nextEventPrequeueStartTime;
            _resultValue.nextEventStartTime = nextEventStartTime;
            _resultValue.path = path;
            _resultValue.queueAll = queueAll;
            _resultValue.queueingMethod = queueingMethod;
            _resultValue.queueingStatusCode = queueingStatusCode;
            _resultValue.sessionDuration = sessionDuration;
            _resultValue.suspended = suspended;
            _resultValue.totalActiveUsers = totalActiveUsers;
            _resultValue.turnstileAction = turnstileAction;
            _resultValue.turnstileMode = turnstileMode;
            _resultValue.waitingRoomId = waitingRoomId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
