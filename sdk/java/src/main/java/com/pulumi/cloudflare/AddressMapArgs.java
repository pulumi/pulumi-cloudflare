// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.AddressMapMembershipArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AddressMapArgs extends com.pulumi.resources.ResourceArgs {

    public static final AddressMapArgs Empty = new AddressMapArgs();

    /**
     * Identifier of a Cloudflare account.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier of a Cloudflare account.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
     * 
     */
    @Import(name="defaultSni")
    private @Nullable Output<String> defaultSni;

    /**
     * @return If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
     * 
     */
    public Optional<Output<String>> defaultSni() {
        return Optional.ofNullable(this.defaultSni);
    }

    /**
     * An optional description field which may be used to describe the types of IPs or zones on the map.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description field which may be used to describe the types of IPs or zones on the map.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the Address Map is enabled or not. Cloudflare&#39;s DNS will not respond with IP addresses on an Address Map until the map is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the Address Map is enabled or not. Cloudflare&#39;s DNS will not respond with IP addresses on an Address Map until the map is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="ips")
    private @Nullable Output<List<String>> ips;

    public Optional<Output<List<String>>> ips() {
        return Optional.ofNullable(this.ips);
    }

    /**
     * Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
     * 
     */
    @Import(name="memberships")
    private @Nullable Output<List<AddressMapMembershipArgs>> memberships;

    /**
     * @return Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
     * 
     */
    public Optional<Output<List<AddressMapMembershipArgs>>> memberships() {
        return Optional.ofNullable(this.memberships);
    }

    private AddressMapArgs() {}

    private AddressMapArgs(AddressMapArgs $) {
        this.accountId = $.accountId;
        this.defaultSni = $.defaultSni;
        this.description = $.description;
        this.enabled = $.enabled;
        this.ips = $.ips;
        this.memberships = $.memberships;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AddressMapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AddressMapArgs $;

        public Builder() {
            $ = new AddressMapArgs();
        }

        public Builder(AddressMapArgs defaults) {
            $ = new AddressMapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier of a Cloudflare account.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier of a Cloudflare account.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param defaultSni If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
         * 
         * @return builder
         * 
         */
        public Builder defaultSni(@Nullable Output<String> defaultSni) {
            $.defaultSni = defaultSni;
            return this;
        }

        /**
         * @param defaultSni If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
         * 
         * @return builder
         * 
         */
        public Builder defaultSni(String defaultSni) {
            return defaultSni(Output.of(defaultSni));
        }

        /**
         * @param description An optional description field which may be used to describe the types of IPs or zones on the map.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description field which may be used to describe the types of IPs or zones on the map.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the Address Map is enabled or not. Cloudflare&#39;s DNS will not respond with IP addresses on an Address Map until the map is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the Address Map is enabled or not. Cloudflare&#39;s DNS will not respond with IP addresses on an Address Map until the map is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder ips(@Nullable Output<List<String>> ips) {
            $.ips = ips;
            return this;
        }

        public Builder ips(List<String> ips) {
            return ips(Output.of(ips));
        }

        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }

        /**
         * @param memberships Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
         * 
         * @return builder
         * 
         */
        public Builder memberships(@Nullable Output<List<AddressMapMembershipArgs>> memberships) {
            $.memberships = memberships;
            return this;
        }

        /**
         * @param memberships Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
         * 
         * @return builder
         * 
         */
        public Builder memberships(List<AddressMapMembershipArgs> memberships) {
            return memberships(Output.of(memberships));
        }

        /**
         * @param memberships Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
         * 
         * @return builder
         * 
         */
        public Builder memberships(AddressMapMembershipArgs... memberships) {
            return memberships(List.of(memberships));
        }

        public AddressMapArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("AddressMapArgs", "accountId");
            }
            return $;
        }
    }

}
