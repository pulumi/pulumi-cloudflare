// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WaitingRoomRulesRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final WaitingRoomRulesRuleArgs Empty = new WaitingRoomRulesRuleArgs();

    /**
     * The action to take when the expression matches.
     * Available values: &#34;bypass*waiting*room&#34;.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return The action to take when the expression matches.
     * Available values: &#34;bypass*waiting*room&#34;.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * The description of the rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * When set to true, the rule is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return When set to true, the rule is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Criteria defining when there is a match for the current rule.
     * 
     */
    @Import(name="expression", required=true)
    private Output<String> expression;

    /**
     * @return Criteria defining when there is a match for the current rule.
     * 
     */
    public Output<String> expression() {
        return this.expression;
    }

    private WaitingRoomRulesRuleArgs() {}

    private WaitingRoomRulesRuleArgs(WaitingRoomRulesRuleArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.enabled = $.enabled;
        this.expression = $.expression;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WaitingRoomRulesRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WaitingRoomRulesRuleArgs $;

        public Builder() {
            $ = new WaitingRoomRulesRuleArgs();
        }

        public Builder(WaitingRoomRulesRuleArgs defaults) {
            $ = new WaitingRoomRulesRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to take when the expression matches.
         * Available values: &#34;bypass*waiting*room&#34;.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to take when the expression matches.
         * Available values: &#34;bypass*waiting*room&#34;.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param description The description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled When set to true, the rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled When set to true, the rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param expression Criteria defining when there is a match for the current rule.
         * 
         * @return builder
         * 
         */
        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression Criteria defining when there is a match for the current rule.
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        public WaitingRoomRulesRuleArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("WaitingRoomRulesRuleArgs", "action");
            }
            if ($.expression == null) {
                throw new MissingRequiredPropertyException("WaitingRoomRulesRuleArgs", "expression");
            }
            return $;
        }
    }

}
