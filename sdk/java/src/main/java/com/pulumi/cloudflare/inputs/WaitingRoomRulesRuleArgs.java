// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WaitingRoomRulesRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final WaitingRoomRulesRuleArgs Empty = new WaitingRoomRulesRuleArgs();

    /**
     * Action to perform in the ruleset rule. Available values: `bypass_waiting_room`.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Action to perform in the ruleset rule. Available values: `bypass_waiting_room`.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Brief summary of the waiting room rule and its intended use.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Brief summary of the waiting room rule and its intended use.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Criteria for an HTTP request to trigger the waiting room rule action. Uses the Firewall Rules expression language based on Wireshark display filters. Refer to the [Waiting Room Rules Docs](https://developers.cloudflare.com/waiting-room/additional-options/waiting-room-rules/bypass-rules/).
     * 
     */
    @Import(name="expression", required=true)
    private Output<String> expression;

    /**
     * @return Criteria for an HTTP request to trigger the waiting room rule action. Uses the Firewall Rules expression language based on Wireshark display filters. Refer to the [Waiting Room Rules Docs](https://developers.cloudflare.com/waiting-room/additional-options/waiting-room-rules/bypass-rules/).
     * 
     */
    public Output<String> expression() {
        return this.expression;
    }

    /**
     * Unique rule identifier.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique rule identifier.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Whether the rule is enabled or disabled. Available values: `enabled`, `disabled`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Whether the rule is enabled or disabled. Available values: `enabled`, `disabled`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Version of the waiting room rule.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version of the waiting room rule.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private WaitingRoomRulesRuleArgs() {}

    private WaitingRoomRulesRuleArgs(WaitingRoomRulesRuleArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.expression = $.expression;
        this.id = $.id;
        this.status = $.status;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WaitingRoomRulesRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WaitingRoomRulesRuleArgs $;

        public Builder() {
            $ = new WaitingRoomRulesRuleArgs();
        }

        public Builder(WaitingRoomRulesRuleArgs defaults) {
            $ = new WaitingRoomRulesRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to perform in the ruleset rule. Available values: `bypass_waiting_room`.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to perform in the ruleset rule. Available values: `bypass_waiting_room`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param description Brief summary of the waiting room rule and its intended use.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Brief summary of the waiting room rule and its intended use.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param expression Criteria for an HTTP request to trigger the waiting room rule action. Uses the Firewall Rules expression language based on Wireshark display filters. Refer to the [Waiting Room Rules Docs](https://developers.cloudflare.com/waiting-room/additional-options/waiting-room-rules/bypass-rules/).
         * 
         * @return builder
         * 
         */
        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression Criteria for an HTTP request to trigger the waiting room rule action. Uses the Firewall Rules expression language based on Wireshark display filters. Refer to the [Waiting Room Rules Docs](https://developers.cloudflare.com/waiting-room/additional-options/waiting-room-rules/bypass-rules/).
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
         * @param id Unique rule identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique rule identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param status Whether the rule is enabled or disabled. Available values: `enabled`, `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Whether the rule is enabled or disabled. Available values: `enabled`, `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param version Version of the waiting room rule.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the waiting room rule.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public WaitingRoomRulesRuleArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("WaitingRoomRulesRuleArgs", "action");
            }
            if ($.expression == null) {
                throw new MissingRequiredPropertyException("WaitingRoomRulesRuleArgs", "expression");
            }
            return $;
        }
    }

}
