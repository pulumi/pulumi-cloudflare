// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamCaptionLanguageArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamCaptionLanguageArgs Empty = new StreamCaptionLanguageArgs();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * The WebVTT file containing the caption or subtitle content.
     * 
     */
    @Import(name="file")
    private @Nullable Output<String> file;

    /**
     * @return The WebVTT file containing the caption or subtitle content.
     * 
     */
    public Optional<Output<String>> file() {
        return Optional.ofNullable(this.file);
    }

    /**
     * A Cloudflare-generated unique identifier for a media item.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return A Cloudflare-generated unique identifier for a media item.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * The language tag in BCP 47 format.
     * 
     */
    @Import(name="language", required=true)
    private Output<String> language;

    /**
     * @return The language tag in BCP 47 format.
     * 
     */
    public Output<String> language() {
        return this.language;
    }

    private StreamCaptionLanguageArgs() {}

    private StreamCaptionLanguageArgs(StreamCaptionLanguageArgs $) {
        this.accountId = $.accountId;
        this.file = $.file;
        this.identifier = $.identifier;
        this.language = $.language;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamCaptionLanguageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamCaptionLanguageArgs $;

        public Builder() {
            $ = new StreamCaptionLanguageArgs();
        }

        public Builder(StreamCaptionLanguageArgs defaults) {
            $ = new StreamCaptionLanguageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param file The WebVTT file containing the caption or subtitle content.
         * 
         * @return builder
         * 
         */
        public Builder file(@Nullable Output<String> file) {
            $.file = file;
            return this;
        }

        /**
         * @param file The WebVTT file containing the caption or subtitle content.
         * 
         * @return builder
         * 
         */
        public Builder file(String file) {
            return file(Output.of(file));
        }

        /**
         * @param identifier A Cloudflare-generated unique identifier for a media item.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier A Cloudflare-generated unique identifier for a media item.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param language The language tag in BCP 47 format.
         * 
         * @return builder
         * 
         */
        public Builder language(Output<String> language) {
            $.language = language;
            return this;
        }

        /**
         * @param language The language tag in BCP 47 format.
         * 
         * @return builder
         * 
         */
        public Builder language(String language) {
            return language(Output.of(language));
        }

        public StreamCaptionLanguageArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("StreamCaptionLanguageArgs", "accountId");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("StreamCaptionLanguageArgs", "identifier");
            }
            if ($.language == null) {
                throw new MissingRequiredPropertyException("StreamCaptionLanguageArgs", "language");
            }
            return $;
        }
    }

}
