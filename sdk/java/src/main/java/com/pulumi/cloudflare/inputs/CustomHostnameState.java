// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.CustomHostnameSslArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomHostnameState extends com.pulumi.resources.ResourceArgs {

    public static final CustomHostnameState Empty = new CustomHostnameState();

    /**
     * The custom origin server used for certificates.
     * 
     */
    @Import(name="customOriginServer")
    private @Nullable Output<String> customOriginServer;

    /**
     * @return The custom origin server used for certificates.
     * 
     */
    public Optional<Output<String>> customOriginServer() {
        return Optional.ofNullable(this.customOriginServer);
    }

    /**
     * The [custom origin SNI](https://developers.cloudflare.com/ssl/ssl-for-saas/hostname-specific-behavior/custom-origin) used for certificates.
     * 
     */
    @Import(name="customOriginSni")
    private @Nullable Output<String> customOriginSni;

    /**
     * @return The [custom origin SNI](https://developers.cloudflare.com/ssl/ssl-for-saas/hostname-specific-behavior/custom-origin) used for certificates.
     * 
     */
    public Optional<Output<String>> customOriginSni() {
        return Optional.ofNullable(this.customOriginSni);
    }

    /**
     * Hostname you intend to request a certificate for.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return Hostname you intend to request a certificate for.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    @Import(name="ownershipVerification")
    private @Nullable Output<Map<String,String>> ownershipVerification;

    public Optional<Output<Map<String,String>>> ownershipVerification() {
        return Optional.ofNullable(this.ownershipVerification);
    }

    @Import(name="ownershipVerificationHttp")
    private @Nullable Output<Map<String,String>> ownershipVerificationHttp;

    public Optional<Output<Map<String,String>>> ownershipVerificationHttp() {
        return Optional.ofNullable(this.ownershipVerificationHttp);
    }

    /**
     * SSL configuration of the certificate.
     * 
     */
    @Import(name="ssls")
    private @Nullable Output<List<CustomHostnameSslArgs>> ssls;

    /**
     * @return SSL configuration of the certificate.
     * 
     */
    public Optional<Output<List<CustomHostnameSslArgs>>> ssls() {
        return Optional.ofNullable(this.ssls);
    }

    /**
     * Status of the certificate.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the certificate.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The zone identifier to target for the resource.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private CustomHostnameState() {}

    private CustomHostnameState(CustomHostnameState $) {
        this.customOriginServer = $.customOriginServer;
        this.customOriginSni = $.customOriginSni;
        this.hostname = $.hostname;
        this.ownershipVerification = $.ownershipVerification;
        this.ownershipVerificationHttp = $.ownershipVerificationHttp;
        this.ssls = $.ssls;
        this.status = $.status;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomHostnameState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomHostnameState $;

        public Builder() {
            $ = new CustomHostnameState();
        }

        public Builder(CustomHostnameState defaults) {
            $ = new CustomHostnameState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customOriginServer The custom origin server used for certificates.
         * 
         * @return builder
         * 
         */
        public Builder customOriginServer(@Nullable Output<String> customOriginServer) {
            $.customOriginServer = customOriginServer;
            return this;
        }

        /**
         * @param customOriginServer The custom origin server used for certificates.
         * 
         * @return builder
         * 
         */
        public Builder customOriginServer(String customOriginServer) {
            return customOriginServer(Output.of(customOriginServer));
        }

        /**
         * @param customOriginSni The [custom origin SNI](https://developers.cloudflare.com/ssl/ssl-for-saas/hostname-specific-behavior/custom-origin) used for certificates.
         * 
         * @return builder
         * 
         */
        public Builder customOriginSni(@Nullable Output<String> customOriginSni) {
            $.customOriginSni = customOriginSni;
            return this;
        }

        /**
         * @param customOriginSni The [custom origin SNI](https://developers.cloudflare.com/ssl/ssl-for-saas/hostname-specific-behavior/custom-origin) used for certificates.
         * 
         * @return builder
         * 
         */
        public Builder customOriginSni(String customOriginSni) {
            return customOriginSni(Output.of(customOriginSni));
        }

        /**
         * @param hostname Hostname you intend to request a certificate for.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Hostname you intend to request a certificate for.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        public Builder ownershipVerification(@Nullable Output<Map<String,String>> ownershipVerification) {
            $.ownershipVerification = ownershipVerification;
            return this;
        }

        public Builder ownershipVerification(Map<String,String> ownershipVerification) {
            return ownershipVerification(Output.of(ownershipVerification));
        }

        public Builder ownershipVerificationHttp(@Nullable Output<Map<String,String>> ownershipVerificationHttp) {
            $.ownershipVerificationHttp = ownershipVerificationHttp;
            return this;
        }

        public Builder ownershipVerificationHttp(Map<String,String> ownershipVerificationHttp) {
            return ownershipVerificationHttp(Output.of(ownershipVerificationHttp));
        }

        /**
         * @param ssls SSL configuration of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder ssls(@Nullable Output<List<CustomHostnameSslArgs>> ssls) {
            $.ssls = ssls;
            return this;
        }

        /**
         * @param ssls SSL configuration of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder ssls(List<CustomHostnameSslArgs> ssls) {
            return ssls(Output.of(ssls));
        }

        /**
         * @param ssls SSL configuration of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder ssls(CustomHostnameSslArgs... ssls) {
            return ssls(List.of(ssls));
        }

        /**
         * @param status Status of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param zoneId The zone identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public CustomHostnameState build() {
            return $;
        }
    }

}
