// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.CustomHostnameOwnershipVerificationArgs;
import com.pulumi.cloudflare.inputs.CustomHostnameOwnershipVerificationHttpArgs;
import com.pulumi.cloudflare.inputs.CustomHostnameSslArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomHostnameState extends com.pulumi.resources.ResourceArgs {

    public static final CustomHostnameState Empty = new CustomHostnameState();

    /**
     * This is the time the hostname was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return This is the time the hostname was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
     * 
     */
    @Import(name="customMetadata")
    private @Nullable Output<Map<String,String>> customMetadata;

    /**
     * @return Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
     * 
     */
    public Optional<Output<Map<String,String>>> customMetadata() {
        return Optional.ofNullable(this.customMetadata);
    }

    /**
     * a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
     * 
     */
    @Import(name="customOriginServer")
    private @Nullable Output<String> customOriginServer;

    /**
     * @return a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
     * 
     */
    public Optional<Output<String>> customOriginServer() {
        return Optional.ofNullable(this.customOriginServer);
    }

    /**
     * A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
     * 
     */
    @Import(name="customOriginSni")
    private @Nullable Output<String> customOriginSni;

    /**
     * @return A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
     * 
     */
    public Optional<Output<String>> customOriginSni() {
        return Optional.ofNullable(this.customOriginSni);
    }

    /**
     * The custom hostname that will point to your hostname via CNAME.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The custom hostname that will point to your hostname via CNAME.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * This is a record which can be placed to activate a hostname.
     * 
     */
    @Import(name="ownershipVerification")
    private @Nullable Output<CustomHostnameOwnershipVerificationArgs> ownershipVerification;

    /**
     * @return This is a record which can be placed to activate a hostname.
     * 
     */
    public Optional<Output<CustomHostnameOwnershipVerificationArgs>> ownershipVerification() {
        return Optional.ofNullable(this.ownershipVerification);
    }

    /**
     * This presents the token to be served by the given http url to activate a hostname.
     * 
     */
    @Import(name="ownershipVerificationHttp")
    private @Nullable Output<CustomHostnameOwnershipVerificationHttpArgs> ownershipVerificationHttp;

    /**
     * @return This presents the token to be served by the given http url to activate a hostname.
     * 
     */
    public Optional<Output<CustomHostnameOwnershipVerificationHttpArgs>> ownershipVerificationHttp() {
        return Optional.ofNullable(this.ownershipVerificationHttp);
    }

    /**
     * SSL properties used when creating the custom hostname.
     * 
     */
    @Import(name="ssl")
    private @Nullable Output<CustomHostnameSslArgs> ssl;

    /**
     * @return SSL properties used when creating the custom hostname.
     * 
     */
    public Optional<Output<CustomHostnameSslArgs>> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    /**
     * Status of the hostname&#39;s activation.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the hostname&#39;s activation.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * These are errors that were encountered while trying to activate a hostname.
     * 
     */
    @Import(name="verificationErrors")
    private @Nullable Output<List<String>> verificationErrors;

    /**
     * @return These are errors that were encountered while trying to activate a hostname.
     * 
     */
    public Optional<Output<List<String>>> verificationErrors() {
        return Optional.ofNullable(this.verificationErrors);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private CustomHostnameState() {}

    private CustomHostnameState(CustomHostnameState $) {
        this.createdAt = $.createdAt;
        this.customMetadata = $.customMetadata;
        this.customOriginServer = $.customOriginServer;
        this.customOriginSni = $.customOriginSni;
        this.hostname = $.hostname;
        this.ownershipVerification = $.ownershipVerification;
        this.ownershipVerificationHttp = $.ownershipVerificationHttp;
        this.ssl = $.ssl;
        this.status = $.status;
        this.verificationErrors = $.verificationErrors;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomHostnameState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomHostnameState $;

        public Builder() {
            $ = new CustomHostnameState();
        }

        public Builder(CustomHostnameState defaults) {
            $ = new CustomHostnameState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt This is the time the hostname was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt This is the time the hostname was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param customMetadata Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
         * 
         * @return builder
         * 
         */
        public Builder customMetadata(@Nullable Output<Map<String,String>> customMetadata) {
            $.customMetadata = customMetadata;
            return this;
        }

        /**
         * @param customMetadata Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
         * 
         * @return builder
         * 
         */
        public Builder customMetadata(Map<String,String> customMetadata) {
            return customMetadata(Output.of(customMetadata));
        }

        /**
         * @param customOriginServer a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
         * 
         * @return builder
         * 
         */
        public Builder customOriginServer(@Nullable Output<String> customOriginServer) {
            $.customOriginServer = customOriginServer;
            return this;
        }

        /**
         * @param customOriginServer a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
         * 
         * @return builder
         * 
         */
        public Builder customOriginServer(String customOriginServer) {
            return customOriginServer(Output.of(customOriginServer));
        }

        /**
         * @param customOriginSni A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
         * 
         * @return builder
         * 
         */
        public Builder customOriginSni(@Nullable Output<String> customOriginSni) {
            $.customOriginSni = customOriginSni;
            return this;
        }

        /**
         * @param customOriginSni A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
         * 
         * @return builder
         * 
         */
        public Builder customOriginSni(String customOriginSni) {
            return customOriginSni(Output.of(customOriginSni));
        }

        /**
         * @param hostname The custom hostname that will point to your hostname via CNAME.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The custom hostname that will point to your hostname via CNAME.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param ownershipVerification This is a record which can be placed to activate a hostname.
         * 
         * @return builder
         * 
         */
        public Builder ownershipVerification(@Nullable Output<CustomHostnameOwnershipVerificationArgs> ownershipVerification) {
            $.ownershipVerification = ownershipVerification;
            return this;
        }

        /**
         * @param ownershipVerification This is a record which can be placed to activate a hostname.
         * 
         * @return builder
         * 
         */
        public Builder ownershipVerification(CustomHostnameOwnershipVerificationArgs ownershipVerification) {
            return ownershipVerification(Output.of(ownershipVerification));
        }

        /**
         * @param ownershipVerificationHttp This presents the token to be served by the given http url to activate a hostname.
         * 
         * @return builder
         * 
         */
        public Builder ownershipVerificationHttp(@Nullable Output<CustomHostnameOwnershipVerificationHttpArgs> ownershipVerificationHttp) {
            $.ownershipVerificationHttp = ownershipVerificationHttp;
            return this;
        }

        /**
         * @param ownershipVerificationHttp This presents the token to be served by the given http url to activate a hostname.
         * 
         * @return builder
         * 
         */
        public Builder ownershipVerificationHttp(CustomHostnameOwnershipVerificationHttpArgs ownershipVerificationHttp) {
            return ownershipVerificationHttp(Output.of(ownershipVerificationHttp));
        }

        /**
         * @param ssl SSL properties used when creating the custom hostname.
         * 
         * @return builder
         * 
         */
        public Builder ssl(@Nullable Output<CustomHostnameSslArgs> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl SSL properties used when creating the custom hostname.
         * 
         * @return builder
         * 
         */
        public Builder ssl(CustomHostnameSslArgs ssl) {
            return ssl(Output.of(ssl));
        }

        /**
         * @param status Status of the hostname&#39;s activation.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the hostname&#39;s activation.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param verificationErrors These are errors that were encountered while trying to activate a hostname.
         * 
         * @return builder
         * 
         */
        public Builder verificationErrors(@Nullable Output<List<String>> verificationErrors) {
            $.verificationErrors = verificationErrors;
            return this;
        }

        /**
         * @param verificationErrors These are errors that were encountered while trying to activate a hostname.
         * 
         * @return builder
         * 
         */
        public Builder verificationErrors(List<String> verificationErrors) {
            return verificationErrors(Output.of(verificationErrors));
        }

        /**
         * @param verificationErrors These are errors that were encountered while trying to activate a hostname.
         * 
         * @return builder
         * 
         */
        public Builder verificationErrors(String... verificationErrors) {
            return verificationErrors(List.of(verificationErrors));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public CustomHostnameState build() {
            return $;
        }
    }

}
