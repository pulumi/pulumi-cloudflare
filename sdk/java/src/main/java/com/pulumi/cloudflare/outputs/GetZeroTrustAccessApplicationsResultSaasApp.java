// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultSaasAppCustomAttribute;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultSaasAppCustomClaim;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultSaasAppHybridAndImplicitOptions;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultSaasAppRefreshTokenOptions;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetZeroTrustAccessApplicationsResultSaasApp {
    /**
     * @return The lifetime of the OIDC Access Token after creation. Valid units are m,h. Must be greater than or equal to 1m and less than or equal to 24h.
     * 
     */
    private String accessTokenLifetime;
    /**
     * @return If client secret should be required on the token endpoint when authorization*code*with_pkce grant is used.
     * 
     */
    private Boolean allowPkceWithoutClientSecret;
    /**
     * @return The URL where this applications tile redirects users
     * 
     */
    private String appLauncherUrl;
    /**
     * @return Optional identifier indicating the authentication protocol used for the saas app. Required for OIDC. Default if unset is &#34;saml&#34;
     * Available values: &#34;saml&#34;, &#34;oidc&#34;.
     * 
     */
    private String authType;
    /**
     * @return The application client id
     * 
     */
    private String clientId;
    /**
     * @return The application client secret, only returned on POST request.
     * 
     */
    private String clientSecret;
    /**
     * @return The service provider&#39;s endpoint that is responsible for receiving and parsing a SAML assertion.
     * 
     */
    private String consumerServiceUrl;
    private String createdAt;
    private List<GetZeroTrustAccessApplicationsResultSaasAppCustomAttribute> customAttributes;
    private List<GetZeroTrustAccessApplicationsResultSaasAppCustomClaim> customClaims;
    /**
     * @return The URL that the user will be redirected to after a successful login for IDP initiated logins.
     * 
     */
    private String defaultRelayState;
    /**
     * @return The OIDC flows supported by this application
     * 
     */
    private List<String> grantTypes;
    /**
     * @return A regex to filter Cloudflare groups returned in ID token and userinfo endpoint
     * 
     */
    private String groupFilterRegex;
    private GetZeroTrustAccessApplicationsResultSaasAppHybridAndImplicitOptions hybridAndImplicitOptions;
    /**
     * @return The unique identifier for your SaaS application.
     * 
     */
    private String idpEntityId;
    /**
     * @return The format of the name identifier sent to the SaaS application.
     * Available values: &#34;id&#34;, &#34;email&#34;.
     * 
     */
    private String nameIdFormat;
    /**
     * @return A [JSONata](https://jsonata.org/) expression that transforms an application&#39;s user identities into a NameID value for its SAML assertion. This expression should evaluate to a singular string. The output of this expression can override the `name_id_format` setting.
     * 
     */
    private String nameIdTransformJsonata;
    /**
     * @return The Access public certificate that will be used to verify your identity.
     * 
     */
    private String publicKey;
    /**
     * @return The permitted URL&#39;s for Cloudflare to return Authorization codes and Access/ID tokens
     * 
     */
    private List<String> redirectUris;
    private GetZeroTrustAccessApplicationsResultSaasAppRefreshTokenOptions refreshTokenOptions;
    /**
     * @return A [JSONata](https://jsonata.org/) expression that transforms an application&#39;s user identities into attribute assertions in the SAML response. The expression can transform id, email, name, and groups values. It can also transform fields listed in the saml*attributes or oidc*fields of the identity provider used to authenticate. The output of this expression must be a JSON object.
     * 
     */
    private String samlAttributeTransformJsonata;
    /**
     * @return Define the user information shared with access, &#34;offline_access&#34; scope will be automatically enabled if refresh tokens are enabled
     * 
     */
    private List<String> scopes;
    /**
     * @return A globally unique name for an identity or service provider.
     * 
     */
    private String spEntityId;
    /**
     * @return The endpoint where your SaaS application will send login requests.
     * 
     */
    private String ssoEndpoint;
    private String updatedAt;

    private GetZeroTrustAccessApplicationsResultSaasApp() {}
    /**
     * @return The lifetime of the OIDC Access Token after creation. Valid units are m,h. Must be greater than or equal to 1m and less than or equal to 24h.
     * 
     */
    public String accessTokenLifetime() {
        return this.accessTokenLifetime;
    }
    /**
     * @return If client secret should be required on the token endpoint when authorization*code*with_pkce grant is used.
     * 
     */
    public Boolean allowPkceWithoutClientSecret() {
        return this.allowPkceWithoutClientSecret;
    }
    /**
     * @return The URL where this applications tile redirects users
     * 
     */
    public String appLauncherUrl() {
        return this.appLauncherUrl;
    }
    /**
     * @return Optional identifier indicating the authentication protocol used for the saas app. Required for OIDC. Default if unset is &#34;saml&#34;
     * Available values: &#34;saml&#34;, &#34;oidc&#34;.
     * 
     */
    public String authType() {
        return this.authType;
    }
    /**
     * @return The application client id
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The application client secret, only returned on POST request.
     * 
     */
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return The service provider&#39;s endpoint that is responsible for receiving and parsing a SAML assertion.
     * 
     */
    public String consumerServiceUrl() {
        return this.consumerServiceUrl;
    }
    public String createdAt() {
        return this.createdAt;
    }
    public List<GetZeroTrustAccessApplicationsResultSaasAppCustomAttribute> customAttributes() {
        return this.customAttributes;
    }
    public List<GetZeroTrustAccessApplicationsResultSaasAppCustomClaim> customClaims() {
        return this.customClaims;
    }
    /**
     * @return The URL that the user will be redirected to after a successful login for IDP initiated logins.
     * 
     */
    public String defaultRelayState() {
        return this.defaultRelayState;
    }
    /**
     * @return The OIDC flows supported by this application
     * 
     */
    public List<String> grantTypes() {
        return this.grantTypes;
    }
    /**
     * @return A regex to filter Cloudflare groups returned in ID token and userinfo endpoint
     * 
     */
    public String groupFilterRegex() {
        return this.groupFilterRegex;
    }
    public GetZeroTrustAccessApplicationsResultSaasAppHybridAndImplicitOptions hybridAndImplicitOptions() {
        return this.hybridAndImplicitOptions;
    }
    /**
     * @return The unique identifier for your SaaS application.
     * 
     */
    public String idpEntityId() {
        return this.idpEntityId;
    }
    /**
     * @return The format of the name identifier sent to the SaaS application.
     * Available values: &#34;id&#34;, &#34;email&#34;.
     * 
     */
    public String nameIdFormat() {
        return this.nameIdFormat;
    }
    /**
     * @return A [JSONata](https://jsonata.org/) expression that transforms an application&#39;s user identities into a NameID value for its SAML assertion. This expression should evaluate to a singular string. The output of this expression can override the `name_id_format` setting.
     * 
     */
    public String nameIdTransformJsonata() {
        return this.nameIdTransformJsonata;
    }
    /**
     * @return The Access public certificate that will be used to verify your identity.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return The permitted URL&#39;s for Cloudflare to return Authorization codes and Access/ID tokens
     * 
     */
    public List<String> redirectUris() {
        return this.redirectUris;
    }
    public GetZeroTrustAccessApplicationsResultSaasAppRefreshTokenOptions refreshTokenOptions() {
        return this.refreshTokenOptions;
    }
    /**
     * @return A [JSONata](https://jsonata.org/) expression that transforms an application&#39;s user identities into attribute assertions in the SAML response. The expression can transform id, email, name, and groups values. It can also transform fields listed in the saml*attributes or oidc*fields of the identity provider used to authenticate. The output of this expression must be a JSON object.
     * 
     */
    public String samlAttributeTransformJsonata() {
        return this.samlAttributeTransformJsonata;
    }
    /**
     * @return Define the user information shared with access, &#34;offline_access&#34; scope will be automatically enabled if refresh tokens are enabled
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return A globally unique name for an identity or service provider.
     * 
     */
    public String spEntityId() {
        return this.spEntityId;
    }
    /**
     * @return The endpoint where your SaaS application will send login requests.
     * 
     */
    public String ssoEndpoint() {
        return this.ssoEndpoint;
    }
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustAccessApplicationsResultSaasApp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessTokenLifetime;
        private Boolean allowPkceWithoutClientSecret;
        private String appLauncherUrl;
        private String authType;
        private String clientId;
        private String clientSecret;
        private String consumerServiceUrl;
        private String createdAt;
        private List<GetZeroTrustAccessApplicationsResultSaasAppCustomAttribute> customAttributes;
        private List<GetZeroTrustAccessApplicationsResultSaasAppCustomClaim> customClaims;
        private String defaultRelayState;
        private List<String> grantTypes;
        private String groupFilterRegex;
        private GetZeroTrustAccessApplicationsResultSaasAppHybridAndImplicitOptions hybridAndImplicitOptions;
        private String idpEntityId;
        private String nameIdFormat;
        private String nameIdTransformJsonata;
        private String publicKey;
        private List<String> redirectUris;
        private GetZeroTrustAccessApplicationsResultSaasAppRefreshTokenOptions refreshTokenOptions;
        private String samlAttributeTransformJsonata;
        private List<String> scopes;
        private String spEntityId;
        private String ssoEndpoint;
        private String updatedAt;
        public Builder() {}
        public Builder(GetZeroTrustAccessApplicationsResultSaasApp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTokenLifetime = defaults.accessTokenLifetime;
    	      this.allowPkceWithoutClientSecret = defaults.allowPkceWithoutClientSecret;
    	      this.appLauncherUrl = defaults.appLauncherUrl;
    	      this.authType = defaults.authType;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.consumerServiceUrl = defaults.consumerServiceUrl;
    	      this.createdAt = defaults.createdAt;
    	      this.customAttributes = defaults.customAttributes;
    	      this.customClaims = defaults.customClaims;
    	      this.defaultRelayState = defaults.defaultRelayState;
    	      this.grantTypes = defaults.grantTypes;
    	      this.groupFilterRegex = defaults.groupFilterRegex;
    	      this.hybridAndImplicitOptions = defaults.hybridAndImplicitOptions;
    	      this.idpEntityId = defaults.idpEntityId;
    	      this.nameIdFormat = defaults.nameIdFormat;
    	      this.nameIdTransformJsonata = defaults.nameIdTransformJsonata;
    	      this.publicKey = defaults.publicKey;
    	      this.redirectUris = defaults.redirectUris;
    	      this.refreshTokenOptions = defaults.refreshTokenOptions;
    	      this.samlAttributeTransformJsonata = defaults.samlAttributeTransformJsonata;
    	      this.scopes = defaults.scopes;
    	      this.spEntityId = defaults.spEntityId;
    	      this.ssoEndpoint = defaults.ssoEndpoint;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder accessTokenLifetime(String accessTokenLifetime) {
            if (accessTokenLifetime == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "accessTokenLifetime");
            }
            this.accessTokenLifetime = accessTokenLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder allowPkceWithoutClientSecret(Boolean allowPkceWithoutClientSecret) {
            if (allowPkceWithoutClientSecret == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "allowPkceWithoutClientSecret");
            }
            this.allowPkceWithoutClientSecret = allowPkceWithoutClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder appLauncherUrl(String appLauncherUrl) {
            if (appLauncherUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "appLauncherUrl");
            }
            this.appLauncherUrl = appLauncherUrl;
            return this;
        }
        @CustomType.Setter
        public Builder authType(String authType) {
            if (authType == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "authType");
            }
            this.authType = authType;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            if (clientSecret == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "clientSecret");
            }
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder consumerServiceUrl(String consumerServiceUrl) {
            if (consumerServiceUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "consumerServiceUrl");
            }
            this.consumerServiceUrl = consumerServiceUrl;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder customAttributes(List<GetZeroTrustAccessApplicationsResultSaasAppCustomAttribute> customAttributes) {
            if (customAttributes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "customAttributes");
            }
            this.customAttributes = customAttributes;
            return this;
        }
        public Builder customAttributes(GetZeroTrustAccessApplicationsResultSaasAppCustomAttribute... customAttributes) {
            return customAttributes(List.of(customAttributes));
        }
        @CustomType.Setter
        public Builder customClaims(List<GetZeroTrustAccessApplicationsResultSaasAppCustomClaim> customClaims) {
            if (customClaims == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "customClaims");
            }
            this.customClaims = customClaims;
            return this;
        }
        public Builder customClaims(GetZeroTrustAccessApplicationsResultSaasAppCustomClaim... customClaims) {
            return customClaims(List.of(customClaims));
        }
        @CustomType.Setter
        public Builder defaultRelayState(String defaultRelayState) {
            if (defaultRelayState == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "defaultRelayState");
            }
            this.defaultRelayState = defaultRelayState;
            return this;
        }
        @CustomType.Setter
        public Builder grantTypes(List<String> grantTypes) {
            if (grantTypes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "grantTypes");
            }
            this.grantTypes = grantTypes;
            return this;
        }
        public Builder grantTypes(String... grantTypes) {
            return grantTypes(List.of(grantTypes));
        }
        @CustomType.Setter
        public Builder groupFilterRegex(String groupFilterRegex) {
            if (groupFilterRegex == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "groupFilterRegex");
            }
            this.groupFilterRegex = groupFilterRegex;
            return this;
        }
        @CustomType.Setter
        public Builder hybridAndImplicitOptions(GetZeroTrustAccessApplicationsResultSaasAppHybridAndImplicitOptions hybridAndImplicitOptions) {
            if (hybridAndImplicitOptions == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "hybridAndImplicitOptions");
            }
            this.hybridAndImplicitOptions = hybridAndImplicitOptions;
            return this;
        }
        @CustomType.Setter
        public Builder idpEntityId(String idpEntityId) {
            if (idpEntityId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "idpEntityId");
            }
            this.idpEntityId = idpEntityId;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdFormat(String nameIdFormat) {
            if (nameIdFormat == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "nameIdFormat");
            }
            this.nameIdFormat = nameIdFormat;
            return this;
        }
        @CustomType.Setter
        public Builder nameIdTransformJsonata(String nameIdTransformJsonata) {
            if (nameIdTransformJsonata == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "nameIdTransformJsonata");
            }
            this.nameIdTransformJsonata = nameIdTransformJsonata;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUris(List<String> redirectUris) {
            if (redirectUris == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "redirectUris");
            }
            this.redirectUris = redirectUris;
            return this;
        }
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }
        @CustomType.Setter
        public Builder refreshTokenOptions(GetZeroTrustAccessApplicationsResultSaasAppRefreshTokenOptions refreshTokenOptions) {
            if (refreshTokenOptions == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "refreshTokenOptions");
            }
            this.refreshTokenOptions = refreshTokenOptions;
            return this;
        }
        @CustomType.Setter
        public Builder samlAttributeTransformJsonata(String samlAttributeTransformJsonata) {
            if (samlAttributeTransformJsonata == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "samlAttributeTransformJsonata");
            }
            this.samlAttributeTransformJsonata = samlAttributeTransformJsonata;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder spEntityId(String spEntityId) {
            if (spEntityId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "spEntityId");
            }
            this.spEntityId = spEntityId;
            return this;
        }
        @CustomType.Setter
        public Builder ssoEndpoint(String ssoEndpoint) {
            if (ssoEndpoint == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "ssoEndpoint");
            }
            this.ssoEndpoint = ssoEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultSaasApp", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetZeroTrustAccessApplicationsResultSaasApp build() {
            final var _resultValue = new GetZeroTrustAccessApplicationsResultSaasApp();
            _resultValue.accessTokenLifetime = accessTokenLifetime;
            _resultValue.allowPkceWithoutClientSecret = allowPkceWithoutClientSecret;
            _resultValue.appLauncherUrl = appLauncherUrl;
            _resultValue.authType = authType;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.consumerServiceUrl = consumerServiceUrl;
            _resultValue.createdAt = createdAt;
            _resultValue.customAttributes = customAttributes;
            _resultValue.customClaims = customClaims;
            _resultValue.defaultRelayState = defaultRelayState;
            _resultValue.grantTypes = grantTypes;
            _resultValue.groupFilterRegex = groupFilterRegex;
            _resultValue.hybridAndImplicitOptions = hybridAndImplicitOptions;
            _resultValue.idpEntityId = idpEntityId;
            _resultValue.nameIdFormat = nameIdFormat;
            _resultValue.nameIdTransformJsonata = nameIdTransformJsonata;
            _resultValue.publicKey = publicKey;
            _resultValue.redirectUris = redirectUris;
            _resultValue.refreshTokenOptions = refreshTokenOptions;
            _resultValue.samlAttributeTransformJsonata = samlAttributeTransformJsonata;
            _resultValue.scopes = scopes;
            _resultValue.spEntityId = spEntityId;
            _resultValue.ssoEndpoint = ssoEndpoint;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
