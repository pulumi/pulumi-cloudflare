// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class DnsZoneTransfersOutgoingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsZoneTransfersOutgoingArgs Empty = new DnsZoneTransfersOutgoingArgs();

    /**
     * Zone name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Zone name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A list of peer tags.
     * 
     */
    @Import(name="peers", required=true)
    private Output<List<String>> peers;

    /**
     * @return A list of peer tags.
     * 
     */
    public Output<List<String>> peers() {
        return this.peers;
    }

    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    public Output<String> zoneId() {
        return this.zoneId;
    }

    private DnsZoneTransfersOutgoingArgs() {}

    private DnsZoneTransfersOutgoingArgs(DnsZoneTransfersOutgoingArgs $) {
        this.name = $.name;
        this.peers = $.peers;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsZoneTransfersOutgoingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsZoneTransfersOutgoingArgs $;

        public Builder() {
            $ = new DnsZoneTransfersOutgoingArgs();
        }

        public Builder(DnsZoneTransfersOutgoingArgs defaults) {
            $ = new DnsZoneTransfersOutgoingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Zone name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Zone name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param peers A list of peer tags.
         * 
         * @return builder
         * 
         */
        public Builder peers(Output<List<String>> peers) {
            $.peers = peers;
            return this;
        }

        /**
         * @param peers A list of peer tags.
         * 
         * @return builder
         * 
         */
        public Builder peers(List<String> peers) {
            return peers(Output.of(peers));
        }

        /**
         * @param peers A list of peer tags.
         * 
         * @return builder
         * 
         */
        public Builder peers(String... peers) {
            return peers(List.of(peers));
        }

        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public DnsZoneTransfersOutgoingArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DnsZoneTransfersOutgoingArgs", "name");
            }
            if ($.peers == null) {
                throw new MissingRequiredPropertyException("DnsZoneTransfersOutgoingArgs", "peers");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("DnsZoneTransfersOutgoingArgs", "zoneId");
            }
            return $;
        }
    }

}
