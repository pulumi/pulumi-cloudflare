// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class GetDnsRecordsResultSettings {
    /**
     * @return If enabled, causes the CNAME record to be resolved externally and the resulting address records (e.g., A and AAAA) to be returned instead of the CNAME record itself. This setting is unavailable for proxied records, since they are always flattened.
     * 
     */
    private Boolean flattenCname;
    /**
     * @return When enabled, only A records will be generated, and AAAA records will not be created. This setting is intended for exceptional cases. Note that this option only applies to proxied records and it has no effect on whether Cloudflare communicates with the origin using IPv4 or IPv6.
     * 
     */
    private Boolean ipv4Only;
    /**
     * @return When enabled, only AAAA records will be generated, and A records will not be created. This setting is intended for exceptional cases. Note that this option only applies to proxied records and it has no effect on whether Cloudflare communicates with the origin using IPv4 or IPv6.
     * 
     */
    private Boolean ipv6Only;

    private GetDnsRecordsResultSettings() {}
    /**
     * @return If enabled, causes the CNAME record to be resolved externally and the resulting address records (e.g., A and AAAA) to be returned instead of the CNAME record itself. This setting is unavailable for proxied records, since they are always flattened.
     * 
     */
    public Boolean flattenCname() {
        return this.flattenCname;
    }
    /**
     * @return When enabled, only A records will be generated, and AAAA records will not be created. This setting is intended for exceptional cases. Note that this option only applies to proxied records and it has no effect on whether Cloudflare communicates with the origin using IPv4 or IPv6.
     * 
     */
    public Boolean ipv4Only() {
        return this.ipv4Only;
    }
    /**
     * @return When enabled, only AAAA records will be generated, and A records will not be created. This setting is intended for exceptional cases. Note that this option only applies to proxied records and it has no effect on whether Cloudflare communicates with the origin using IPv4 or IPv6.
     * 
     */
    public Boolean ipv6Only() {
        return this.ipv6Only;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDnsRecordsResultSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean flattenCname;
        private Boolean ipv4Only;
        private Boolean ipv6Only;
        public Builder() {}
        public Builder(GetDnsRecordsResultSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.flattenCname = defaults.flattenCname;
    	      this.ipv4Only = defaults.ipv4Only;
    	      this.ipv6Only = defaults.ipv6Only;
        }

        @CustomType.Setter
        public Builder flattenCname(Boolean flattenCname) {
            if (flattenCname == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultSettings", "flattenCname");
            }
            this.flattenCname = flattenCname;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Only(Boolean ipv4Only) {
            if (ipv4Only == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultSettings", "ipv4Only");
            }
            this.ipv4Only = ipv4Only;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Only(Boolean ipv6Only) {
            if (ipv6Only == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultSettings", "ipv6Only");
            }
            this.ipv6Only = ipv6Only;
            return this;
        }
        public GetDnsRecordsResultSettings build() {
            final var _resultValue = new GetDnsRecordsResultSettings();
            _resultValue.flattenCname = flattenCname;
            _resultValue.ipv4Only = ipv4Only;
            _resultValue.ipv6Only = ipv6Only;
            return _resultValue;
        }
    }
}
