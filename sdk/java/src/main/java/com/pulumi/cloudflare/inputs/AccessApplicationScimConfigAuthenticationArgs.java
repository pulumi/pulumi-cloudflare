// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessApplicationScimConfigAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessApplicationScimConfigAuthenticationArgs Empty = new AccessApplicationScimConfigAuthenticationArgs();

    /**
     * URL used to generate the auth code used during token generation.
     * 
     */
    @Import(name="authorizationUrl")
    private @Nullable Output<String> authorizationUrl;

    /**
     * @return URL used to generate the auth code used during token generation.
     * 
     */
    public Optional<Output<String>> authorizationUrl() {
        return Optional.ofNullable(this.authorizationUrl);
    }

    /**
     * Client ID used to authenticate when generating a token for authenticating with the remote SCIM service.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return Client ID used to authenticate when generating a token for authenticating with the remote SCIM service.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Secret used to authenticate when generating a token for authenticating with the remove SCIM service.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return Secret used to authenticate when generating a token for authenticating with the remove SCIM service.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * The password used to authenticate with the remote SCIM service.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password used to authenticate with the remote SCIM service.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The authentication scheme to use. For OAuth 2 authentication, this value should be `oauth2`
     * 
     */
    @Import(name="scheme", required=true)
    private Output<String> scheme;

    /**
     * @return The authentication scheme to use. For OAuth 2 authentication, this value should be `oauth2`
     * 
     */
    public Output<String> scheme() {
        return this.scheme;
    }

    /**
     * The authorization scopes to request when generating the token used to authenticate with the remove SCIM service.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return The authorization scopes to request when generating the token used to authenticate with the remove SCIM service.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The token used to authenticate with the remote SCIM service.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The token used to authenticate with the remote SCIM service.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * URL used to generate the token used to authenticate with the remote SCIM service.
     * 
     */
    @Import(name="tokenUrl")
    private @Nullable Output<String> tokenUrl;

    /**
     * @return URL used to generate the token used to authenticate with the remote SCIM service.
     * 
     */
    public Optional<Output<String>> tokenUrl() {
        return Optional.ofNullable(this.tokenUrl);
    }

    /**
     * The username used to authenticate with the remote SCIM service.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The username used to authenticate with the remote SCIM service.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private AccessApplicationScimConfigAuthenticationArgs() {}

    private AccessApplicationScimConfigAuthenticationArgs(AccessApplicationScimConfigAuthenticationArgs $) {
        this.authorizationUrl = $.authorizationUrl;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.password = $.password;
        this.scheme = $.scheme;
        this.scopes = $.scopes;
        this.token = $.token;
        this.tokenUrl = $.tokenUrl;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessApplicationScimConfigAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessApplicationScimConfigAuthenticationArgs $;

        public Builder() {
            $ = new AccessApplicationScimConfigAuthenticationArgs();
        }

        public Builder(AccessApplicationScimConfigAuthenticationArgs defaults) {
            $ = new AccessApplicationScimConfigAuthenticationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationUrl URL used to generate the auth code used during token generation.
         * 
         * @return builder
         * 
         */
        public Builder authorizationUrl(@Nullable Output<String> authorizationUrl) {
            $.authorizationUrl = authorizationUrl;
            return this;
        }

        /**
         * @param authorizationUrl URL used to generate the auth code used during token generation.
         * 
         * @return builder
         * 
         */
        public Builder authorizationUrl(String authorizationUrl) {
            return authorizationUrl(Output.of(authorizationUrl));
        }

        /**
         * @param clientId Client ID used to authenticate when generating a token for authenticating with the remote SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Client ID used to authenticate when generating a token for authenticating with the remote SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret Secret used to authenticate when generating a token for authenticating with the remove SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret Secret used to authenticate when generating a token for authenticating with the remove SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param password The password used to authenticate with the remote SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password used to authenticate with the remote SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param scheme The authentication scheme to use. For OAuth 2 authentication, this value should be `oauth2`
         * 
         * @return builder
         * 
         */
        public Builder scheme(Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        /**
         * @param scheme The authentication scheme to use. For OAuth 2 authentication, this value should be `oauth2`
         * 
         * @return builder
         * 
         */
        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        /**
         * @param scopes The authorization scopes to request when generating the token used to authenticate with the remove SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes The authorization scopes to request when generating the token used to authenticate with the remove SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes The authorization scopes to request when generating the token used to authenticate with the remove SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param token The token used to authenticate with the remote SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The token used to authenticate with the remote SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param tokenUrl URL used to generate the token used to authenticate with the remote SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder tokenUrl(@Nullable Output<String> tokenUrl) {
            $.tokenUrl = tokenUrl;
            return this;
        }

        /**
         * @param tokenUrl URL used to generate the token used to authenticate with the remote SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder tokenUrl(String tokenUrl) {
            return tokenUrl(Output.of(tokenUrl));
        }

        /**
         * @param user The username used to authenticate with the remote SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The username used to authenticate with the remote SCIM service.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public AccessApplicationScimConfigAuthenticationArgs build() {
            if ($.scheme == null) {
                throw new MissingRequiredPropertyException("AccessApplicationScimConfigAuthenticationArgs", "scheme");
            }
            return $;
        }
    }

}
