// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ZeroTrustTunnelCloudflaredConnection {
    /**
     * @return UUID of the Cloudflare Tunnel connector.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return The cloudflared version used to establish this connection.
     * 
     */
    private @Nullable String clientVersion;
    /**
     * @return The Cloudflare data center used for this connection.
     * 
     */
    private @Nullable String coloName;
    /**
     * @return UUID of the Cloudflare Tunnel connection.
     * 
     */
    private @Nullable String id;
    /**
     * @return Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If `true`, the connection has disconnected but is still being tracked. If `false`, the connection is actively serving traffic.
     * 
     */
    private @Nullable Boolean isPendingReconnect;
    /**
     * @return Timestamp of when the connection was established.
     * 
     */
    private @Nullable String openedAt;
    /**
     * @return The public IP address of the host running cloudflared.
     * 
     */
    private @Nullable String originIp;
    /**
     * @return UUID of the Cloudflare Tunnel connection.
     * 
     */
    private @Nullable String uuid;

    private ZeroTrustTunnelCloudflaredConnection() {}
    /**
     * @return UUID of the Cloudflare Tunnel connector.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return The cloudflared version used to establish this connection.
     * 
     */
    public Optional<String> clientVersion() {
        return Optional.ofNullable(this.clientVersion);
    }
    /**
     * @return The Cloudflare data center used for this connection.
     * 
     */
    public Optional<String> coloName() {
        return Optional.ofNullable(this.coloName);
    }
    /**
     * @return UUID of the Cloudflare Tunnel connection.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If `true`, the connection has disconnected but is still being tracked. If `false`, the connection is actively serving traffic.
     * 
     */
    public Optional<Boolean> isPendingReconnect() {
        return Optional.ofNullable(this.isPendingReconnect);
    }
    /**
     * @return Timestamp of when the connection was established.
     * 
     */
    public Optional<String> openedAt() {
        return Optional.ofNullable(this.openedAt);
    }
    /**
     * @return The public IP address of the host running cloudflared.
     * 
     */
    public Optional<String> originIp() {
        return Optional.ofNullable(this.originIp);
    }
    /**
     * @return UUID of the Cloudflare Tunnel connection.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ZeroTrustTunnelCloudflaredConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clientId;
        private @Nullable String clientVersion;
        private @Nullable String coloName;
        private @Nullable String id;
        private @Nullable Boolean isPendingReconnect;
        private @Nullable String openedAt;
        private @Nullable String originIp;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(ZeroTrustTunnelCloudflaredConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.clientVersion = defaults.clientVersion;
    	      this.coloName = defaults.coloName;
    	      this.id = defaults.id;
    	      this.isPendingReconnect = defaults.isPendingReconnect;
    	      this.openedAt = defaults.openedAt;
    	      this.originIp = defaults.originIp;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {

            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientVersion(@Nullable String clientVersion) {

            this.clientVersion = clientVersion;
            return this;
        }
        @CustomType.Setter
        public Builder coloName(@Nullable String coloName) {

            this.coloName = coloName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isPendingReconnect(@Nullable Boolean isPendingReconnect) {

            this.isPendingReconnect = isPendingReconnect;
            return this;
        }
        @CustomType.Setter
        public Builder openedAt(@Nullable String openedAt) {

            this.openedAt = openedAt;
            return this;
        }
        @CustomType.Setter
        public Builder originIp(@Nullable String originIp) {

            this.originIp = originIp;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        public ZeroTrustTunnelCloudflaredConnection build() {
            final var _resultValue = new ZeroTrustTunnelCloudflaredConnection();
            _resultValue.clientId = clientId;
            _resultValue.clientVersion = clientVersion;
            _resultValue.coloName = coloName;
            _resultValue.id = id;
            _resultValue.isPendingReconnect = isPendingReconnect;
            _resultValue.openedAt = openedAt;
            _resultValue.originIp = originIp;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
