// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetZeroTrustTunnelWarpConnectorConnection {
    /**
     * @return UUID of the Cloudflare Tunnel connector.
     * 
     */
    private String clientId;
    /**
     * @return The cloudflared version used to establish this connection.
     * 
     */
    private String clientVersion;
    /**
     * @return The Cloudflare data center used for this connection.
     * 
     */
    private String coloName;
    /**
     * @return UUID of the Cloudflare Tunnel connection.
     * 
     */
    private String id;
    /**
     * @return Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If `true`, the connection has disconnected but is still being tracked. If `false`, the connection is actively serving traffic.
     * 
     */
    private Boolean isPendingReconnect;
    /**
     * @return Timestamp of when the connection was established.
     * 
     */
    private String openedAt;
    /**
     * @return The public IP address of the host running cloudflared.
     * 
     */
    private String originIp;
    /**
     * @return UUID of the Cloudflare Tunnel connection.
     * 
     */
    private String uuid;

    private GetZeroTrustTunnelWarpConnectorConnection() {}
    /**
     * @return UUID of the Cloudflare Tunnel connector.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The cloudflared version used to establish this connection.
     * 
     */
    public String clientVersion() {
        return this.clientVersion;
    }
    /**
     * @return The Cloudflare data center used for this connection.
     * 
     */
    public String coloName() {
        return this.coloName;
    }
    /**
     * @return UUID of the Cloudflare Tunnel connection.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If `true`, the connection has disconnected but is still being tracked. If `false`, the connection is actively serving traffic.
     * 
     */
    public Boolean isPendingReconnect() {
        return this.isPendingReconnect;
    }
    /**
     * @return Timestamp of when the connection was established.
     * 
     */
    public String openedAt() {
        return this.openedAt;
    }
    /**
     * @return The public IP address of the host running cloudflared.
     * 
     */
    public String originIp() {
        return this.originIp;
    }
    /**
     * @return UUID of the Cloudflare Tunnel connection.
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustTunnelWarpConnectorConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientId;
        private String clientVersion;
        private String coloName;
        private String id;
        private Boolean isPendingReconnect;
        private String openedAt;
        private String originIp;
        private String uuid;
        public Builder() {}
        public Builder(GetZeroTrustTunnelWarpConnectorConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.clientVersion = defaults.clientVersion;
    	      this.coloName = defaults.coloName;
    	      this.id = defaults.id;
    	      this.isPendingReconnect = defaults.isPendingReconnect;
    	      this.openedAt = defaults.openedAt;
    	      this.originIp = defaults.originIp;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorConnection", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientVersion(String clientVersion) {
            if (clientVersion == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorConnection", "clientVersion");
            }
            this.clientVersion = clientVersion;
            return this;
        }
        @CustomType.Setter
        public Builder coloName(String coloName) {
            if (coloName == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorConnection", "coloName");
            }
            this.coloName = coloName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorConnection", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isPendingReconnect(Boolean isPendingReconnect) {
            if (isPendingReconnect == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorConnection", "isPendingReconnect");
            }
            this.isPendingReconnect = isPendingReconnect;
            return this;
        }
        @CustomType.Setter
        public Builder openedAt(String openedAt) {
            if (openedAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorConnection", "openedAt");
            }
            this.openedAt = openedAt;
            return this;
        }
        @CustomType.Setter
        public Builder originIp(String originIp) {
            if (originIp == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorConnection", "originIp");
            }
            this.originIp = originIp;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorConnection", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        public GetZeroTrustTunnelWarpConnectorConnection build() {
            final var _resultValue = new GetZeroTrustTunnelWarpConnectorConnection();
            _resultValue.clientId = clientId;
            _resultValue.clientVersion = clientVersion;
            _resultValue.coloName = coloName;
            _resultValue.id = id;
            _resultValue.isPendingReconnect = isPendingReconnect;
            _resultValue.openedAt = openedAt;
            _resultValue.originIp = originIp;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
