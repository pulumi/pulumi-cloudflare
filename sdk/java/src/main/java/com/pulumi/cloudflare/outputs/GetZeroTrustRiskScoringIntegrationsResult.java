// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetZeroTrustRiskScoringIntegrationsResult {
    /**
     * @return The Cloudflare account tag.
     * 
     */
    private String accountTag;
    /**
     * @return Whether this integration is enabled and should export changes in risk score.
     * 
     */
    private Boolean active;
    /**
     * @return When the integration was created in RFC3339 format.
     * 
     */
    private String createdAt;
    /**
     * @return The id of the integration, a UUIDv4.
     * 
     */
    private String id;
    private String integrationType;
    /**
     * @return A reference ID defined by the client.
     * Should be set to the Access-Okta IDP integration ID.
     * Useful when the risk-score integration needs to be associated with a secondary asset and recalled using that ID.
     * 
     */
    private String referenceId;
    /**
     * @return The base URL for the tenant. E.g. &#34;https://tenant.okta.com&#34;
     * 
     */
    private String tenantUrl;
    /**
     * @return The URL for the Shared Signals Framework configuration, e.g. &#34;/.well-known/sse-configuration/{integration*uuid}/&#34;. https://openid.net/specs/openid-sse-framework-1*0.html#rfc.section.6.2.1
     * 
     */
    private String wellKnownUrl;

    private GetZeroTrustRiskScoringIntegrationsResult() {}
    /**
     * @return The Cloudflare account tag.
     * 
     */
    public String accountTag() {
        return this.accountTag;
    }
    /**
     * @return Whether this integration is enabled and should export changes in risk score.
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return When the integration was created in RFC3339 format.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The id of the integration, a UUIDv4.
     * 
     */
    public String id() {
        return this.id;
    }
    public String integrationType() {
        return this.integrationType;
    }
    /**
     * @return A reference ID defined by the client.
     * Should be set to the Access-Okta IDP integration ID.
     * Useful when the risk-score integration needs to be associated with a secondary asset and recalled using that ID.
     * 
     */
    public String referenceId() {
        return this.referenceId;
    }
    /**
     * @return The base URL for the tenant. E.g. &#34;https://tenant.okta.com&#34;
     * 
     */
    public String tenantUrl() {
        return this.tenantUrl;
    }
    /**
     * @return The URL for the Shared Signals Framework configuration, e.g. &#34;/.well-known/sse-configuration/{integration*uuid}/&#34;. https://openid.net/specs/openid-sse-framework-1*0.html#rfc.section.6.2.1
     * 
     */
    public String wellKnownUrl() {
        return this.wellKnownUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustRiskScoringIntegrationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountTag;
        private Boolean active;
        private String createdAt;
        private String id;
        private String integrationType;
        private String referenceId;
        private String tenantUrl;
        private String wellKnownUrl;
        public Builder() {}
        public Builder(GetZeroTrustRiskScoringIntegrationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountTag = defaults.accountTag;
    	      this.active = defaults.active;
    	      this.createdAt = defaults.createdAt;
    	      this.id = defaults.id;
    	      this.integrationType = defaults.integrationType;
    	      this.referenceId = defaults.referenceId;
    	      this.tenantUrl = defaults.tenantUrl;
    	      this.wellKnownUrl = defaults.wellKnownUrl;
        }

        @CustomType.Setter
        public Builder accountTag(String accountTag) {
            if (accountTag == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustRiskScoringIntegrationsResult", "accountTag");
            }
            this.accountTag = accountTag;
            return this;
        }
        @CustomType.Setter
        public Builder active(Boolean active) {
            if (active == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustRiskScoringIntegrationsResult", "active");
            }
            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustRiskScoringIntegrationsResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustRiskScoringIntegrationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder integrationType(String integrationType) {
            if (integrationType == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustRiskScoringIntegrationsResult", "integrationType");
            }
            this.integrationType = integrationType;
            return this;
        }
        @CustomType.Setter
        public Builder referenceId(String referenceId) {
            if (referenceId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustRiskScoringIntegrationsResult", "referenceId");
            }
            this.referenceId = referenceId;
            return this;
        }
        @CustomType.Setter
        public Builder tenantUrl(String tenantUrl) {
            if (tenantUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustRiskScoringIntegrationsResult", "tenantUrl");
            }
            this.tenantUrl = tenantUrl;
            return this;
        }
        @CustomType.Setter
        public Builder wellKnownUrl(String wellKnownUrl) {
            if (wellKnownUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustRiskScoringIntegrationsResult", "wellKnownUrl");
            }
            this.wellKnownUrl = wellKnownUrl;
            return this;
        }
        public GetZeroTrustRiskScoringIntegrationsResult build() {
            final var _resultValue = new GetZeroTrustRiskScoringIntegrationsResult();
            _resultValue.accountTag = accountTag;
            _resultValue.active = active;
            _resultValue.createdAt = createdAt;
            _resultValue.id = id;
            _resultValue.integrationType = integrationType;
            _resultValue.referenceId = referenceId;
            _resultValue.tenantUrl = tenantUrl;
            _resultValue.wellKnownUrl = wellKnownUrl;
            return _resultValue;
        }
    }
}
