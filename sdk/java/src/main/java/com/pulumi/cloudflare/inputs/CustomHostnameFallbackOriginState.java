// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomHostnameFallbackOriginState extends com.pulumi.resources.ResourceArgs {

    public static final CustomHostnameFallbackOriginState Empty = new CustomHostnameFallbackOriginState();

    /**
     * This is the time the fallback origin was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return This is the time the fallback origin was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * These are errors that were encountered while trying to activate a fallback origin.
     * 
     */
    @Import(name="errors")
    private @Nullable Output<List<String>> errors;

    /**
     * @return These are errors that were encountered while trying to activate a fallback origin.
     * 
     */
    public Optional<Output<List<String>>> errors() {
        return Optional.ofNullable(this.errors);
    }

    /**
     * Your origin hostname that requests to your custom hostnames will be sent to.
     * 
     */
    @Import(name="origin")
    private @Nullable Output<String> origin;

    /**
     * @return Your origin hostname that requests to your custom hostnames will be sent to.
     * 
     */
    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * Status of the fallback origin&#39;s activation.
     * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the fallback origin&#39;s activation.
     * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * This is the time the fallback origin was updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return This is the time the fallback origin was updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private CustomHostnameFallbackOriginState() {}

    private CustomHostnameFallbackOriginState(CustomHostnameFallbackOriginState $) {
        this.createdAt = $.createdAt;
        this.errors = $.errors;
        this.origin = $.origin;
        this.status = $.status;
        this.updatedAt = $.updatedAt;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomHostnameFallbackOriginState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomHostnameFallbackOriginState $;

        public Builder() {
            $ = new CustomHostnameFallbackOriginState();
        }

        public Builder(CustomHostnameFallbackOriginState defaults) {
            $ = new CustomHostnameFallbackOriginState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt This is the time the fallback origin was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt This is the time the fallback origin was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param errors These are errors that were encountered while trying to activate a fallback origin.
         * 
         * @return builder
         * 
         */
        public Builder errors(@Nullable Output<List<String>> errors) {
            $.errors = errors;
            return this;
        }

        /**
         * @param errors These are errors that were encountered while trying to activate a fallback origin.
         * 
         * @return builder
         * 
         */
        public Builder errors(List<String> errors) {
            return errors(Output.of(errors));
        }

        /**
         * @param errors These are errors that were encountered while trying to activate a fallback origin.
         * 
         * @return builder
         * 
         */
        public Builder errors(String... errors) {
            return errors(List.of(errors));
        }

        /**
         * @param origin Your origin hostname that requests to your custom hostnames will be sent to.
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin Your origin hostname that requests to your custom hostnames will be sent to.
         * 
         * @return builder
         * 
         */
        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param status Status of the fallback origin&#39;s activation.
         * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the fallback origin&#39;s activation.
         * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param updatedAt This is the time the fallback origin was updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt This is the time the fallback origin was updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public CustomHostnameFallbackOriginState build() {
            return $;
        }
    }

}
