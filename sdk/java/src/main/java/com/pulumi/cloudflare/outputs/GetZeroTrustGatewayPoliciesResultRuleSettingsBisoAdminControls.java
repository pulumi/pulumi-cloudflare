// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls {
    /**
     * @return Configure copy behavior. If set to remote*only, users cannot copy isolated content from the remote browser to the local clipboard. If this field is absent, copying remains enabled. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;, &#34;remote*only&#34;.
     * 
     */
    private String copy;
    /**
     * @return Set to false to enable copy-pasting. Only applies when `version == &#34;v1&#34;`.
     * 
     */
    private Boolean dcp;
    /**
     * @return Set to false to enable downloading. Only applies when `version == &#34;v1&#34;`.
     * 
     */
    private Boolean dd;
    /**
     * @return Set to false to enable keyboard usage. Only applies when `version == &#34;v1&#34;`.
     * 
     */
    private Boolean dk;
    /**
     * @return Configure download behavior. When set to remote*only, users can view downloads but cannot save them. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;, &#34;remote*only&#34;.
     * 
     */
    private String download;
    /**
     * @return Set to false to enable printing. Only applies when `version == &#34;v1&#34;`.
     * 
     */
    private Boolean dp;
    /**
     * @return Set to false to enable uploading. Only applies when `version == &#34;v1&#34;`.
     * 
     */
    private Boolean du;
    /**
     * @return Configure keyboard usage behavior. If this field is absent, keyboard usage remains enabled. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;.
     * 
     */
    private String keyboard;
    /**
     * @return Configure paste behavior. If set to remote*only, users cannot paste content from the local clipboard into isolated pages. If this field is absent, pasting remains enabled. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;, &#34;remote*only&#34;.
     * 
     */
    private String paste;
    /**
     * @return Configure print behavior. Default, Printing is enabled. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;.
     * 
     */
    private String printing;
    /**
     * @return Configure upload behavior. If this field is absent, uploading remains enabled. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;.
     * 
     */
    private String upload;
    /**
     * @return Indicate which version of the browser isolation controls should apply.
     * Available values: &#34;v1&#34;, &#34;v2&#34;.
     * 
     */
    private String version;

    private GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls() {}
    /**
     * @return Configure copy behavior. If set to remote*only, users cannot copy isolated content from the remote browser to the local clipboard. If this field is absent, copying remains enabled. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;, &#34;remote*only&#34;.
     * 
     */
    public String copy() {
        return this.copy;
    }
    /**
     * @return Set to false to enable copy-pasting. Only applies when `version == &#34;v1&#34;`.
     * 
     */
    public Boolean dcp() {
        return this.dcp;
    }
    /**
     * @return Set to false to enable downloading. Only applies when `version == &#34;v1&#34;`.
     * 
     */
    public Boolean dd() {
        return this.dd;
    }
    /**
     * @return Set to false to enable keyboard usage. Only applies when `version == &#34;v1&#34;`.
     * 
     */
    public Boolean dk() {
        return this.dk;
    }
    /**
     * @return Configure download behavior. When set to remote*only, users can view downloads but cannot save them. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;, &#34;remote*only&#34;.
     * 
     */
    public String download() {
        return this.download;
    }
    /**
     * @return Set to false to enable printing. Only applies when `version == &#34;v1&#34;`.
     * 
     */
    public Boolean dp() {
        return this.dp;
    }
    /**
     * @return Set to false to enable uploading. Only applies when `version == &#34;v1&#34;`.
     * 
     */
    public Boolean du() {
        return this.du;
    }
    /**
     * @return Configure keyboard usage behavior. If this field is absent, keyboard usage remains enabled. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;.
     * 
     */
    public String keyboard() {
        return this.keyboard;
    }
    /**
     * @return Configure paste behavior. If set to remote*only, users cannot paste content from the local clipboard into isolated pages. If this field is absent, pasting remains enabled. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;, &#34;remote*only&#34;.
     * 
     */
    public String paste() {
        return this.paste;
    }
    /**
     * @return Configure print behavior. Default, Printing is enabled. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;.
     * 
     */
    public String printing() {
        return this.printing;
    }
    /**
     * @return Configure upload behavior. If this field is absent, uploading remains enabled. Applies only when version == &#34;v2&#34;.
     * Available values: &#34;enabled&#34;, &#34;disabled&#34;.
     * 
     */
    public String upload() {
        return this.upload;
    }
    /**
     * @return Indicate which version of the browser isolation controls should apply.
     * Available values: &#34;v1&#34;, &#34;v2&#34;.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String copy;
        private Boolean dcp;
        private Boolean dd;
        private Boolean dk;
        private String download;
        private Boolean dp;
        private Boolean du;
        private String keyboard;
        private String paste;
        private String printing;
        private String upload;
        private String version;
        public Builder() {}
        public Builder(GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.copy = defaults.copy;
    	      this.dcp = defaults.dcp;
    	      this.dd = defaults.dd;
    	      this.dk = defaults.dk;
    	      this.download = defaults.download;
    	      this.dp = defaults.dp;
    	      this.du = defaults.du;
    	      this.keyboard = defaults.keyboard;
    	      this.paste = defaults.paste;
    	      this.printing = defaults.printing;
    	      this.upload = defaults.upload;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder copy(String copy) {
            if (copy == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "copy");
            }
            this.copy = copy;
            return this;
        }
        @CustomType.Setter
        public Builder dcp(Boolean dcp) {
            if (dcp == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "dcp");
            }
            this.dcp = dcp;
            return this;
        }
        @CustomType.Setter
        public Builder dd(Boolean dd) {
            if (dd == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "dd");
            }
            this.dd = dd;
            return this;
        }
        @CustomType.Setter
        public Builder dk(Boolean dk) {
            if (dk == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "dk");
            }
            this.dk = dk;
            return this;
        }
        @CustomType.Setter
        public Builder download(String download) {
            if (download == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "download");
            }
            this.download = download;
            return this;
        }
        @CustomType.Setter
        public Builder dp(Boolean dp) {
            if (dp == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "dp");
            }
            this.dp = dp;
            return this;
        }
        @CustomType.Setter
        public Builder du(Boolean du) {
            if (du == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "du");
            }
            this.du = du;
            return this;
        }
        @CustomType.Setter
        public Builder keyboard(String keyboard) {
            if (keyboard == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "keyboard");
            }
            this.keyboard = keyboard;
            return this;
        }
        @CustomType.Setter
        public Builder paste(String paste) {
            if (paste == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "paste");
            }
            this.paste = paste;
            return this;
        }
        @CustomType.Setter
        public Builder printing(String printing) {
            if (printing == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "printing");
            }
            this.printing = printing;
            return this;
        }
        @CustomType.Setter
        public Builder upload(String upload) {
            if (upload == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "upload");
            }
            this.upload = upload;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls", "version");
            }
            this.version = version;
            return this;
        }
        public GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls build() {
            final var _resultValue = new GetZeroTrustGatewayPoliciesResultRuleSettingsBisoAdminControls();
            _resultValue.copy = copy;
            _resultValue.dcp = dcp;
            _resultValue.dd = dd;
            _resultValue.dk = dk;
            _resultValue.download = download;
            _resultValue.dp = dp;
            _resultValue.du = du;
            _resultValue.keyboard = keyboard;
            _resultValue.paste = paste;
            _resultValue.printing = printing;
            _resultValue.upload = upload;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
