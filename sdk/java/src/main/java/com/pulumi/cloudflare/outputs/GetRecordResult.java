// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRecordResult {
    /**
     * @return Hostname to filter DNS record results on.
     * 
     */
    private String hostname;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Locked status of the found DNS record.
     * 
     */
    private Boolean locked;
    /**
     * @return DNS priority to filter record results on.
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return Proxiable status of the found DNS record.
     * 
     */
    private Boolean proxiable;
    /**
     * @return Proxied status of the found DNS record.
     * 
     */
    private Boolean proxied;
    /**
     * @return TTL of the found DNS record.
     * 
     */
    private Integer ttl;
    /**
     * @return DNS record type to filter record results on. Defaults to `A`.
     * 
     */
    private @Nullable String type;
    /**
     * @return Value of the found DNS record.
     * 
     */
    private String value;
    /**
     * @return The zone identifier to target for the resource.
     * 
     */
    private String zoneId;
    /**
     * @return Zone name of the found DNS record.
     * 
     */
    private String zoneName;

    private GetRecordResult() {}
    /**
     * @return Hostname to filter DNS record results on.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Locked status of the found DNS record.
     * 
     */
    public Boolean locked() {
        return this.locked;
    }
    /**
     * @return DNS priority to filter record results on.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return Proxiable status of the found DNS record.
     * 
     */
    public Boolean proxiable() {
        return this.proxiable;
    }
    /**
     * @return Proxied status of the found DNS record.
     * 
     */
    public Boolean proxied() {
        return this.proxied;
    }
    /**
     * @return TTL of the found DNS record.
     * 
     */
    public Integer ttl() {
        return this.ttl;
    }
    /**
     * @return DNS record type to filter record results on. Defaults to `A`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Value of the found DNS record.
     * 
     */
    public String value() {
        return this.value;
    }
    /**
     * @return The zone identifier to target for the resource.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }
    /**
     * @return Zone name of the found DNS record.
     * 
     */
    public String zoneName() {
        return this.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRecordResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String hostname;
        private String id;
        private Boolean locked;
        private @Nullable Integer priority;
        private Boolean proxiable;
        private Boolean proxied;
        private Integer ttl;
        private @Nullable String type;
        private String value;
        private String zoneId;
        private String zoneName;
        public Builder() {}
        public Builder(GetRecordResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.locked = defaults.locked;
    	      this.priority = defaults.priority;
    	      this.proxiable = defaults.proxiable;
    	      this.proxied = defaults.proxied;
    	      this.ttl = defaults.ttl;
    	      this.type = defaults.type;
    	      this.value = defaults.value;
    	      this.zoneId = defaults.zoneId;
    	      this.zoneName = defaults.zoneName;
        }

        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder locked(Boolean locked) {
            if (locked == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "locked");
            }
            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder proxiable(Boolean proxiable) {
            if (proxiable == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "proxiable");
            }
            this.proxiable = proxiable;
            return this;
        }
        @CustomType.Setter
        public Builder proxied(Boolean proxied) {
            if (proxied == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "proxied");
            }
            this.proxied = proxied;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(Integer ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "value");
            }
            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneName(String zoneName) {
            if (zoneName == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "zoneName");
            }
            this.zoneName = zoneName;
            return this;
        }
        public GetRecordResult build() {
            final var _resultValue = new GetRecordResult();
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.locked = locked;
            _resultValue.priority = priority;
            _resultValue.proxiable = proxiable;
            _resultValue.proxied = proxied;
            _resultValue.ttl = ttl;
            _resultValue.type = type;
            _resultValue.value = value;
            _resultValue.zoneId = zoneId;
            _resultValue.zoneName = zoneName;
            return _resultValue;
        }
    }
}
