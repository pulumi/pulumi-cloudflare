// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustTunnelCloudflaredArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustTunnelCloudflaredArgs Empty = new ZeroTrustTunnelCloudflaredArgs();

    /**
     * Cloudflare account ID
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Cloudflare account ID
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
     * Available values: &#34;local&#34;, &#34;cloudflare&#34;.
     * 
     */
    @Import(name="configSrc")
    private @Nullable Output<String> configSrc;

    /**
     * @return Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
     * Available values: &#34;local&#34;, &#34;cloudflare&#34;.
     * 
     */
    public Optional<Output<String>> configSrc() {
        return Optional.ofNullable(this.configSrc);
    }

    /**
     * A user-friendly name for a tunnel.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A user-friendly name for a tunnel.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
     * 
     */
    @Import(name="tunnelSecret")
    private @Nullable Output<String> tunnelSecret;

    /**
     * @return Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
     * 
     */
    public Optional<Output<String>> tunnelSecret() {
        return Optional.ofNullable(this.tunnelSecret);
    }

    private ZeroTrustTunnelCloudflaredArgs() {}

    private ZeroTrustTunnelCloudflaredArgs(ZeroTrustTunnelCloudflaredArgs $) {
        this.accountId = $.accountId;
        this.configSrc = $.configSrc;
        this.name = $.name;
        this.tunnelSecret = $.tunnelSecret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustTunnelCloudflaredArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustTunnelCloudflaredArgs $;

        public Builder() {
            $ = new ZeroTrustTunnelCloudflaredArgs();
        }

        public Builder(ZeroTrustTunnelCloudflaredArgs defaults) {
            $ = new ZeroTrustTunnelCloudflaredArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Cloudflare account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Cloudflare account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param configSrc Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
         * Available values: &#34;local&#34;, &#34;cloudflare&#34;.
         * 
         * @return builder
         * 
         */
        public Builder configSrc(@Nullable Output<String> configSrc) {
            $.configSrc = configSrc;
            return this;
        }

        /**
         * @param configSrc Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
         * Available values: &#34;local&#34;, &#34;cloudflare&#34;.
         * 
         * @return builder
         * 
         */
        public Builder configSrc(String configSrc) {
            return configSrc(Output.of(configSrc));
        }

        /**
         * @param name A user-friendly name for a tunnel.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-friendly name for a tunnel.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tunnelSecret Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
         * 
         * @return builder
         * 
         */
        public Builder tunnelSecret(@Nullable Output<String> tunnelSecret) {
            $.tunnelSecret = tunnelSecret;
            return this;
        }

        /**
         * @param tunnelSecret Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
         * 
         * @return builder
         * 
         */
        public Builder tunnelSecret(String tunnelSecret) {
            return tunnelSecret(Output.of(tunnelSecret));
        }

        public ZeroTrustTunnelCloudflaredArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("ZeroTrustTunnelCloudflaredArgs", "accountId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ZeroTrustTunnelCloudflaredArgs", "name");
            }
            return $;
        }
    }

}
