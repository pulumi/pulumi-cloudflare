// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.HealthcheckArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.HealthcheckState;
import com.pulumi.cloudflare.outputs.HealthcheckHttpConfig;
import com.pulumi.cloudflare.outputs.HealthcheckTcpConfig;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/healthcheck:Healthcheck example &#39;&lt;zone_id&gt;/&lt;healthcheck_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/healthcheck:Healthcheck")
public class Healthcheck extends com.pulumi.resources.CustomResource {
    /**
     * The hostname or IP address of the origin server to run health checks on.
     * 
     */
    @Export(name="address", refs={String.class}, tree="[0]")
    private Output<String> address;

    /**
     * @return The hostname or IP address of the origin server to run health checks on.
     * 
     */
    public Output<String> address() {
        return this.address;
    }
    /**
     * A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
     * 
     */
    @Export(name="checkRegions", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> checkRegions;

    /**
     * @return A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
     * 
     */
    public Output<Optional<List<String>>> checkRegions() {
        return Codegen.optional(this.checkRegions);
    }
    /**
     * The number of consecutive fails required from a health check before changing the health to unhealthy.
     * 
     */
    @Export(name="consecutiveFails", refs={Integer.class}, tree="[0]")
    private Output<Integer> consecutiveFails;

    /**
     * @return The number of consecutive fails required from a health check before changing the health to unhealthy.
     * 
     */
    public Output<Integer> consecutiveFails() {
        return this.consecutiveFails;
    }
    /**
     * The number of consecutive successes required from a health check before changing the health to healthy.
     * 
     */
    @Export(name="consecutiveSuccesses", refs={Integer.class}, tree="[0]")
    private Output<Integer> consecutiveSuccesses;

    /**
     * @return The number of consecutive successes required from a health check before changing the health to healthy.
     * 
     */
    public Output<Integer> consecutiveSuccesses() {
        return this.consecutiveSuccesses;
    }
    @Export(name="createdOn", refs={String.class}, tree="[0]")
    private Output<String> createdOn;

    public Output<String> createdOn() {
        return this.createdOn;
    }
    /**
     * A human-readable description of the health check.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A human-readable description of the health check.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The current failure reason if status is unhealthy.
     * 
     */
    @Export(name="failureReason", refs={String.class}, tree="[0]")
    private Output<String> failureReason;

    /**
     * @return The current failure reason if status is unhealthy.
     * 
     */
    public Output<String> failureReason() {
        return this.failureReason;
    }
    /**
     * Parameters specific to an HTTP or HTTPS health check.
     * 
     */
    @Export(name="httpConfig", refs={HealthcheckHttpConfig.class}, tree="[0]")
    private Output<HealthcheckHttpConfig> httpConfig;

    /**
     * @return Parameters specific to an HTTP or HTTPS health check.
     * 
     */
    public Output<HealthcheckHttpConfig> httpConfig() {
        return this.httpConfig;
    }
    /**
     * The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
     * 
     */
    @Export(name="interval", refs={Integer.class}, tree="[0]")
    private Output<Integer> interval;

    /**
     * @return The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
     * 
     */
    public Output<Integer> interval() {
        return this.interval;
    }
    @Export(name="modifiedOn", refs={String.class}, tree="[0]")
    private Output<String> modifiedOn;

    public Output<String> modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     * 
     */
    @Export(name="retries", refs={Integer.class}, tree="[0]")
    private Output<Integer> retries;

    /**
     * @return The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     * 
     */
    public Output<Integer> retries() {
        return this.retries;
    }
    /**
     * The current status of the origin server according to the health check.
     * Available values: &#34;unknown&#34;, &#34;healthy&#34;, &#34;unhealthy&#34;, &#34;suspended&#34;.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The current status of the origin server according to the health check.
     * Available values: &#34;unknown&#34;, &#34;healthy&#34;, &#34;unhealthy&#34;, &#34;suspended&#34;.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * If suspended, no health checks are sent to the origin.
     * 
     */
    @Export(name="suspended", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> suspended;

    /**
     * @return If suspended, no health checks are sent to the origin.
     * 
     */
    public Output<Boolean> suspended() {
        return this.suspended;
    }
    /**
     * Parameters specific to TCP health check.
     * 
     */
    @Export(name="tcpConfig", refs={HealthcheckTcpConfig.class}, tree="[0]")
    private Output<HealthcheckTcpConfig> tcpConfig;

    /**
     * @return Parameters specific to TCP health check.
     * 
     */
    public Output<HealthcheckTcpConfig> tcpConfig() {
        return this.tcpConfig;
    }
    /**
     * The timeout (in seconds) before marking the health check as failed.
     * 
     */
    @Export(name="timeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> timeout;

    /**
     * @return The timeout (in seconds) before marking the health check as failed.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }
    /**
     * The protocol to use for the health check. Currently supported protocols are &#39;HTTP&#39;, &#39;HTTPS&#39; and &#39;TCP&#39;.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The protocol to use for the health check. Currently supported protocols are &#39;HTTP&#39;, &#39;HTTPS&#39; and &#39;TCP&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Identifier
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Healthcheck(java.lang.String name) {
        this(name, HealthcheckArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Healthcheck(java.lang.String name, HealthcheckArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Healthcheck(java.lang.String name, HealthcheckArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/healthcheck:Healthcheck", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Healthcheck(java.lang.String name, Output<java.lang.String> id, @Nullable HealthcheckState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/healthcheck:Healthcheck", name, state, makeResourceOptions(options, id), false);
    }

    private static HealthcheckArgs makeArgs(HealthcheckArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? HealthcheckArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Healthcheck get(java.lang.String name, Output<java.lang.String> id, @Nullable HealthcheckState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Healthcheck(name, id, state, options);
    }
}
