// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueConsumerSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueConsumerSettingsArgs Empty = new QueueConsumerSettingsArgs();

    /**
     * The maximum number of messages to include in a batch.
     * 
     */
    @Import(name="batchSize")
    private @Nullable Output<Double> batchSize;

    /**
     * @return The maximum number of messages to include in a batch.
     * 
     */
    public Optional<Output<Double>> batchSize() {
        return Optional.ofNullable(this.batchSize);
    }

    /**
     * Maximum number of concurrent consumers that may consume from this Queue. Set to `null` to automatically opt in to the platform&#39;s maximum (recommended).
     * 
     */
    @Import(name="maxConcurrency")
    private @Nullable Output<Double> maxConcurrency;

    /**
     * @return Maximum number of concurrent consumers that may consume from this Queue. Set to `null` to automatically opt in to the platform&#39;s maximum (recommended).
     * 
     */
    public Optional<Output<Double>> maxConcurrency() {
        return Optional.ofNullable(this.maxConcurrency);
    }

    /**
     * The maximum number of retries
     * 
     */
    @Import(name="maxRetries")
    private @Nullable Output<Double> maxRetries;

    /**
     * @return The maximum number of retries
     * 
     */
    public Optional<Output<Double>> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }

    /**
     * The number of milliseconds to wait for a batch to fill up before attempting to deliver it
     * 
     */
    @Import(name="maxWaitTimeMs")
    private @Nullable Output<Double> maxWaitTimeMs;

    /**
     * @return The number of milliseconds to wait for a batch to fill up before attempting to deliver it
     * 
     */
    public Optional<Output<Double>> maxWaitTimeMs() {
        return Optional.ofNullable(this.maxWaitTimeMs);
    }

    /**
     * The number of seconds to delay before making the message available for another attempt.
     * 
     */
    @Import(name="retryDelay")
    private @Nullable Output<Double> retryDelay;

    /**
     * @return The number of seconds to delay before making the message available for another attempt.
     * 
     */
    public Optional<Output<Double>> retryDelay() {
        return Optional.ofNullable(this.retryDelay);
    }

    /**
     * The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.
     * 
     */
    @Import(name="visibilityTimeoutMs")
    private @Nullable Output<Double> visibilityTimeoutMs;

    /**
     * @return The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.
     * 
     */
    public Optional<Output<Double>> visibilityTimeoutMs() {
        return Optional.ofNullable(this.visibilityTimeoutMs);
    }

    private QueueConsumerSettingsArgs() {}

    private QueueConsumerSettingsArgs(QueueConsumerSettingsArgs $) {
        this.batchSize = $.batchSize;
        this.maxConcurrency = $.maxConcurrency;
        this.maxRetries = $.maxRetries;
        this.maxWaitTimeMs = $.maxWaitTimeMs;
        this.retryDelay = $.retryDelay;
        this.visibilityTimeoutMs = $.visibilityTimeoutMs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueConsumerSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueConsumerSettingsArgs $;

        public Builder() {
            $ = new QueueConsumerSettingsArgs();
        }

        public Builder(QueueConsumerSettingsArgs defaults) {
            $ = new QueueConsumerSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param batchSize The maximum number of messages to include in a batch.
         * 
         * @return builder
         * 
         */
        public Builder batchSize(@Nullable Output<Double> batchSize) {
            $.batchSize = batchSize;
            return this;
        }

        /**
         * @param batchSize The maximum number of messages to include in a batch.
         * 
         * @return builder
         * 
         */
        public Builder batchSize(Double batchSize) {
            return batchSize(Output.of(batchSize));
        }

        /**
         * @param maxConcurrency Maximum number of concurrent consumers that may consume from this Queue. Set to `null` to automatically opt in to the platform&#39;s maximum (recommended).
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrency(@Nullable Output<Double> maxConcurrency) {
            $.maxConcurrency = maxConcurrency;
            return this;
        }

        /**
         * @param maxConcurrency Maximum number of concurrent consumers that may consume from this Queue. Set to `null` to automatically opt in to the platform&#39;s maximum (recommended).
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrency(Double maxConcurrency) {
            return maxConcurrency(Output.of(maxConcurrency));
        }

        /**
         * @param maxRetries The maximum number of retries
         * 
         * @return builder
         * 
         */
        public Builder maxRetries(@Nullable Output<Double> maxRetries) {
            $.maxRetries = maxRetries;
            return this;
        }

        /**
         * @param maxRetries The maximum number of retries
         * 
         * @return builder
         * 
         */
        public Builder maxRetries(Double maxRetries) {
            return maxRetries(Output.of(maxRetries));
        }

        /**
         * @param maxWaitTimeMs The number of milliseconds to wait for a batch to fill up before attempting to deliver it
         * 
         * @return builder
         * 
         */
        public Builder maxWaitTimeMs(@Nullable Output<Double> maxWaitTimeMs) {
            $.maxWaitTimeMs = maxWaitTimeMs;
            return this;
        }

        /**
         * @param maxWaitTimeMs The number of milliseconds to wait for a batch to fill up before attempting to deliver it
         * 
         * @return builder
         * 
         */
        public Builder maxWaitTimeMs(Double maxWaitTimeMs) {
            return maxWaitTimeMs(Output.of(maxWaitTimeMs));
        }

        /**
         * @param retryDelay The number of seconds to delay before making the message available for another attempt.
         * 
         * @return builder
         * 
         */
        public Builder retryDelay(@Nullable Output<Double> retryDelay) {
            $.retryDelay = retryDelay;
            return this;
        }

        /**
         * @param retryDelay The number of seconds to delay before making the message available for another attempt.
         * 
         * @return builder
         * 
         */
        public Builder retryDelay(Double retryDelay) {
            return retryDelay(Output.of(retryDelay));
        }

        /**
         * @param visibilityTimeoutMs The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.
         * 
         * @return builder
         * 
         */
        public Builder visibilityTimeoutMs(@Nullable Output<Double> visibilityTimeoutMs) {
            $.visibilityTimeoutMs = visibilityTimeoutMs;
            return this;
        }

        /**
         * @param visibilityTimeoutMs The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.
         * 
         * @return builder
         * 
         */
        public Builder visibilityTimeoutMs(Double visibilityTimeoutMs) {
            return visibilityTimeoutMs(Output.of(visibilityTimeoutMs));
        }

        public QueueConsumerSettingsArgs build() {
            return $;
        }
    }

}
