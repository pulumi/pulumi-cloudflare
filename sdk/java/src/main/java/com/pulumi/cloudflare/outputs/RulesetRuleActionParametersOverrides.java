// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersOverridesCategory;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersOverridesRule;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RulesetRuleActionParametersOverrides {
    /**
     * @return Action to perform in the rule-level override. Available values: `block`, `challenge`, `compress_response`, `ddos_dynamic`, `ddos_mitigation`, `execute`, `force_connection_close`, `js_challenge`, `log`, `log_custom_field`, `managed_challenge`, `redirect`, `rewrite`, `route`, `score`, `serve_error`, `set_cache_settings`, `set_config`, `skip`.
     * 
     */
    private @Nullable String action;
    /**
     * @return List of tag-based overrides.
     * 
     */
    private @Nullable List<RulesetRuleActionParametersOverridesCategory> categories;
    /**
     * @return Defines if the current ruleset-level override enables or disables the ruleset.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return List of rule-based overrides.
     * 
     */
    private @Nullable List<RulesetRuleActionParametersOverridesRule> rules;
    /**
     * @return Sensitivity level to override for all ruleset rules. Available values: `default`, `medium`, `low`, `eoff`.
     * 
     */
    private @Nullable String sensitivityLevel;

    private RulesetRuleActionParametersOverrides() {}
    /**
     * @return Action to perform in the rule-level override. Available values: `block`, `challenge`, `compress_response`, `ddos_dynamic`, `ddos_mitigation`, `execute`, `force_connection_close`, `js_challenge`, `log`, `log_custom_field`, `managed_challenge`, `redirect`, `rewrite`, `route`, `score`, `serve_error`, `set_cache_settings`, `set_config`, `skip`.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return List of tag-based overrides.
     * 
     */
    public List<RulesetRuleActionParametersOverridesCategory> categories() {
        return this.categories == null ? List.of() : this.categories;
    }
    /**
     * @return Defines if the current ruleset-level override enables or disables the ruleset.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return List of rule-based overrides.
     * 
     */
    public List<RulesetRuleActionParametersOverridesRule> rules() {
        return this.rules == null ? List.of() : this.rules;
    }
    /**
     * @return Sensitivity level to override for all ruleset rules. Available values: `default`, `medium`, `low`, `eoff`.
     * 
     */
    public Optional<String> sensitivityLevel() {
        return Optional.ofNullable(this.sensitivityLevel);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesetRuleActionParametersOverrides defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String action;
        private @Nullable List<RulesetRuleActionParametersOverridesCategory> categories;
        private @Nullable Boolean enabled;
        private @Nullable List<RulesetRuleActionParametersOverridesRule> rules;
        private @Nullable String sensitivityLevel;
        public Builder() {}
        public Builder(RulesetRuleActionParametersOverrides defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.categories = defaults.categories;
    	      this.enabled = defaults.enabled;
    	      this.rules = defaults.rules;
    	      this.sensitivityLevel = defaults.sensitivityLevel;
        }

        @CustomType.Setter
        public Builder action(@Nullable String action) {

            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder categories(@Nullable List<RulesetRuleActionParametersOverridesCategory> categories) {

            this.categories = categories;
            return this;
        }
        public Builder categories(RulesetRuleActionParametersOverridesCategory... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder rules(@Nullable List<RulesetRuleActionParametersOverridesRule> rules) {

            this.rules = rules;
            return this;
        }
        public Builder rules(RulesetRuleActionParametersOverridesRule... rules) {
            return rules(List.of(rules));
        }
        @CustomType.Setter
        public Builder sensitivityLevel(@Nullable String sensitivityLevel) {

            this.sensitivityLevel = sensitivityLevel;
            return this;
        }
        public RulesetRuleActionParametersOverrides build() {
            final var _resultValue = new RulesetRuleActionParametersOverrides();
            _resultValue.action = action;
            _resultValue.categories = categories;
            _resultValue.enabled = enabled;
            _resultValue.rules = rules;
            _resultValue.sensitivityLevel = sensitivityLevel;
            return _resultValue;
        }
    }
}
