// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.FirewallRuleActionArgs;
import com.pulumi.cloudflare.inputs.FirewallRuleFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirewallRuleState extends com.pulumi.resources.ResourceArgs {

    public static final FirewallRuleState Empty = new FirewallRuleState();

    /**
     * The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    @Import(name="action")
    private @Nullable Output<FirewallRuleActionArgs> action;

    /**
     * @return The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    public Optional<Output<FirewallRuleActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * An informative summary of the firewall rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An informative summary of the firewall rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="filter")
    private @Nullable Output<FirewallRuleFilterArgs> filter;

    public Optional<Output<FirewallRuleFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * When true, indicates that the firewall rule is currently paused.
     * 
     */
    @Import(name="paused")
    private @Nullable Output<Boolean> paused;

    /**
     * @return When true, indicates that the firewall rule is currently paused.
     * 
     */
    public Optional<Output<Boolean>> paused() {
        return Optional.ofNullable(this.paused);
    }

    /**
     * The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Double> priority;

    /**
     * @return The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
     * 
     */
    public Optional<Output<Double>> priority() {
        return Optional.ofNullable(this.priority);
    }

    @Import(name="products")
    private @Nullable Output<List<String>> products;

    public Optional<Output<List<String>>> products() {
        return Optional.ofNullable(this.products);
    }

    /**
     * A short reference tag. Allows you to select related firewall rules.
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    /**
     * @return A short reference tag. Allows you to select related firewall rules.
     * 
     */
    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * Defines an identifier.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Defines an identifier.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private FirewallRuleState() {}

    private FirewallRuleState(FirewallRuleState $) {
        this.action = $.action;
        this.description = $.description;
        this.filter = $.filter;
        this.paused = $.paused;
        this.priority = $.priority;
        this.products = $.products;
        this.ref = $.ref;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallRuleState $;

        public Builder() {
            $ = new FirewallRuleState();
        }

        public Builder(FirewallRuleState defaults) {
            $ = new FirewallRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to perform when the threshold of matched traffic within the configured period is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<FirewallRuleActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to perform when the threshold of matched traffic within the configured period is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder action(FirewallRuleActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param description An informative summary of the firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An informative summary of the firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder filter(@Nullable Output<FirewallRuleFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(FirewallRuleFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param paused When true, indicates that the firewall rule is currently paused.
         * 
         * @return builder
         * 
         */
        public Builder paused(@Nullable Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        /**
         * @param paused When true, indicates that the firewall rule is currently paused.
         * 
         * @return builder
         * 
         */
        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param priority The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Double> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Double priority) {
            return priority(Output.of(priority));
        }

        public Builder products(@Nullable Output<List<String>> products) {
            $.products = products;
            return this;
        }

        public Builder products(List<String> products) {
            return products(Output.of(products));
        }

        public Builder products(String... products) {
            return products(List.of(products));
        }

        /**
         * @param ref A short reference tag. Allows you to select related firewall rules.
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref A short reference tag. Allows you to select related firewall rules.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public FirewallRuleState build() {
            return $;
        }
    }

}
