// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.TunnelConfigConfigIngressArgs;
import com.pulumi.cloudflare.inputs.TunnelConfigConfigOriginRequestArgs;
import com.pulumi.cloudflare.inputs.TunnelConfigConfigWarpRoutingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TunnelConfigConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final TunnelConfigConfigArgs Empty = new TunnelConfigConfigArgs();

    /**
     * List of public hostname definitions. At least one ingress rule needs to be defined for the tunnel.
     * 
     */
    @Import(name="ingresses")
    private @Nullable Output<List<TunnelConfigConfigIngressArgs>> ingresses;

    /**
     * @return List of public hostname definitions. At least one ingress rule needs to be defined for the tunnel.
     * 
     */
    public Optional<Output<List<TunnelConfigConfigIngressArgs>>> ingresses() {
        return Optional.ofNullable(this.ingresses);
    }

    /**
     * Configuration parameters for the public hostname specific connection settings between cloudflared and origin server.
     * 
     */
    @Import(name="originRequest")
    private @Nullable Output<TunnelConfigConfigOriginRequestArgs> originRequest;

    /**
     * @return Configuration parameters for the public hostname specific connection settings between cloudflared and origin server.
     * 
     */
    public Optional<Output<TunnelConfigConfigOriginRequestArgs>> originRequest() {
        return Optional.ofNullable(this.originRequest);
    }

    /**
     * Enable private network access from WARP users to private network routes. This is enabled if the tunnel has an assigned route.
     * 
     */
    @Import(name="warpRouting")
    private @Nullable Output<TunnelConfigConfigWarpRoutingArgs> warpRouting;

    /**
     * @return Enable private network access from WARP users to private network routes. This is enabled if the tunnel has an assigned route.
     * 
     */
    public Optional<Output<TunnelConfigConfigWarpRoutingArgs>> warpRouting() {
        return Optional.ofNullable(this.warpRouting);
    }

    private TunnelConfigConfigArgs() {}

    private TunnelConfigConfigArgs(TunnelConfigConfigArgs $) {
        this.ingresses = $.ingresses;
        this.originRequest = $.originRequest;
        this.warpRouting = $.warpRouting;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TunnelConfigConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TunnelConfigConfigArgs $;

        public Builder() {
            $ = new TunnelConfigConfigArgs();
        }

        public Builder(TunnelConfigConfigArgs defaults) {
            $ = new TunnelConfigConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ingresses List of public hostname definitions. At least one ingress rule needs to be defined for the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder ingresses(@Nullable Output<List<TunnelConfigConfigIngressArgs>> ingresses) {
            $.ingresses = ingresses;
            return this;
        }

        /**
         * @param ingresses List of public hostname definitions. At least one ingress rule needs to be defined for the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder ingresses(List<TunnelConfigConfigIngressArgs> ingresses) {
            return ingresses(Output.of(ingresses));
        }

        /**
         * @param ingresses List of public hostname definitions. At least one ingress rule needs to be defined for the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder ingresses(TunnelConfigConfigIngressArgs... ingresses) {
            return ingresses(List.of(ingresses));
        }

        /**
         * @param originRequest Configuration parameters for the public hostname specific connection settings between cloudflared and origin server.
         * 
         * @return builder
         * 
         */
        public Builder originRequest(@Nullable Output<TunnelConfigConfigOriginRequestArgs> originRequest) {
            $.originRequest = originRequest;
            return this;
        }

        /**
         * @param originRequest Configuration parameters for the public hostname specific connection settings between cloudflared and origin server.
         * 
         * @return builder
         * 
         */
        public Builder originRequest(TunnelConfigConfigOriginRequestArgs originRequest) {
            return originRequest(Output.of(originRequest));
        }

        /**
         * @param warpRouting Enable private network access from WARP users to private network routes. This is enabled if the tunnel has an assigned route.
         * 
         * @return builder
         * 
         */
        public Builder warpRouting(@Nullable Output<TunnelConfigConfigWarpRoutingArgs> warpRouting) {
            $.warpRouting = warpRouting;
            return this;
        }

        /**
         * @param warpRouting Enable private network access from WARP users to private network routes. This is enabled if the tunnel has an assigned route.
         * 
         * @return builder
         * 
         */
        public Builder warpRouting(TunnelConfigConfigWarpRoutingArgs warpRouting) {
            return warpRouting(Output.of(warpRouting));
        }

        public TunnelConfigConfigArgs build() {
            return $;
        }
    }

}
