// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.TunnelConfigConfigIngressRuleArgs;
import com.pulumi.cloudflare.inputs.TunnelConfigConfigOriginRequestArgs;
import com.pulumi.cloudflare.inputs.TunnelConfigConfigWarpRoutingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TunnelConfigConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final TunnelConfigConfigArgs Empty = new TunnelConfigConfigArgs();

    /**
     * Each incoming request received by cloudflared causes cloudflared to send a request to a local service. This section configures the rules that determine which requests are sent to which local services. [Read more](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide/local/local-management/ingress/).
     * 
     */
    @Import(name="ingressRules", required=true)
    private Output<List<TunnelConfigConfigIngressRuleArgs>> ingressRules;

    /**
     * @return Each incoming request received by cloudflared causes cloudflared to send a request to a local service. This section configures the rules that determine which requests are sent to which local services. [Read more](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide/local/local-management/ingress/).
     * 
     */
    public Output<List<TunnelConfigConfigIngressRuleArgs>> ingressRules() {
        return this.ingressRules;
    }

    @Import(name="originRequest")
    private @Nullable Output<TunnelConfigConfigOriginRequestArgs> originRequest;

    public Optional<Output<TunnelConfigConfigOriginRequestArgs>> originRequest() {
        return Optional.ofNullable(this.originRequest);
    }

    /**
     * If you&#39;re exposing a [private network](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/private-net/), you need to add the `warp-routing` key and set it to `true`.
     * 
     */
    @Import(name="warpRouting")
    private @Nullable Output<TunnelConfigConfigWarpRoutingArgs> warpRouting;

    /**
     * @return If you&#39;re exposing a [private network](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/private-net/), you need to add the `warp-routing` key and set it to `true`.
     * 
     */
    public Optional<Output<TunnelConfigConfigWarpRoutingArgs>> warpRouting() {
        return Optional.ofNullable(this.warpRouting);
    }

    private TunnelConfigConfigArgs() {}

    private TunnelConfigConfigArgs(TunnelConfigConfigArgs $) {
        this.ingressRules = $.ingressRules;
        this.originRequest = $.originRequest;
        this.warpRouting = $.warpRouting;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TunnelConfigConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TunnelConfigConfigArgs $;

        public Builder() {
            $ = new TunnelConfigConfigArgs();
        }

        public Builder(TunnelConfigConfigArgs defaults) {
            $ = new TunnelConfigConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ingressRules Each incoming request received by cloudflared causes cloudflared to send a request to a local service. This section configures the rules that determine which requests are sent to which local services. [Read more](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide/local/local-management/ingress/).
         * 
         * @return builder
         * 
         */
        public Builder ingressRules(Output<List<TunnelConfigConfigIngressRuleArgs>> ingressRules) {
            $.ingressRules = ingressRules;
            return this;
        }

        /**
         * @param ingressRules Each incoming request received by cloudflared causes cloudflared to send a request to a local service. This section configures the rules that determine which requests are sent to which local services. [Read more](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide/local/local-management/ingress/).
         * 
         * @return builder
         * 
         */
        public Builder ingressRules(List<TunnelConfigConfigIngressRuleArgs> ingressRules) {
            return ingressRules(Output.of(ingressRules));
        }

        /**
         * @param ingressRules Each incoming request received by cloudflared causes cloudflared to send a request to a local service. This section configures the rules that determine which requests are sent to which local services. [Read more](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide/local/local-management/ingress/).
         * 
         * @return builder
         * 
         */
        public Builder ingressRules(TunnelConfigConfigIngressRuleArgs... ingressRules) {
            return ingressRules(List.of(ingressRules));
        }

        public Builder originRequest(@Nullable Output<TunnelConfigConfigOriginRequestArgs> originRequest) {
            $.originRequest = originRequest;
            return this;
        }

        public Builder originRequest(TunnelConfigConfigOriginRequestArgs originRequest) {
            return originRequest(Output.of(originRequest));
        }

        /**
         * @param warpRouting If you&#39;re exposing a [private network](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/private-net/), you need to add the `warp-routing` key and set it to `true`.
         * 
         * @return builder
         * 
         */
        public Builder warpRouting(@Nullable Output<TunnelConfigConfigWarpRoutingArgs> warpRouting) {
            $.warpRouting = warpRouting;
            return this;
        }

        /**
         * @param warpRouting If you&#39;re exposing a [private network](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/private-net/), you need to add the `warp-routing` key and set it to `true`.
         * 
         * @return builder
         * 
         */
        public Builder warpRouting(TunnelConfigConfigWarpRoutingArgs warpRouting) {
            return warpRouting(Output.of(warpRouting));
        }

        public TunnelConfigConfigArgs build() {
            if ($.ingressRules == null) {
                throw new MissingRequiredPropertyException("TunnelConfigConfigArgs", "ingressRules");
            }
            return $;
        }
    }

}
