// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneDnsSettingsNameserversArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneDnsSettingsNameserversArgs Empty = new ZoneDnsSettingsNameserversArgs();

    /**
     * Configured nameserver set to be used for this zone
     * 
     */
    @Import(name="nsSet")
    private @Nullable Output<Integer> nsSet;

    /**
     * @return Configured nameserver set to be used for this zone
     * 
     */
    public Optional<Output<Integer>> nsSet() {
        return Optional.ofNullable(this.nsSet);
    }

    /**
     * Nameserver type
     * Available values: &#34;cloudflare.standard&#34;, &#34;custom.account&#34;, &#34;custom.tenant&#34;, &#34;custom.zone&#34;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Nameserver type
     * Available values: &#34;cloudflare.standard&#34;, &#34;custom.account&#34;, &#34;custom.tenant&#34;, &#34;custom.zone&#34;.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ZoneDnsSettingsNameserversArgs() {}

    private ZoneDnsSettingsNameserversArgs(ZoneDnsSettingsNameserversArgs $) {
        this.nsSet = $.nsSet;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneDnsSettingsNameserversArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneDnsSettingsNameserversArgs $;

        public Builder() {
            $ = new ZoneDnsSettingsNameserversArgs();
        }

        public Builder(ZoneDnsSettingsNameserversArgs defaults) {
            $ = new ZoneDnsSettingsNameserversArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nsSet Configured nameserver set to be used for this zone
         * 
         * @return builder
         * 
         */
        public Builder nsSet(@Nullable Output<Integer> nsSet) {
            $.nsSet = nsSet;
            return this;
        }

        /**
         * @param nsSet Configured nameserver set to be used for this zone
         * 
         * @return builder
         * 
         */
        public Builder nsSet(Integer nsSet) {
            return nsSet(Output.of(nsSet));
        }

        /**
         * @param type Nameserver type
         * Available values: &#34;cloudflare.standard&#34;, &#34;custom.account&#34;, &#34;custom.tenant&#34;, &#34;custom.zone&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Nameserver type
         * Available values: &#34;cloudflare.standard&#34;, &#34;custom.account&#34;, &#34;custom.tenant&#34;, &#34;custom.zone&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ZoneDnsSettingsNameserversArgs build() {
            return $;
        }
    }

}
