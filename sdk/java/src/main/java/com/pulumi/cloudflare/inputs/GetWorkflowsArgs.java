// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetWorkflowsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWorkflowsArgs Empty = new GetWorkflowsArgs();

    @Import(name="accountId", required=true)
    private Output<String> accountId;

    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Max items to fetch, default: 1000
     * 
     */
    @Import(name="maxItems")
    private @Nullable Output<Integer> maxItems;

    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Output<Integer>> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    /**
     * Allows filtering workflows` name.
     * 
     */
    @Import(name="search")
    private @Nullable Output<String> search;

    /**
     * @return Allows filtering workflows` name.
     * 
     */
    public Optional<Output<String>> search() {
        return Optional.ofNullable(this.search);
    }

    private GetWorkflowsArgs() {}

    private GetWorkflowsArgs(GetWorkflowsArgs $) {
        this.accountId = $.accountId;
        this.maxItems = $.maxItems;
        this.search = $.search;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWorkflowsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWorkflowsArgs $;

        public Builder() {
            $ = new GetWorkflowsArgs();
        }

        public Builder(GetWorkflowsArgs defaults) {
            $ = new GetWorkflowsArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(@Nullable Output<Integer> maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(Integer maxItems) {
            return maxItems(Output.of(maxItems));
        }

        /**
         * @param search Allows filtering workflows` name.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable Output<String> search) {
            $.search = search;
            return this;
        }

        /**
         * @param search Allows filtering workflows` name.
         * 
         * @return builder
         * 
         */
        public Builder search(String search) {
            return search(Output.of(search));
        }

        public GetWorkflowsArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GetWorkflowsArgs", "accountId");
            }
            return $;
        }
    }

}
