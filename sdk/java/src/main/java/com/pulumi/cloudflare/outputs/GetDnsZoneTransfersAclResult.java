// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDnsZoneTransfersAclResult {
    private String accountId;
    private @Nullable String aclId;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
     * 
     */
    private String ipRange;
    /**
     * @return The name of the acl.
     * 
     */
    private String name;

    private GetDnsZoneTransfersAclResult() {}
    public String accountId() {
        return this.accountId;
    }
    public Optional<String> aclId() {
        return Optional.ofNullable(this.aclId);
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
     * 
     */
    public String ipRange() {
        return this.ipRange;
    }
    /**
     * @return The name of the acl.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDnsZoneTransfersAclResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private @Nullable String aclId;
        private String id;
        private String ipRange;
        private String name;
        public Builder() {}
        public Builder(GetDnsZoneTransfersAclResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.aclId = defaults.aclId;
    	      this.id = defaults.id;
    	      this.ipRange = defaults.ipRange;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneTransfersAclResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder aclId(@Nullable String aclId) {

            this.aclId = aclId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneTransfersAclResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipRange(String ipRange) {
            if (ipRange == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneTransfersAclResult", "ipRange");
            }
            this.ipRange = ipRange;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneTransfersAclResult", "name");
            }
            this.name = name;
            return this;
        }
        public GetDnsZoneTransfersAclResult build() {
            final var _resultValue = new GetDnsZoneTransfersAclResult();
            _resultValue.accountId = accountId;
            _resultValue.aclId = aclId;
            _resultValue.id = id;
            _resultValue.ipRange = ipRange;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
