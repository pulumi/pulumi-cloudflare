// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.MagicWanStaticRouteScopeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicWanStaticRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicWanStaticRouteArgs Empty = new MagicWanStaticRouteArgs();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * An optional human provided description of the static route.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional human provided description of the static route.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The next-hop IP Address for the static route.
     * 
     */
    @Import(name="nexthop", required=true)
    private Output<String> nexthop;

    /**
     * @return The next-hop IP Address for the static route.
     * 
     */
    public Output<String> nexthop() {
        return this.nexthop;
    }

    /**
     * IP Prefix in Classless Inter-Domain Routing format.
     * 
     */
    @Import(name="prefix", required=true)
    private Output<String> prefix;

    /**
     * @return IP Prefix in Classless Inter-Domain Routing format.
     * 
     */
    public Output<String> prefix() {
        return this.prefix;
    }

    /**
     * Priority of the static route.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return Priority of the static route.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * Used only for ECMP routes.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<MagicWanStaticRouteScopeArgs> scope;

    /**
     * @return Used only for ECMP routes.
     * 
     */
    public Optional<Output<MagicWanStaticRouteScopeArgs>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Optional weight of the ECMP scope - if provided.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return Optional weight of the ECMP scope - if provided.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private MagicWanStaticRouteArgs() {}

    private MagicWanStaticRouteArgs(MagicWanStaticRouteArgs $) {
        this.accountId = $.accountId;
        this.description = $.description;
        this.nexthop = $.nexthop;
        this.prefix = $.prefix;
        this.priority = $.priority;
        this.scope = $.scope;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicWanStaticRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicWanStaticRouteArgs $;

        public Builder() {
            $ = new MagicWanStaticRouteArgs();
        }

        public Builder(MagicWanStaticRouteArgs defaults) {
            $ = new MagicWanStaticRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param description An optional human provided description of the static route.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional human provided description of the static route.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param nexthop The next-hop IP Address for the static route.
         * 
         * @return builder
         * 
         */
        public Builder nexthop(Output<String> nexthop) {
            $.nexthop = nexthop;
            return this;
        }

        /**
         * @param nexthop The next-hop IP Address for the static route.
         * 
         * @return builder
         * 
         */
        public Builder nexthop(String nexthop) {
            return nexthop(Output.of(nexthop));
        }

        /**
         * @param prefix IP Prefix in Classless Inter-Domain Routing format.
         * 
         * @return builder
         * 
         */
        public Builder prefix(Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix IP Prefix in Classless Inter-Domain Routing format.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param priority Priority of the static route.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority of the static route.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param scope Used only for ECMP routes.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<MagicWanStaticRouteScopeArgs> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Used only for ECMP routes.
         * 
         * @return builder
         * 
         */
        public Builder scope(MagicWanStaticRouteScopeArgs scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param weight Optional weight of the ECMP scope - if provided.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight Optional weight of the ECMP scope - if provided.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public MagicWanStaticRouteArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("MagicWanStaticRouteArgs", "accountId");
            }
            if ($.nexthop == null) {
                throw new MissingRequiredPropertyException("MagicWanStaticRouteArgs", "nexthop");
            }
            if ($.prefix == null) {
                throw new MissingRequiredPropertyException("MagicWanStaticRouteArgs", "prefix");
            }
            if ($.priority == null) {
                throw new MissingRequiredPropertyException("MagicWanStaticRouteArgs", "priority");
            }
            return $;
        }
    }

}
