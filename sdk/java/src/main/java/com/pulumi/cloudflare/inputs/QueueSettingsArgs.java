// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueSettingsArgs Empty = new QueueSettingsArgs();

    /**
     * Number of seconds to delay delivery of all messages to consumers.
     * 
     */
    @Import(name="deliveryDelay")
    private @Nullable Output<Double> deliveryDelay;

    /**
     * @return Number of seconds to delay delivery of all messages to consumers.
     * 
     */
    public Optional<Output<Double>> deliveryDelay() {
        return Optional.ofNullable(this.deliveryDelay);
    }

    /**
     * Indicates if message delivery to consumers is currently paused.
     * 
     */
    @Import(name="deliveryPaused")
    private @Nullable Output<Boolean> deliveryPaused;

    /**
     * @return Indicates if message delivery to consumers is currently paused.
     * 
     */
    public Optional<Output<Boolean>> deliveryPaused() {
        return Optional.ofNullable(this.deliveryPaused);
    }

    /**
     * Number of seconds after which an unconsumed message will be delayed.
     * 
     */
    @Import(name="messageRetentionPeriod")
    private @Nullable Output<Double> messageRetentionPeriod;

    /**
     * @return Number of seconds after which an unconsumed message will be delayed.
     * 
     */
    public Optional<Output<Double>> messageRetentionPeriod() {
        return Optional.ofNullable(this.messageRetentionPeriod);
    }

    private QueueSettingsArgs() {}

    private QueueSettingsArgs(QueueSettingsArgs $) {
        this.deliveryDelay = $.deliveryDelay;
        this.deliveryPaused = $.deliveryPaused;
        this.messageRetentionPeriod = $.messageRetentionPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueSettingsArgs $;

        public Builder() {
            $ = new QueueSettingsArgs();
        }

        public Builder(QueueSettingsArgs defaults) {
            $ = new QueueSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deliveryDelay Number of seconds to delay delivery of all messages to consumers.
         * 
         * @return builder
         * 
         */
        public Builder deliveryDelay(@Nullable Output<Double> deliveryDelay) {
            $.deliveryDelay = deliveryDelay;
            return this;
        }

        /**
         * @param deliveryDelay Number of seconds to delay delivery of all messages to consumers.
         * 
         * @return builder
         * 
         */
        public Builder deliveryDelay(Double deliveryDelay) {
            return deliveryDelay(Output.of(deliveryDelay));
        }

        /**
         * @param deliveryPaused Indicates if message delivery to consumers is currently paused.
         * 
         * @return builder
         * 
         */
        public Builder deliveryPaused(@Nullable Output<Boolean> deliveryPaused) {
            $.deliveryPaused = deliveryPaused;
            return this;
        }

        /**
         * @param deliveryPaused Indicates if message delivery to consumers is currently paused.
         * 
         * @return builder
         * 
         */
        public Builder deliveryPaused(Boolean deliveryPaused) {
            return deliveryPaused(Output.of(deliveryPaused));
        }

        /**
         * @param messageRetentionPeriod Number of seconds after which an unconsumed message will be delayed.
         * 
         * @return builder
         * 
         */
        public Builder messageRetentionPeriod(@Nullable Output<Double> messageRetentionPeriod) {
            $.messageRetentionPeriod = messageRetentionPeriod;
            return this;
        }

        /**
         * @param messageRetentionPeriod Number of seconds after which an unconsumed message will be delayed.
         * 
         * @return builder
         * 
         */
        public Builder messageRetentionPeriod(Double messageRetentionPeriod) {
            return messageRetentionPeriod(Output.of(messageRetentionPeriod));
        }

        public QueueSettingsArgs build() {
            return $;
        }
    }

}
