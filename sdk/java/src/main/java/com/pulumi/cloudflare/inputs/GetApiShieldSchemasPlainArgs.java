// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetApiShieldSchemasPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetApiShieldSchemasPlainArgs Empty = new GetApiShieldSchemasPlainArgs();

    /**
     * Max items to fetch, default: 1000
     * 
     */
    @Import(name="maxItems")
    private @Nullable Integer maxItems;

    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Integer> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    /**
     * Omit the source-files of schemas and only retrieve their meta-data.
     * 
     */
    @Import(name="omitSource")
    private @Nullable Boolean omitSource;

    /**
     * @return Omit the source-files of schemas and only retrieve their meta-data.
     * 
     */
    public Optional<Boolean> omitSource() {
        return Optional.ofNullable(this.omitSource);
    }

    /**
     * Flag whether schema is enabled for validation.
     * 
     */
    @Import(name="validationEnabled")
    private @Nullable Boolean validationEnabled;

    /**
     * @return Flag whether schema is enabled for validation.
     * 
     */
    public Optional<Boolean> validationEnabled() {
        return Optional.ofNullable(this.validationEnabled);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private String zoneId;

    /**
     * @return Identifier.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    private GetApiShieldSchemasPlainArgs() {}

    private GetApiShieldSchemasPlainArgs(GetApiShieldSchemasPlainArgs $) {
        this.maxItems = $.maxItems;
        this.omitSource = $.omitSource;
        this.validationEnabled = $.validationEnabled;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetApiShieldSchemasPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetApiShieldSchemasPlainArgs $;

        public Builder() {
            $ = new GetApiShieldSchemasPlainArgs();
        }

        public Builder(GetApiShieldSchemasPlainArgs defaults) {
            $ = new GetApiShieldSchemasPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(@Nullable Integer maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        /**
         * @param omitSource Omit the source-files of schemas and only retrieve their meta-data.
         * 
         * @return builder
         * 
         */
        public Builder omitSource(@Nullable Boolean omitSource) {
            $.omitSource = omitSource;
            return this;
        }

        /**
         * @param validationEnabled Flag whether schema is enabled for validation.
         * 
         * @return builder
         * 
         */
        public Builder validationEnabled(@Nullable Boolean validationEnabled) {
            $.validationEnabled = validationEnabled;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        public GetApiShieldSchemasPlainArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetApiShieldSchemasPlainArgs", "zoneId");
            }
            return $;
        }
    }

}
