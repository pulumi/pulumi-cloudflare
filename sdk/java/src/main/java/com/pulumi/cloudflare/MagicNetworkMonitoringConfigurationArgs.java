// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.MagicNetworkMonitoringConfigurationWarpDeviceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicNetworkMonitoringConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicNetworkMonitoringConfigurationArgs Empty = new MagicNetworkMonitoringConfigurationArgs();

    @Import(name="accountId", required=true)
    private Output<String> accountId;

    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
     * 
     */
    @Import(name="defaultSampling")
    private @Nullable Output<Double> defaultSampling;

    /**
     * @return Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
     * 
     */
    public Optional<Output<Double>> defaultSampling() {
        return Optional.ofNullable(this.defaultSampling);
    }

    /**
     * The account name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The account name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="routerIps")
    private @Nullable Output<List<String>> routerIps;

    public Optional<Output<List<String>>> routerIps() {
        return Optional.ofNullable(this.routerIps);
    }

    @Import(name="warpDevices")
    private @Nullable Output<List<MagicNetworkMonitoringConfigurationWarpDeviceArgs>> warpDevices;

    public Optional<Output<List<MagicNetworkMonitoringConfigurationWarpDeviceArgs>>> warpDevices() {
        return Optional.ofNullable(this.warpDevices);
    }

    private MagicNetworkMonitoringConfigurationArgs() {}

    private MagicNetworkMonitoringConfigurationArgs(MagicNetworkMonitoringConfigurationArgs $) {
        this.accountId = $.accountId;
        this.defaultSampling = $.defaultSampling;
        this.name = $.name;
        this.routerIps = $.routerIps;
        this.warpDevices = $.warpDevices;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicNetworkMonitoringConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicNetworkMonitoringConfigurationArgs $;

        public Builder() {
            $ = new MagicNetworkMonitoringConfigurationArgs();
        }

        public Builder(MagicNetworkMonitoringConfigurationArgs defaults) {
            $ = new MagicNetworkMonitoringConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param defaultSampling Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
         * 
         * @return builder
         * 
         */
        public Builder defaultSampling(@Nullable Output<Double> defaultSampling) {
            $.defaultSampling = defaultSampling;
            return this;
        }

        /**
         * @param defaultSampling Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
         * 
         * @return builder
         * 
         */
        public Builder defaultSampling(Double defaultSampling) {
            return defaultSampling(Output.of(defaultSampling));
        }

        /**
         * @param name The account name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The account name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder routerIps(@Nullable Output<List<String>> routerIps) {
            $.routerIps = routerIps;
            return this;
        }

        public Builder routerIps(List<String> routerIps) {
            return routerIps(Output.of(routerIps));
        }

        public Builder routerIps(String... routerIps) {
            return routerIps(List.of(routerIps));
        }

        public Builder warpDevices(@Nullable Output<List<MagicNetworkMonitoringConfigurationWarpDeviceArgs>> warpDevices) {
            $.warpDevices = warpDevices;
            return this;
        }

        public Builder warpDevices(List<MagicNetworkMonitoringConfigurationWarpDeviceArgs> warpDevices) {
            return warpDevices(Output.of(warpDevices));
        }

        public Builder warpDevices(MagicNetworkMonitoringConfigurationWarpDeviceArgs... warpDevices) {
            return warpDevices(List.of(warpDevices));
        }

        public MagicNetworkMonitoringConfigurationArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("MagicNetworkMonitoringConfigurationArgs", "accountId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("MagicNetworkMonitoringConfigurationArgs", "name");
            }
            return $;
        }
    }

}
