// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class R2BucketSippySourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final R2BucketSippySourceArgs Empty = new R2BucketSippySourceArgs();

    /**
     * Access Key ID of an IAM credential (ideally scoped to a single S3 bucket)
     * 
     */
    @Import(name="accessKeyId")
    private @Nullable Output<String> accessKeyId;

    /**
     * @return Access Key ID of an IAM credential (ideally scoped to a single S3 bucket)
     * 
     */
    public Optional<Output<String>> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    /**
     * Name of the AWS S3 bucket
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return Name of the AWS S3 bucket
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * Client email of an IAM credential (ideally scoped to a single GCS bucket)
     * 
     */
    @Import(name="clientEmail")
    private @Nullable Output<String> clientEmail;

    /**
     * @return Client email of an IAM credential (ideally scoped to a single GCS bucket)
     * 
     */
    public Optional<Output<String>> clientEmail() {
        return Optional.ofNullable(this.clientEmail);
    }

    /**
     * Private Key of an IAM credential (ideally scoped to a single GCS bucket)
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return Private Key of an IAM credential (ideally scoped to a single GCS bucket)
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * Available values: &#34;aws&#34;.
     * 
     */
    @Import(name="provider")
    private @Nullable Output<String> provider;

    /**
     * @return Available values: &#34;aws&#34;.
     * 
     */
    public Optional<Output<String>> provider() {
        return Optional.ofNullable(this.provider);
    }

    /**
     * Name of the AWS availability zone
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Name of the AWS availability zone
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Secret Access Key of an IAM credential (ideally scoped to a single S3 bucket)
     * 
     */
    @Import(name="secretAccessKey")
    private @Nullable Output<String> secretAccessKey;

    /**
     * @return Secret Access Key of an IAM credential (ideally scoped to a single S3 bucket)
     * 
     */
    public Optional<Output<String>> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }

    private R2BucketSippySourceArgs() {}

    private R2BucketSippySourceArgs(R2BucketSippySourceArgs $) {
        this.accessKeyId = $.accessKeyId;
        this.bucket = $.bucket;
        this.clientEmail = $.clientEmail;
        this.privateKey = $.privateKey;
        this.provider = $.provider;
        this.region = $.region;
        this.secretAccessKey = $.secretAccessKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(R2BucketSippySourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private R2BucketSippySourceArgs $;

        public Builder() {
            $ = new R2BucketSippySourceArgs();
        }

        public Builder(R2BucketSippySourceArgs defaults) {
            $ = new R2BucketSippySourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId Access Key ID of an IAM credential (ideally scoped to a single S3 bucket)
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(@Nullable Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId Access Key ID of an IAM credential (ideally scoped to a single S3 bucket)
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param bucket Name of the AWS S3 bucket
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Name of the AWS S3 bucket
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param clientEmail Client email of an IAM credential (ideally scoped to a single GCS bucket)
         * 
         * @return builder
         * 
         */
        public Builder clientEmail(@Nullable Output<String> clientEmail) {
            $.clientEmail = clientEmail;
            return this;
        }

        /**
         * @param clientEmail Client email of an IAM credential (ideally scoped to a single GCS bucket)
         * 
         * @return builder
         * 
         */
        public Builder clientEmail(String clientEmail) {
            return clientEmail(Output.of(clientEmail));
        }

        /**
         * @param privateKey Private Key of an IAM credential (ideally scoped to a single GCS bucket)
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey Private Key of an IAM credential (ideally scoped to a single GCS bucket)
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param provider Available values: &#34;aws&#34;.
         * 
         * @return builder
         * 
         */
        public Builder provider(@Nullable Output<String> provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param provider Available values: &#34;aws&#34;.
         * 
         * @return builder
         * 
         */
        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        /**
         * @param region Name of the AWS availability zone
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Name of the AWS availability zone
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretAccessKey Secret Access Key of an IAM credential (ideally scoped to a single S3 bucket)
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(@Nullable Output<String> secretAccessKey) {
            $.secretAccessKey = secretAccessKey;
            return this;
        }

        /**
         * @param secretAccessKey Secret Access Key of an IAM credential (ideally scoped to a single S3 bucket)
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(String secretAccessKey) {
            return secretAccessKey(Output.of(secretAccessKey));
        }

        public R2BucketSippySourceArgs build() {
            return $;
        }
    }

}
