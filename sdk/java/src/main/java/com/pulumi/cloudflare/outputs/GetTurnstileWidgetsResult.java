// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTurnstileWidgetsResult {
    /**
     * @return If bot*fight*mode is set to `true`, Cloudflare issues computationally
     * expensive challenges in response to malicious bots (ENT only).
     * 
     */
    private Boolean botFightMode;
    /**
     * @return If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
     * this setting can determine the clearance level to be set
     * Available values: &#34;no_clearance&#34;, &#34;jschallenge&#34;, &#34;managed&#34;, &#34;interactive&#34;.
     * 
     */
    private String clearanceLevel;
    /**
     * @return When the widget was created.
     * 
     */
    private String createdOn;
    private List<String> domains;
    /**
     * @return Return the Ephemeral ID in /siteverify (ENT only).
     * 
     */
    private Boolean ephemeralId;
    /**
     * @return Widget Mode
     * Available values: &#34;non-interactive&#34;, &#34;invisible&#34;, &#34;managed&#34;.
     * 
     */
    private String mode;
    /**
     * @return When the widget was modified.
     * 
     */
    private String modifiedOn;
    /**
     * @return Human readable widget name. Not unique. Cloudflare suggests that you
     * set this to a meaningful string to make it easier to identify your
     * widget, and where it is used.
     * 
     */
    private String name;
    /**
     * @return Do not show any Cloudflare branding on the widget (ENT only).
     * 
     */
    private Boolean offlabel;
    /**
     * @return Region where this widget can be used.
     * Available values: &#34;world&#34;.
     * 
     */
    private String region;
    /**
     * @return Widget item identifier tag.
     * 
     */
    private String sitekey;

    private GetTurnstileWidgetsResult() {}
    /**
     * @return If bot*fight*mode is set to `true`, Cloudflare issues computationally
     * expensive challenges in response to malicious bots (ENT only).
     * 
     */
    public Boolean botFightMode() {
        return this.botFightMode;
    }
    /**
     * @return If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
     * this setting can determine the clearance level to be set
     * Available values: &#34;no_clearance&#34;, &#34;jschallenge&#34;, &#34;managed&#34;, &#34;interactive&#34;.
     * 
     */
    public String clearanceLevel() {
        return this.clearanceLevel;
    }
    /**
     * @return When the widget was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    public List<String> domains() {
        return this.domains;
    }
    /**
     * @return Return the Ephemeral ID in /siteverify (ENT only).
     * 
     */
    public Boolean ephemeralId() {
        return this.ephemeralId;
    }
    /**
     * @return Widget Mode
     * Available values: &#34;non-interactive&#34;, &#34;invisible&#34;, &#34;managed&#34;.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return When the widget was modified.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return Human readable widget name. Not unique. Cloudflare suggests that you
     * set this to a meaningful string to make it easier to identify your
     * widget, and where it is used.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Do not show any Cloudflare branding on the widget (ENT only).
     * 
     */
    public Boolean offlabel() {
        return this.offlabel;
    }
    /**
     * @return Region where this widget can be used.
     * Available values: &#34;world&#34;.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Widget item identifier tag.
     * 
     */
    public String sitekey() {
        return this.sitekey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTurnstileWidgetsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean botFightMode;
        private String clearanceLevel;
        private String createdOn;
        private List<String> domains;
        private Boolean ephemeralId;
        private String mode;
        private String modifiedOn;
        private String name;
        private Boolean offlabel;
        private String region;
        private String sitekey;
        public Builder() {}
        public Builder(GetTurnstileWidgetsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.botFightMode = defaults.botFightMode;
    	      this.clearanceLevel = defaults.clearanceLevel;
    	      this.createdOn = defaults.createdOn;
    	      this.domains = defaults.domains;
    	      this.ephemeralId = defaults.ephemeralId;
    	      this.mode = defaults.mode;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.name = defaults.name;
    	      this.offlabel = defaults.offlabel;
    	      this.region = defaults.region;
    	      this.sitekey = defaults.sitekey;
        }

        @CustomType.Setter
        public Builder botFightMode(Boolean botFightMode) {
            if (botFightMode == null) {
              throw new MissingRequiredPropertyException("GetTurnstileWidgetsResult", "botFightMode");
            }
            this.botFightMode = botFightMode;
            return this;
        }
        @CustomType.Setter
        public Builder clearanceLevel(String clearanceLevel) {
            if (clearanceLevel == null) {
              throw new MissingRequiredPropertyException("GetTurnstileWidgetsResult", "clearanceLevel");
            }
            this.clearanceLevel = clearanceLevel;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetTurnstileWidgetsResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder domains(List<String> domains) {
            if (domains == null) {
              throw new MissingRequiredPropertyException("GetTurnstileWidgetsResult", "domains");
            }
            this.domains = domains;
            return this;
        }
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }
        @CustomType.Setter
        public Builder ephemeralId(Boolean ephemeralId) {
            if (ephemeralId == null) {
              throw new MissingRequiredPropertyException("GetTurnstileWidgetsResult", "ephemeralId");
            }
            this.ephemeralId = ephemeralId;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetTurnstileWidgetsResult", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetTurnstileWidgetsResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTurnstileWidgetsResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder offlabel(Boolean offlabel) {
            if (offlabel == null) {
              throw new MissingRequiredPropertyException("GetTurnstileWidgetsResult", "offlabel");
            }
            this.offlabel = offlabel;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetTurnstileWidgetsResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder sitekey(String sitekey) {
            if (sitekey == null) {
              throw new MissingRequiredPropertyException("GetTurnstileWidgetsResult", "sitekey");
            }
            this.sitekey = sitekey;
            return this;
        }
        public GetTurnstileWidgetsResult build() {
            final var _resultValue = new GetTurnstileWidgetsResult();
            _resultValue.botFightMode = botFightMode;
            _resultValue.clearanceLevel = clearanceLevel;
            _resultValue.createdOn = createdOn;
            _resultValue.domains = domains;
            _resultValue.ephemeralId = ephemeralId;
            _resultValue.mode = mode;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.name = name;
            _resultValue.offlabel = offlabel;
            _resultValue.region = region;
            _resultValue.sitekey = sitekey;
            return _resultValue;
        }
    }
}
