// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsAuditSshArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsBlockPageArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsCheckSessionArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsDnsResolversArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsEgressArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsL4overrideArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsNotificationSettingsArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsPayloadLogArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsQuarantineArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsRedirectArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsUntrustedCertArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustGatewayPolicyRuleSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustGatewayPolicyRuleSettingsArgs Empty = new ZeroTrustGatewayPolicyRuleSettingsArgs();

    /**
     * Add custom headers to allowed requests as key-value pairs. Use header names as keys that map to arrays of header values. Settable only for `http` rules with the action set to `allow`.
     * 
     */
    @Import(name="addHeaders")
    private @Nullable Output<Map<String,List<String>>> addHeaders;

    /**
     * @return Add custom headers to allowed requests as key-value pairs. Use header names as keys that map to arrays of header values. Settable only for `http` rules with the action set to `allow`.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> addHeaders() {
        return Optional.ofNullable(this.addHeaders);
    }

    /**
     * Set to enable MSP children to bypass this rule. Only parent MSP accounts can set this. this rule. Settable for all types of rules.
     * 
     */
    @Import(name="allowChildBypass")
    private @Nullable Output<Boolean> allowChildBypass;

    /**
     * @return Set to enable MSP children to bypass this rule. Only parent MSP accounts can set this. this rule. Settable for all types of rules.
     * 
     */
    public Optional<Output<Boolean>> allowChildBypass() {
        return Optional.ofNullable(this.allowChildBypass);
    }

    /**
     * Define the settings for the Audit SSH action. Settable only for `l4` rules with `auditSsh` action.
     * 
     */
    @Import(name="auditSsh")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsAuditSshArgs> auditSsh;

    /**
     * @return Define the settings for the Audit SSH action. Settable only for `l4` rules with `auditSsh` action.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsAuditSshArgs>> auditSsh() {
        return Optional.ofNullable(this.auditSsh);
    }

    /**
     * Configure browser isolation behavior. Settable only for `http` rules with the action set to `isolate`.
     * 
     */
    @Import(name="bisoAdminControls")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsArgs> bisoAdminControls;

    /**
     * @return Configure browser isolation behavior. Settable only for `http` rules with the action set to `isolate`.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsArgs>> bisoAdminControls() {
        return Optional.ofNullable(this.bisoAdminControls);
    }

    /**
     * Configure custom block page settings. If missing or null, use the account settings. Settable only for `http` rules with the action set to `block`.
     * 
     */
    @Import(name="blockPage")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsBlockPageArgs> blockPage;

    /**
     * @return Configure custom block page settings. If missing or null, use the account settings. Settable only for `http` rules with the action set to `block`.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsBlockPageArgs>> blockPage() {
        return Optional.ofNullable(this.blockPage);
    }

    /**
     * Enable the custom block page. Settable only for `dns` rules with action `block`.
     * 
     */
    @Import(name="blockPageEnabled")
    private @Nullable Output<Boolean> blockPageEnabled;

    /**
     * @return Enable the custom block page. Settable only for `dns` rules with action `block`.
     * 
     */
    public Optional<Output<Boolean>> blockPageEnabled() {
        return Optional.ofNullable(this.blockPageEnabled);
    }

    /**
     * Explain why the rule blocks the request. The custom block page shows this text (if enabled). Settable only for `dns`, `l4`, and `http` rules when the action set to `block`.
     * 
     */
    @Import(name="blockReason")
    private @Nullable Output<String> blockReason;

    /**
     * @return Explain why the rule blocks the request. The custom block page shows this text (if enabled). Settable only for `dns`, `l4`, and `http` rules when the action set to `block`.
     * 
     */
    public Optional<Output<String>> blockReason() {
        return Optional.ofNullable(this.blockReason);
    }

    /**
     * Set to enable MSP accounts to bypass their parent&#39;s rules. Only MSP child accounts can set this. Settable for all types of rules.
     * 
     */
    @Import(name="bypassParentRule")
    private @Nullable Output<Boolean> bypassParentRule;

    /**
     * @return Set to enable MSP accounts to bypass their parent&#39;s rules. Only MSP child accounts can set this. Settable for all types of rules.
     * 
     */
    public Optional<Output<Boolean>> bypassParentRule() {
        return Optional.ofNullable(this.bypassParentRule);
    }

    /**
     * Configure session check behavior. Settable only for `l4` and `http` rules with the action set to `allow`.
     * 
     */
    @Import(name="checkSession")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsCheckSessionArgs> checkSession;

    /**
     * @return Configure session check behavior. Settable only for `l4` and `http` rules with the action set to `allow`.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsCheckSessionArgs>> checkSession() {
        return Optional.ofNullable(this.checkSession);
    }

    /**
     * Configure custom resolvers to route queries that match the resolver policy. Unused with &#39;resolve*dns*through*cloudflare&#39; or &#39;resolve*dns*internally&#39; settings. DNS queries get routed to the address closest to their origin. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    @Import(name="dnsResolvers")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsDnsResolversArgs> dnsResolvers;

    /**
     * @return Configure custom resolvers to route queries that match the resolver policy. Unused with &#39;resolve*dns*through*cloudflare&#39; or &#39;resolve*dns*internally&#39; settings. DNS queries get routed to the address closest to their origin. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsDnsResolversArgs>> dnsResolvers() {
        return Optional.ofNullable(this.dnsResolvers);
    }

    /**
     * Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs. Settable only for `egress` rules.
     * 
     */
    @Import(name="egress")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsEgressArgs> egress;

    /**
     * @return Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs. Settable only for `egress` rules.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsEgressArgs>> egress() {
        return Optional.ofNullable(this.egress);
    }

    /**
     * Ignore category matches at CNAME domains in a response. When off, evaluate categories in this rule against all CNAME domain categories in the response. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    @Import(name="ignoreCnameCategoryMatches")
    private @Nullable Output<Boolean> ignoreCnameCategoryMatches;

    /**
     * @return Ignore category matches at CNAME domains in a response. When off, evaluate categories in this rule against all CNAME domain categories in the response. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    public Optional<Output<Boolean>> ignoreCnameCategoryMatches() {
        return Optional.ofNullable(this.ignoreCnameCategoryMatches);
    }

    /**
     * Specify whether to disable DNSSEC validation (for Allow actions) [INSECURE]. Settable only for `dns` rules.
     * 
     */
    @Import(name="insecureDisableDnssecValidation")
    private @Nullable Output<Boolean> insecureDisableDnssecValidation;

    /**
     * @return Specify whether to disable DNSSEC validation (for Allow actions) [INSECURE]. Settable only for `dns` rules.
     * 
     */
    public Optional<Output<Boolean>> insecureDisableDnssecValidation() {
        return Optional.ofNullable(this.insecureDisableDnssecValidation);
    }

    /**
     * Enable IPs in DNS resolver category blocks. The system blocks only domain name categories unless you enable this setting. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    @Import(name="ipCategories")
    private @Nullable Output<Boolean> ipCategories;

    /**
     * @return Enable IPs in DNS resolver category blocks. The system blocks only domain name categories unless you enable this setting. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    public Optional<Output<Boolean>> ipCategories() {
        return Optional.ofNullable(this.ipCategories);
    }

    /**
     * Indicates whether to include IPs in DNS resolver indicator feed blocks. Default, indicator feeds block only domain names. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    @Import(name="ipIndicatorFeeds")
    private @Nullable Output<Boolean> ipIndicatorFeeds;

    /**
     * @return Indicates whether to include IPs in DNS resolver indicator feed blocks. Default, indicator feeds block only domain names. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    public Optional<Output<Boolean>> ipIndicatorFeeds() {
        return Optional.ofNullable(this.ipIndicatorFeeds);
    }

    /**
     * Send matching traffic to the supplied destination IP address and port. Settable only for `l4` rules with the action set to `l4Override`.
     * 
     */
    @Import(name="l4override")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsL4overrideArgs> l4override;

    /**
     * @return Send matching traffic to the supplied destination IP address and port. Settable only for `l4` rules with the action set to `l4Override`.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsL4overrideArgs>> l4override() {
        return Optional.ofNullable(this.l4override);
    }

    /**
     * Configure a notification to display on the user&#39;s device when this rule matched. Settable for all types of rules with the action set to `block`.
     * 
     */
    @Import(name="notificationSettings")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsNotificationSettingsArgs> notificationSettings;

    /**
     * @return Configure a notification to display on the user&#39;s device when this rule matched. Settable for all types of rules with the action set to `block`.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsNotificationSettingsArgs>> notificationSettings() {
        return Optional.ofNullable(this.notificationSettings);
    }

    /**
     * Defines a hostname for override, for the matching DNS queries. Settable only for `dns` rules with the action set to `override`.
     * 
     */
    @Import(name="overrideHost")
    private @Nullable Output<String> overrideHost;

    /**
     * @return Defines a hostname for override, for the matching DNS queries. Settable only for `dns` rules with the action set to `override`.
     * 
     */
    public Optional<Output<String>> overrideHost() {
        return Optional.ofNullable(this.overrideHost);
    }

    /**
     * Defines a an IP or set of IPs for overriding matched DNS queries. Settable only for `dns` rules with the action set to `override`.
     * 
     */
    @Import(name="overrideIps")
    private @Nullable Output<List<String>> overrideIps;

    /**
     * @return Defines a an IP or set of IPs for overriding matched DNS queries. Settable only for `dns` rules with the action set to `override`.
     * 
     */
    public Optional<Output<List<String>>> overrideIps() {
        return Optional.ofNullable(this.overrideIps);
    }

    /**
     * Configure DLP payload logging. Settable only for `http` rules.
     * 
     */
    @Import(name="payloadLog")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsPayloadLogArgs> payloadLog;

    /**
     * @return Configure DLP payload logging. Settable only for `http` rules.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsPayloadLogArgs>> payloadLog() {
        return Optional.ofNullable(this.payloadLog);
    }

    /**
     * Configure settings that apply to quarantine rules. Settable only for `http` rules.
     * 
     */
    @Import(name="quarantine")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsQuarantineArgs> quarantine;

    /**
     * @return Configure settings that apply to quarantine rules. Settable only for `http` rules.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsQuarantineArgs>> quarantine() {
        return Optional.ofNullable(this.quarantine);
    }

    /**
     * Apply settings to redirect rules. Settable only for `http` rules with the action set to `redirect`.
     * 
     */
    @Import(name="redirect")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsRedirectArgs> redirect;

    /**
     * @return Apply settings to redirect rules. Settable only for `http` rules with the action set to `redirect`.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsRedirectArgs>> redirect() {
        return Optional.ofNullable(this.redirect);
    }

    /**
     * Configure to forward the query to the internal DNS service, passing the specified &#39;view*id&#39; as input. Not used when &#39;dns*resolvers&#39; is specified or &#39;resolve*dns*through*cloudflare&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    @Import(name="resolveDnsInternally")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs> resolveDnsInternally;

    /**
     * @return Configure to forward the query to the internal DNS service, passing the specified &#39;view*id&#39; as input. Not used when &#39;dns*resolvers&#39; is specified or &#39;resolve*dns*through*cloudflare&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs>> resolveDnsInternally() {
        return Optional.ofNullable(this.resolveDnsInternally);
    }

    /**
     * Enable to send queries that match the policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot set when &#39;dns*resolvers&#39; specified or &#39;resolve*dns_internally&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    @Import(name="resolveDnsThroughCloudflare")
    private @Nullable Output<Boolean> resolveDnsThroughCloudflare;

    /**
     * @return Enable to send queries that match the policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot set when &#39;dns*resolvers&#39; specified or &#39;resolve*dns_internally&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    public Optional<Output<Boolean>> resolveDnsThroughCloudflare() {
        return Optional.ofNullable(this.resolveDnsThroughCloudflare);
    }

    /**
     * Configure behavior when an upstream certificate is invalid or an SSL error occurs. Settable only for `http` rules with the action set to `allow`.
     * 
     */
    @Import(name="untrustedCert")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsUntrustedCertArgs> untrustedCert;

    /**
     * @return Configure behavior when an upstream certificate is invalid or an SSL error occurs. Settable only for `http` rules with the action set to `allow`.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsUntrustedCertArgs>> untrustedCert() {
        return Optional.ofNullable(this.untrustedCert);
    }

    private ZeroTrustGatewayPolicyRuleSettingsArgs() {}

    private ZeroTrustGatewayPolicyRuleSettingsArgs(ZeroTrustGatewayPolicyRuleSettingsArgs $) {
        this.addHeaders = $.addHeaders;
        this.allowChildBypass = $.allowChildBypass;
        this.auditSsh = $.auditSsh;
        this.bisoAdminControls = $.bisoAdminControls;
        this.blockPage = $.blockPage;
        this.blockPageEnabled = $.blockPageEnabled;
        this.blockReason = $.blockReason;
        this.bypassParentRule = $.bypassParentRule;
        this.checkSession = $.checkSession;
        this.dnsResolvers = $.dnsResolvers;
        this.egress = $.egress;
        this.ignoreCnameCategoryMatches = $.ignoreCnameCategoryMatches;
        this.insecureDisableDnssecValidation = $.insecureDisableDnssecValidation;
        this.ipCategories = $.ipCategories;
        this.ipIndicatorFeeds = $.ipIndicatorFeeds;
        this.l4override = $.l4override;
        this.notificationSettings = $.notificationSettings;
        this.overrideHost = $.overrideHost;
        this.overrideIps = $.overrideIps;
        this.payloadLog = $.payloadLog;
        this.quarantine = $.quarantine;
        this.redirect = $.redirect;
        this.resolveDnsInternally = $.resolveDnsInternally;
        this.resolveDnsThroughCloudflare = $.resolveDnsThroughCloudflare;
        this.untrustedCert = $.untrustedCert;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustGatewayPolicyRuleSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustGatewayPolicyRuleSettingsArgs $;

        public Builder() {
            $ = new ZeroTrustGatewayPolicyRuleSettingsArgs();
        }

        public Builder(ZeroTrustGatewayPolicyRuleSettingsArgs defaults) {
            $ = new ZeroTrustGatewayPolicyRuleSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addHeaders Add custom headers to allowed requests as key-value pairs. Use header names as keys that map to arrays of header values. Settable only for `http` rules with the action set to `allow`.
         * 
         * @return builder
         * 
         */
        public Builder addHeaders(@Nullable Output<Map<String,List<String>>> addHeaders) {
            $.addHeaders = addHeaders;
            return this;
        }

        /**
         * @param addHeaders Add custom headers to allowed requests as key-value pairs. Use header names as keys that map to arrays of header values. Settable only for `http` rules with the action set to `allow`.
         * 
         * @return builder
         * 
         */
        public Builder addHeaders(Map<String,List<String>> addHeaders) {
            return addHeaders(Output.of(addHeaders));
        }

        /**
         * @param allowChildBypass Set to enable MSP children to bypass this rule. Only parent MSP accounts can set this. this rule. Settable for all types of rules.
         * 
         * @return builder
         * 
         */
        public Builder allowChildBypass(@Nullable Output<Boolean> allowChildBypass) {
            $.allowChildBypass = allowChildBypass;
            return this;
        }

        /**
         * @param allowChildBypass Set to enable MSP children to bypass this rule. Only parent MSP accounts can set this. this rule. Settable for all types of rules.
         * 
         * @return builder
         * 
         */
        public Builder allowChildBypass(Boolean allowChildBypass) {
            return allowChildBypass(Output.of(allowChildBypass));
        }

        /**
         * @param auditSsh Define the settings for the Audit SSH action. Settable only for `l4` rules with `auditSsh` action.
         * 
         * @return builder
         * 
         */
        public Builder auditSsh(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsAuditSshArgs> auditSsh) {
            $.auditSsh = auditSsh;
            return this;
        }

        /**
         * @param auditSsh Define the settings for the Audit SSH action. Settable only for `l4` rules with `auditSsh` action.
         * 
         * @return builder
         * 
         */
        public Builder auditSsh(ZeroTrustGatewayPolicyRuleSettingsAuditSshArgs auditSsh) {
            return auditSsh(Output.of(auditSsh));
        }

        /**
         * @param bisoAdminControls Configure browser isolation behavior. Settable only for `http` rules with the action set to `isolate`.
         * 
         * @return builder
         * 
         */
        public Builder bisoAdminControls(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsArgs> bisoAdminControls) {
            $.bisoAdminControls = bisoAdminControls;
            return this;
        }

        /**
         * @param bisoAdminControls Configure browser isolation behavior. Settable only for `http` rules with the action set to `isolate`.
         * 
         * @return builder
         * 
         */
        public Builder bisoAdminControls(ZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsArgs bisoAdminControls) {
            return bisoAdminControls(Output.of(bisoAdminControls));
        }

        /**
         * @param blockPage Configure custom block page settings. If missing or null, use the account settings. Settable only for `http` rules with the action set to `block`.
         * 
         * @return builder
         * 
         */
        public Builder blockPage(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsBlockPageArgs> blockPage) {
            $.blockPage = blockPage;
            return this;
        }

        /**
         * @param blockPage Configure custom block page settings. If missing or null, use the account settings. Settable only for `http` rules with the action set to `block`.
         * 
         * @return builder
         * 
         */
        public Builder blockPage(ZeroTrustGatewayPolicyRuleSettingsBlockPageArgs blockPage) {
            return blockPage(Output.of(blockPage));
        }

        /**
         * @param blockPageEnabled Enable the custom block page. Settable only for `dns` rules with action `block`.
         * 
         * @return builder
         * 
         */
        public Builder blockPageEnabled(@Nullable Output<Boolean> blockPageEnabled) {
            $.blockPageEnabled = blockPageEnabled;
            return this;
        }

        /**
         * @param blockPageEnabled Enable the custom block page. Settable only for `dns` rules with action `block`.
         * 
         * @return builder
         * 
         */
        public Builder blockPageEnabled(Boolean blockPageEnabled) {
            return blockPageEnabled(Output.of(blockPageEnabled));
        }

        /**
         * @param blockReason Explain why the rule blocks the request. The custom block page shows this text (if enabled). Settable only for `dns`, `l4`, and `http` rules when the action set to `block`.
         * 
         * @return builder
         * 
         */
        public Builder blockReason(@Nullable Output<String> blockReason) {
            $.blockReason = blockReason;
            return this;
        }

        /**
         * @param blockReason Explain why the rule blocks the request. The custom block page shows this text (if enabled). Settable only for `dns`, `l4`, and `http` rules when the action set to `block`.
         * 
         * @return builder
         * 
         */
        public Builder blockReason(String blockReason) {
            return blockReason(Output.of(blockReason));
        }

        /**
         * @param bypassParentRule Set to enable MSP accounts to bypass their parent&#39;s rules. Only MSP child accounts can set this. Settable for all types of rules.
         * 
         * @return builder
         * 
         */
        public Builder bypassParentRule(@Nullable Output<Boolean> bypassParentRule) {
            $.bypassParentRule = bypassParentRule;
            return this;
        }

        /**
         * @param bypassParentRule Set to enable MSP accounts to bypass their parent&#39;s rules. Only MSP child accounts can set this. Settable for all types of rules.
         * 
         * @return builder
         * 
         */
        public Builder bypassParentRule(Boolean bypassParentRule) {
            return bypassParentRule(Output.of(bypassParentRule));
        }

        /**
         * @param checkSession Configure session check behavior. Settable only for `l4` and `http` rules with the action set to `allow`.
         * 
         * @return builder
         * 
         */
        public Builder checkSession(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsCheckSessionArgs> checkSession) {
            $.checkSession = checkSession;
            return this;
        }

        /**
         * @param checkSession Configure session check behavior. Settable only for `l4` and `http` rules with the action set to `allow`.
         * 
         * @return builder
         * 
         */
        public Builder checkSession(ZeroTrustGatewayPolicyRuleSettingsCheckSessionArgs checkSession) {
            return checkSession(Output.of(checkSession));
        }

        /**
         * @param dnsResolvers Configure custom resolvers to route queries that match the resolver policy. Unused with &#39;resolve*dns*through*cloudflare&#39; or &#39;resolve*dns*internally&#39; settings. DNS queries get routed to the address closest to their origin. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder dnsResolvers(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsDnsResolversArgs> dnsResolvers) {
            $.dnsResolvers = dnsResolvers;
            return this;
        }

        /**
         * @param dnsResolvers Configure custom resolvers to route queries that match the resolver policy. Unused with &#39;resolve*dns*through*cloudflare&#39; or &#39;resolve*dns*internally&#39; settings. DNS queries get routed to the address closest to their origin. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder dnsResolvers(ZeroTrustGatewayPolicyRuleSettingsDnsResolversArgs dnsResolvers) {
            return dnsResolvers(Output.of(dnsResolvers));
        }

        /**
         * @param egress Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs. Settable only for `egress` rules.
         * 
         * @return builder
         * 
         */
        public Builder egress(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsEgressArgs> egress) {
            $.egress = egress;
            return this;
        }

        /**
         * @param egress Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs. Settable only for `egress` rules.
         * 
         * @return builder
         * 
         */
        public Builder egress(ZeroTrustGatewayPolicyRuleSettingsEgressArgs egress) {
            return egress(Output.of(egress));
        }

        /**
         * @param ignoreCnameCategoryMatches Ignore category matches at CNAME domains in a response. When off, evaluate categories in this rule against all CNAME domain categories in the response. Settable only for `dns` and `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCnameCategoryMatches(@Nullable Output<Boolean> ignoreCnameCategoryMatches) {
            $.ignoreCnameCategoryMatches = ignoreCnameCategoryMatches;
            return this;
        }

        /**
         * @param ignoreCnameCategoryMatches Ignore category matches at CNAME domains in a response. When off, evaluate categories in this rule against all CNAME domain categories in the response. Settable only for `dns` and `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCnameCategoryMatches(Boolean ignoreCnameCategoryMatches) {
            return ignoreCnameCategoryMatches(Output.of(ignoreCnameCategoryMatches));
        }

        /**
         * @param insecureDisableDnssecValidation Specify whether to disable DNSSEC validation (for Allow actions) [INSECURE]. Settable only for `dns` rules.
         * 
         * @return builder
         * 
         */
        public Builder insecureDisableDnssecValidation(@Nullable Output<Boolean> insecureDisableDnssecValidation) {
            $.insecureDisableDnssecValidation = insecureDisableDnssecValidation;
            return this;
        }

        /**
         * @param insecureDisableDnssecValidation Specify whether to disable DNSSEC validation (for Allow actions) [INSECURE]. Settable only for `dns` rules.
         * 
         * @return builder
         * 
         */
        public Builder insecureDisableDnssecValidation(Boolean insecureDisableDnssecValidation) {
            return insecureDisableDnssecValidation(Output.of(insecureDisableDnssecValidation));
        }

        /**
         * @param ipCategories Enable IPs in DNS resolver category blocks. The system blocks only domain name categories unless you enable this setting. Settable only for `dns` and `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder ipCategories(@Nullable Output<Boolean> ipCategories) {
            $.ipCategories = ipCategories;
            return this;
        }

        /**
         * @param ipCategories Enable IPs in DNS resolver category blocks. The system blocks only domain name categories unless you enable this setting. Settable only for `dns` and `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder ipCategories(Boolean ipCategories) {
            return ipCategories(Output.of(ipCategories));
        }

        /**
         * @param ipIndicatorFeeds Indicates whether to include IPs in DNS resolver indicator feed blocks. Default, indicator feeds block only domain names. Settable only for `dns` and `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder ipIndicatorFeeds(@Nullable Output<Boolean> ipIndicatorFeeds) {
            $.ipIndicatorFeeds = ipIndicatorFeeds;
            return this;
        }

        /**
         * @param ipIndicatorFeeds Indicates whether to include IPs in DNS resolver indicator feed blocks. Default, indicator feeds block only domain names. Settable only for `dns` and `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder ipIndicatorFeeds(Boolean ipIndicatorFeeds) {
            return ipIndicatorFeeds(Output.of(ipIndicatorFeeds));
        }

        /**
         * @param l4override Send matching traffic to the supplied destination IP address and port. Settable only for `l4` rules with the action set to `l4Override`.
         * 
         * @return builder
         * 
         */
        public Builder l4override(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsL4overrideArgs> l4override) {
            $.l4override = l4override;
            return this;
        }

        /**
         * @param l4override Send matching traffic to the supplied destination IP address and port. Settable only for `l4` rules with the action set to `l4Override`.
         * 
         * @return builder
         * 
         */
        public Builder l4override(ZeroTrustGatewayPolicyRuleSettingsL4overrideArgs l4override) {
            return l4override(Output.of(l4override));
        }

        /**
         * @param notificationSettings Configure a notification to display on the user&#39;s device when this rule matched. Settable for all types of rules with the action set to `block`.
         * 
         * @return builder
         * 
         */
        public Builder notificationSettings(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsNotificationSettingsArgs> notificationSettings) {
            $.notificationSettings = notificationSettings;
            return this;
        }

        /**
         * @param notificationSettings Configure a notification to display on the user&#39;s device when this rule matched. Settable for all types of rules with the action set to `block`.
         * 
         * @return builder
         * 
         */
        public Builder notificationSettings(ZeroTrustGatewayPolicyRuleSettingsNotificationSettingsArgs notificationSettings) {
            return notificationSettings(Output.of(notificationSettings));
        }

        /**
         * @param overrideHost Defines a hostname for override, for the matching DNS queries. Settable only for `dns` rules with the action set to `override`.
         * 
         * @return builder
         * 
         */
        public Builder overrideHost(@Nullable Output<String> overrideHost) {
            $.overrideHost = overrideHost;
            return this;
        }

        /**
         * @param overrideHost Defines a hostname for override, for the matching DNS queries. Settable only for `dns` rules with the action set to `override`.
         * 
         * @return builder
         * 
         */
        public Builder overrideHost(String overrideHost) {
            return overrideHost(Output.of(overrideHost));
        }

        /**
         * @param overrideIps Defines a an IP or set of IPs for overriding matched DNS queries. Settable only for `dns` rules with the action set to `override`.
         * 
         * @return builder
         * 
         */
        public Builder overrideIps(@Nullable Output<List<String>> overrideIps) {
            $.overrideIps = overrideIps;
            return this;
        }

        /**
         * @param overrideIps Defines a an IP or set of IPs for overriding matched DNS queries. Settable only for `dns` rules with the action set to `override`.
         * 
         * @return builder
         * 
         */
        public Builder overrideIps(List<String> overrideIps) {
            return overrideIps(Output.of(overrideIps));
        }

        /**
         * @param overrideIps Defines a an IP or set of IPs for overriding matched DNS queries. Settable only for `dns` rules with the action set to `override`.
         * 
         * @return builder
         * 
         */
        public Builder overrideIps(String... overrideIps) {
            return overrideIps(List.of(overrideIps));
        }

        /**
         * @param payloadLog Configure DLP payload logging. Settable only for `http` rules.
         * 
         * @return builder
         * 
         */
        public Builder payloadLog(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsPayloadLogArgs> payloadLog) {
            $.payloadLog = payloadLog;
            return this;
        }

        /**
         * @param payloadLog Configure DLP payload logging. Settable only for `http` rules.
         * 
         * @return builder
         * 
         */
        public Builder payloadLog(ZeroTrustGatewayPolicyRuleSettingsPayloadLogArgs payloadLog) {
            return payloadLog(Output.of(payloadLog));
        }

        /**
         * @param quarantine Configure settings that apply to quarantine rules. Settable only for `http` rules.
         * 
         * @return builder
         * 
         */
        public Builder quarantine(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsQuarantineArgs> quarantine) {
            $.quarantine = quarantine;
            return this;
        }

        /**
         * @param quarantine Configure settings that apply to quarantine rules. Settable only for `http` rules.
         * 
         * @return builder
         * 
         */
        public Builder quarantine(ZeroTrustGatewayPolicyRuleSettingsQuarantineArgs quarantine) {
            return quarantine(Output.of(quarantine));
        }

        /**
         * @param redirect Apply settings to redirect rules. Settable only for `http` rules with the action set to `redirect`.
         * 
         * @return builder
         * 
         */
        public Builder redirect(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsRedirectArgs> redirect) {
            $.redirect = redirect;
            return this;
        }

        /**
         * @param redirect Apply settings to redirect rules. Settable only for `http` rules with the action set to `redirect`.
         * 
         * @return builder
         * 
         */
        public Builder redirect(ZeroTrustGatewayPolicyRuleSettingsRedirectArgs redirect) {
            return redirect(Output.of(redirect));
        }

        /**
         * @param resolveDnsInternally Configure to forward the query to the internal DNS service, passing the specified &#39;view*id&#39; as input. Not used when &#39;dns*resolvers&#39; is specified or &#39;resolve*dns*through*cloudflare&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder resolveDnsInternally(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs> resolveDnsInternally) {
            $.resolveDnsInternally = resolveDnsInternally;
            return this;
        }

        /**
         * @param resolveDnsInternally Configure to forward the query to the internal DNS service, passing the specified &#39;view*id&#39; as input. Not used when &#39;dns*resolvers&#39; is specified or &#39;resolve*dns*through*cloudflare&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder resolveDnsInternally(ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs resolveDnsInternally) {
            return resolveDnsInternally(Output.of(resolveDnsInternally));
        }

        /**
         * @param resolveDnsThroughCloudflare Enable to send queries that match the policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot set when &#39;dns*resolvers&#39; specified or &#39;resolve*dns_internally&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder resolveDnsThroughCloudflare(@Nullable Output<Boolean> resolveDnsThroughCloudflare) {
            $.resolveDnsThroughCloudflare = resolveDnsThroughCloudflare;
            return this;
        }

        /**
         * @param resolveDnsThroughCloudflare Enable to send queries that match the policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot set when &#39;dns*resolvers&#39; specified or &#39;resolve*dns_internally&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
         * 
         * @return builder
         * 
         */
        public Builder resolveDnsThroughCloudflare(Boolean resolveDnsThroughCloudflare) {
            return resolveDnsThroughCloudflare(Output.of(resolveDnsThroughCloudflare));
        }

        /**
         * @param untrustedCert Configure behavior when an upstream certificate is invalid or an SSL error occurs. Settable only for `http` rules with the action set to `allow`.
         * 
         * @return builder
         * 
         */
        public Builder untrustedCert(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsUntrustedCertArgs> untrustedCert) {
            $.untrustedCert = untrustedCert;
            return this;
        }

        /**
         * @param untrustedCert Configure behavior when an upstream certificate is invalid or an SSL error occurs. Settable only for `http` rules with the action set to `allow`.
         * 
         * @return builder
         * 
         */
        public Builder untrustedCert(ZeroTrustGatewayPolicyRuleSettingsUntrustedCertArgs untrustedCert) {
            return untrustedCert(Output.of(untrustedCert));
        }

        public ZeroTrustGatewayPolicyRuleSettingsArgs build() {
            return $;
        }
    }

}
