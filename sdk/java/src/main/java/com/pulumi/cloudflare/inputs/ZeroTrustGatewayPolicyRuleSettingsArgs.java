// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsAuditSshArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsCheckSessionArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsDnsResolversArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsEgressArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsL4overrideArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsNotificationSettingsArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsPayloadLogArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsUntrustedCertArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustGatewayPolicyRuleSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustGatewayPolicyRuleSettingsArgs Empty = new ZeroTrustGatewayPolicyRuleSettingsArgs();

    /**
     * Add custom headers to allowed requests in the form of key-value pairs.
     * 
     */
    @Import(name="addHeaders")
    private @Nullable Output<Map<String,String>> addHeaders;

    /**
     * @return Add custom headers to allowed requests in the form of key-value pairs.
     * 
     */
    public Optional<Output<Map<String,String>>> addHeaders() {
        return Optional.ofNullable(this.addHeaders);
    }

    /**
     * Allow parent MSP accounts to enable bypass their children&#39;s rules.
     * 
     */
    @Import(name="allowChildBypass")
    private @Nullable Output<Boolean> allowChildBypass;

    /**
     * @return Allow parent MSP accounts to enable bypass their children&#39;s rules.
     * 
     */
    public Optional<Output<Boolean>> allowChildBypass() {
        return Optional.ofNullable(this.allowChildBypass);
    }

    /**
     * Settings for auditing SSH usage.
     * 
     */
    @Import(name="auditSsh")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsAuditSshArgs> auditSsh;

    /**
     * @return Settings for auditing SSH usage.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsAuditSshArgs>> auditSsh() {
        return Optional.ofNullable(this.auditSsh);
    }

    /**
     * Configure how browser isolation behaves.
     * 
     */
    @Import(name="bisoAdminControls")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsArgs> bisoAdminControls;

    /**
     * @return Configure how browser isolation behaves.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsArgs>> bisoAdminControls() {
        return Optional.ofNullable(this.bisoAdminControls);
    }

    /**
     * Indicator of block page enablement.
     * 
     */
    @Import(name="blockPageEnabled")
    private @Nullable Output<Boolean> blockPageEnabled;

    /**
     * @return Indicator of block page enablement.
     * 
     */
    public Optional<Output<Boolean>> blockPageEnabled() {
        return Optional.ofNullable(this.blockPageEnabled);
    }

    /**
     * The displayed reason for a user being blocked.
     * 
     */
    @Import(name="blockPageReason")
    private @Nullable Output<String> blockPageReason;

    /**
     * @return The displayed reason for a user being blocked.
     * 
     */
    public Optional<Output<String>> blockPageReason() {
        return Optional.ofNullable(this.blockPageReason);
    }

    /**
     * Allow child MSP accounts to bypass their parent&#39;s rule.
     * 
     */
    @Import(name="bypassParentRule")
    private @Nullable Output<Boolean> bypassParentRule;

    /**
     * @return Allow child MSP accounts to bypass their parent&#39;s rule.
     * 
     */
    public Optional<Output<Boolean>> bypassParentRule() {
        return Optional.ofNullable(this.bypassParentRule);
    }

    /**
     * Configure how session check behaves.
     * 
     */
    @Import(name="checkSession")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsCheckSessionArgs> checkSession;

    /**
     * @return Configure how session check behaves.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsCheckSessionArgs>> checkSession() {
        return Optional.ofNullable(this.checkSession);
    }

    /**
     * Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when resolve*dns*through*cloudflare is set. DNS queries will route to the address closest to their origin.
     * 
     */
    @Import(name="dnsResolvers")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsDnsResolversArgs> dnsResolvers;

    /**
     * @return Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when resolve*dns*through*cloudflare is set. DNS queries will route to the address closest to their origin.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsDnsResolversArgs>> dnsResolvers() {
        return Optional.ofNullable(this.dnsResolvers);
    }

    /**
     * Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs.
     * 
     */
    @Import(name="egress")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsEgressArgs> egress;

    /**
     * @return Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsEgressArgs>> egress() {
        return Optional.ofNullable(this.egress);
    }

    /**
     * Set to true, to ignore the category matches at CNAME domains in a response.
     * 
     */
    @Import(name="ignoreCnameCategoryMatches")
    private @Nullable Output<Boolean> ignoreCnameCategoryMatches;

    /**
     * @return Set to true, to ignore the category matches at CNAME domains in a response.
     * 
     */
    public Optional<Output<Boolean>> ignoreCnameCategoryMatches() {
        return Optional.ofNullable(this.ignoreCnameCategoryMatches);
    }

    /**
     * Disable DNSSEC validation (must be Allow rule).
     * 
     */
    @Import(name="insecureDisableDnssecValidation")
    private @Nullable Output<Boolean> insecureDisableDnssecValidation;

    /**
     * @return Disable DNSSEC validation (must be Allow rule).
     * 
     */
    public Optional<Output<Boolean>> insecureDisableDnssecValidation() {
        return Optional.ofNullable(this.insecureDisableDnssecValidation);
    }

    /**
     * Turns on IP category based filter on dns if the rule contains dns category checks.
     * 
     */
    @Import(name="ipCategories")
    private @Nullable Output<Boolean> ipCategories;

    /**
     * @return Turns on IP category based filter on dns if the rule contains dns category checks.
     * 
     */
    public Optional<Output<Boolean>> ipCategories() {
        return Optional.ofNullable(this.ipCategories);
    }

    /**
     * Settings to forward layer 4 traffic.
     * 
     */
    @Import(name="l4override")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsL4overrideArgs> l4override;

    /**
     * @return Settings to forward layer 4 traffic.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsL4overrideArgs>> l4override() {
        return Optional.ofNullable(this.l4override);
    }

    /**
     * Notification settings on a block rule.
     * 
     */
    @Import(name="notificationSettings")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsNotificationSettingsArgs> notificationSettings;

    /**
     * @return Notification settings on a block rule.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsNotificationSettingsArgs>> notificationSettings() {
        return Optional.ofNullable(this.notificationSettings);
    }

    /**
     * The host to override matching DNS queries with.
     * 
     */
    @Import(name="overrideHost")
    private @Nullable Output<String> overrideHost;

    /**
     * @return The host to override matching DNS queries with.
     * 
     */
    public Optional<Output<String>> overrideHost() {
        return Optional.ofNullable(this.overrideHost);
    }

    /**
     * The IPs to override matching DNS queries with.
     * 
     */
    @Import(name="overrideIps")
    private @Nullable Output<List<String>> overrideIps;

    /**
     * @return The IPs to override matching DNS queries with.
     * 
     */
    public Optional<Output<List<String>>> overrideIps() {
        return Optional.ofNullable(this.overrideIps);
    }

    /**
     * Configure DLP Payload Logging settings for this rule.
     * 
     */
    @Import(name="payloadLog")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsPayloadLogArgs> payloadLog;

    /**
     * @return Configure DLP Payload Logging settings for this rule.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsPayloadLogArgs>> payloadLog() {
        return Optional.ofNullable(this.payloadLog);
    }

    /**
     * Enable sending queries that match the resolver policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot be set when `dns_resolvers` are specified.
     * 
     */
    @Import(name="resolveDnsThroughCloudflare")
    private @Nullable Output<Boolean> resolveDnsThroughCloudflare;

    /**
     * @return Enable sending queries that match the resolver policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot be set when `dns_resolvers` are specified.
     * 
     */
    public Optional<Output<Boolean>> resolveDnsThroughCloudflare() {
        return Optional.ofNullable(this.resolveDnsThroughCloudflare);
    }

    /**
     * Configure untrusted certificate settings for this rule.
     * 
     */
    @Import(name="untrustedCert")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsUntrustedCertArgs> untrustedCert;

    /**
     * @return Configure untrusted certificate settings for this rule.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsUntrustedCertArgs>> untrustedCert() {
        return Optional.ofNullable(this.untrustedCert);
    }

    private ZeroTrustGatewayPolicyRuleSettingsArgs() {}

    private ZeroTrustGatewayPolicyRuleSettingsArgs(ZeroTrustGatewayPolicyRuleSettingsArgs $) {
        this.addHeaders = $.addHeaders;
        this.allowChildBypass = $.allowChildBypass;
        this.auditSsh = $.auditSsh;
        this.bisoAdminControls = $.bisoAdminControls;
        this.blockPageEnabled = $.blockPageEnabled;
        this.blockPageReason = $.blockPageReason;
        this.bypassParentRule = $.bypassParentRule;
        this.checkSession = $.checkSession;
        this.dnsResolvers = $.dnsResolvers;
        this.egress = $.egress;
        this.ignoreCnameCategoryMatches = $.ignoreCnameCategoryMatches;
        this.insecureDisableDnssecValidation = $.insecureDisableDnssecValidation;
        this.ipCategories = $.ipCategories;
        this.l4override = $.l4override;
        this.notificationSettings = $.notificationSettings;
        this.overrideHost = $.overrideHost;
        this.overrideIps = $.overrideIps;
        this.payloadLog = $.payloadLog;
        this.resolveDnsThroughCloudflare = $.resolveDnsThroughCloudflare;
        this.untrustedCert = $.untrustedCert;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustGatewayPolicyRuleSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustGatewayPolicyRuleSettingsArgs $;

        public Builder() {
            $ = new ZeroTrustGatewayPolicyRuleSettingsArgs();
        }

        public Builder(ZeroTrustGatewayPolicyRuleSettingsArgs defaults) {
            $ = new ZeroTrustGatewayPolicyRuleSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addHeaders Add custom headers to allowed requests in the form of key-value pairs.
         * 
         * @return builder
         * 
         */
        public Builder addHeaders(@Nullable Output<Map<String,String>> addHeaders) {
            $.addHeaders = addHeaders;
            return this;
        }

        /**
         * @param addHeaders Add custom headers to allowed requests in the form of key-value pairs.
         * 
         * @return builder
         * 
         */
        public Builder addHeaders(Map<String,String> addHeaders) {
            return addHeaders(Output.of(addHeaders));
        }

        /**
         * @param allowChildBypass Allow parent MSP accounts to enable bypass their children&#39;s rules.
         * 
         * @return builder
         * 
         */
        public Builder allowChildBypass(@Nullable Output<Boolean> allowChildBypass) {
            $.allowChildBypass = allowChildBypass;
            return this;
        }

        /**
         * @param allowChildBypass Allow parent MSP accounts to enable bypass their children&#39;s rules.
         * 
         * @return builder
         * 
         */
        public Builder allowChildBypass(Boolean allowChildBypass) {
            return allowChildBypass(Output.of(allowChildBypass));
        }

        /**
         * @param auditSsh Settings for auditing SSH usage.
         * 
         * @return builder
         * 
         */
        public Builder auditSsh(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsAuditSshArgs> auditSsh) {
            $.auditSsh = auditSsh;
            return this;
        }

        /**
         * @param auditSsh Settings for auditing SSH usage.
         * 
         * @return builder
         * 
         */
        public Builder auditSsh(ZeroTrustGatewayPolicyRuleSettingsAuditSshArgs auditSsh) {
            return auditSsh(Output.of(auditSsh));
        }

        /**
         * @param bisoAdminControls Configure how browser isolation behaves.
         * 
         * @return builder
         * 
         */
        public Builder bisoAdminControls(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsArgs> bisoAdminControls) {
            $.bisoAdminControls = bisoAdminControls;
            return this;
        }

        /**
         * @param bisoAdminControls Configure how browser isolation behaves.
         * 
         * @return builder
         * 
         */
        public Builder bisoAdminControls(ZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsArgs bisoAdminControls) {
            return bisoAdminControls(Output.of(bisoAdminControls));
        }

        /**
         * @param blockPageEnabled Indicator of block page enablement.
         * 
         * @return builder
         * 
         */
        public Builder blockPageEnabled(@Nullable Output<Boolean> blockPageEnabled) {
            $.blockPageEnabled = blockPageEnabled;
            return this;
        }

        /**
         * @param blockPageEnabled Indicator of block page enablement.
         * 
         * @return builder
         * 
         */
        public Builder blockPageEnabled(Boolean blockPageEnabled) {
            return blockPageEnabled(Output.of(blockPageEnabled));
        }

        /**
         * @param blockPageReason The displayed reason for a user being blocked.
         * 
         * @return builder
         * 
         */
        public Builder blockPageReason(@Nullable Output<String> blockPageReason) {
            $.blockPageReason = blockPageReason;
            return this;
        }

        /**
         * @param blockPageReason The displayed reason for a user being blocked.
         * 
         * @return builder
         * 
         */
        public Builder blockPageReason(String blockPageReason) {
            return blockPageReason(Output.of(blockPageReason));
        }

        /**
         * @param bypassParentRule Allow child MSP accounts to bypass their parent&#39;s rule.
         * 
         * @return builder
         * 
         */
        public Builder bypassParentRule(@Nullable Output<Boolean> bypassParentRule) {
            $.bypassParentRule = bypassParentRule;
            return this;
        }

        /**
         * @param bypassParentRule Allow child MSP accounts to bypass their parent&#39;s rule.
         * 
         * @return builder
         * 
         */
        public Builder bypassParentRule(Boolean bypassParentRule) {
            return bypassParentRule(Output.of(bypassParentRule));
        }

        /**
         * @param checkSession Configure how session check behaves.
         * 
         * @return builder
         * 
         */
        public Builder checkSession(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsCheckSessionArgs> checkSession) {
            $.checkSession = checkSession;
            return this;
        }

        /**
         * @param checkSession Configure how session check behaves.
         * 
         * @return builder
         * 
         */
        public Builder checkSession(ZeroTrustGatewayPolicyRuleSettingsCheckSessionArgs checkSession) {
            return checkSession(Output.of(checkSession));
        }

        /**
         * @param dnsResolvers Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when resolve*dns*through*cloudflare is set. DNS queries will route to the address closest to their origin.
         * 
         * @return builder
         * 
         */
        public Builder dnsResolvers(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsDnsResolversArgs> dnsResolvers) {
            $.dnsResolvers = dnsResolvers;
            return this;
        }

        /**
         * @param dnsResolvers Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when resolve*dns*through*cloudflare is set. DNS queries will route to the address closest to their origin.
         * 
         * @return builder
         * 
         */
        public Builder dnsResolvers(ZeroTrustGatewayPolicyRuleSettingsDnsResolversArgs dnsResolvers) {
            return dnsResolvers(Output.of(dnsResolvers));
        }

        /**
         * @param egress Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs.
         * 
         * @return builder
         * 
         */
        public Builder egress(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsEgressArgs> egress) {
            $.egress = egress;
            return this;
        }

        /**
         * @param egress Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs.
         * 
         * @return builder
         * 
         */
        public Builder egress(ZeroTrustGatewayPolicyRuleSettingsEgressArgs egress) {
            return egress(Output.of(egress));
        }

        /**
         * @param ignoreCnameCategoryMatches Set to true, to ignore the category matches at CNAME domains in a response.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCnameCategoryMatches(@Nullable Output<Boolean> ignoreCnameCategoryMatches) {
            $.ignoreCnameCategoryMatches = ignoreCnameCategoryMatches;
            return this;
        }

        /**
         * @param ignoreCnameCategoryMatches Set to true, to ignore the category matches at CNAME domains in a response.
         * 
         * @return builder
         * 
         */
        public Builder ignoreCnameCategoryMatches(Boolean ignoreCnameCategoryMatches) {
            return ignoreCnameCategoryMatches(Output.of(ignoreCnameCategoryMatches));
        }

        /**
         * @param insecureDisableDnssecValidation Disable DNSSEC validation (must be Allow rule).
         * 
         * @return builder
         * 
         */
        public Builder insecureDisableDnssecValidation(@Nullable Output<Boolean> insecureDisableDnssecValidation) {
            $.insecureDisableDnssecValidation = insecureDisableDnssecValidation;
            return this;
        }

        /**
         * @param insecureDisableDnssecValidation Disable DNSSEC validation (must be Allow rule).
         * 
         * @return builder
         * 
         */
        public Builder insecureDisableDnssecValidation(Boolean insecureDisableDnssecValidation) {
            return insecureDisableDnssecValidation(Output.of(insecureDisableDnssecValidation));
        }

        /**
         * @param ipCategories Turns on IP category based filter on dns if the rule contains dns category checks.
         * 
         * @return builder
         * 
         */
        public Builder ipCategories(@Nullable Output<Boolean> ipCategories) {
            $.ipCategories = ipCategories;
            return this;
        }

        /**
         * @param ipCategories Turns on IP category based filter on dns if the rule contains dns category checks.
         * 
         * @return builder
         * 
         */
        public Builder ipCategories(Boolean ipCategories) {
            return ipCategories(Output.of(ipCategories));
        }

        /**
         * @param l4override Settings to forward layer 4 traffic.
         * 
         * @return builder
         * 
         */
        public Builder l4override(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsL4overrideArgs> l4override) {
            $.l4override = l4override;
            return this;
        }

        /**
         * @param l4override Settings to forward layer 4 traffic.
         * 
         * @return builder
         * 
         */
        public Builder l4override(ZeroTrustGatewayPolicyRuleSettingsL4overrideArgs l4override) {
            return l4override(Output.of(l4override));
        }

        /**
         * @param notificationSettings Notification settings on a block rule.
         * 
         * @return builder
         * 
         */
        public Builder notificationSettings(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsNotificationSettingsArgs> notificationSettings) {
            $.notificationSettings = notificationSettings;
            return this;
        }

        /**
         * @param notificationSettings Notification settings on a block rule.
         * 
         * @return builder
         * 
         */
        public Builder notificationSettings(ZeroTrustGatewayPolicyRuleSettingsNotificationSettingsArgs notificationSettings) {
            return notificationSettings(Output.of(notificationSettings));
        }

        /**
         * @param overrideHost The host to override matching DNS queries with.
         * 
         * @return builder
         * 
         */
        public Builder overrideHost(@Nullable Output<String> overrideHost) {
            $.overrideHost = overrideHost;
            return this;
        }

        /**
         * @param overrideHost The host to override matching DNS queries with.
         * 
         * @return builder
         * 
         */
        public Builder overrideHost(String overrideHost) {
            return overrideHost(Output.of(overrideHost));
        }

        /**
         * @param overrideIps The IPs to override matching DNS queries with.
         * 
         * @return builder
         * 
         */
        public Builder overrideIps(@Nullable Output<List<String>> overrideIps) {
            $.overrideIps = overrideIps;
            return this;
        }

        /**
         * @param overrideIps The IPs to override matching DNS queries with.
         * 
         * @return builder
         * 
         */
        public Builder overrideIps(List<String> overrideIps) {
            return overrideIps(Output.of(overrideIps));
        }

        /**
         * @param overrideIps The IPs to override matching DNS queries with.
         * 
         * @return builder
         * 
         */
        public Builder overrideIps(String... overrideIps) {
            return overrideIps(List.of(overrideIps));
        }

        /**
         * @param payloadLog Configure DLP Payload Logging settings for this rule.
         * 
         * @return builder
         * 
         */
        public Builder payloadLog(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsPayloadLogArgs> payloadLog) {
            $.payloadLog = payloadLog;
            return this;
        }

        /**
         * @param payloadLog Configure DLP Payload Logging settings for this rule.
         * 
         * @return builder
         * 
         */
        public Builder payloadLog(ZeroTrustGatewayPolicyRuleSettingsPayloadLogArgs payloadLog) {
            return payloadLog(Output.of(payloadLog));
        }

        /**
         * @param resolveDnsThroughCloudflare Enable sending queries that match the resolver policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot be set when `dns_resolvers` are specified.
         * 
         * @return builder
         * 
         */
        public Builder resolveDnsThroughCloudflare(@Nullable Output<Boolean> resolveDnsThroughCloudflare) {
            $.resolveDnsThroughCloudflare = resolveDnsThroughCloudflare;
            return this;
        }

        /**
         * @param resolveDnsThroughCloudflare Enable sending queries that match the resolver policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot be set when `dns_resolvers` are specified.
         * 
         * @return builder
         * 
         */
        public Builder resolveDnsThroughCloudflare(Boolean resolveDnsThroughCloudflare) {
            return resolveDnsThroughCloudflare(Output.of(resolveDnsThroughCloudflare));
        }

        /**
         * @param untrustedCert Configure untrusted certificate settings for this rule.
         * 
         * @return builder
         * 
         */
        public Builder untrustedCert(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsUntrustedCertArgs> untrustedCert) {
            $.untrustedCert = untrustedCert;
            return this;
        }

        /**
         * @param untrustedCert Configure untrusted certificate settings for this rule.
         * 
         * @return builder
         * 
         */
        public Builder untrustedCert(ZeroTrustGatewayPolicyRuleSettingsUntrustedCertArgs untrustedCert) {
            return untrustedCert(Output.of(untrustedCert));
        }

        public ZeroTrustGatewayPolicyRuleSettingsArgs build() {
            return $;
        }
    }

}
