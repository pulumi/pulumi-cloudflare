// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.WorkersDeploymentAnnotationsArgs;
import com.pulumi.cloudflare.inputs.WorkersDeploymentVersionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkersDeploymentState extends com.pulumi.resources.ResourceArgs {

    public static final WorkersDeploymentState Empty = new WorkersDeploymentState();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="annotations")
    private @Nullable Output<WorkersDeploymentAnnotationsArgs> annotations;

    public Optional<Output<WorkersDeploymentAnnotationsArgs>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    @Import(name="authorEmail")
    private @Nullable Output<String> authorEmail;

    public Optional<Output<String>> authorEmail() {
        return Optional.ofNullable(this.authorEmail);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * Name of the script, used in URLs and route configuration.
     * 
     */
    @Import(name="scriptName")
    private @Nullable Output<String> scriptName;

    /**
     * @return Name of the script, used in URLs and route configuration.
     * 
     */
    public Optional<Output<String>> scriptName() {
        return Optional.ofNullable(this.scriptName);
    }

    @Import(name="source")
    private @Nullable Output<String> source;

    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Available values: &#34;percentage&#34;.
     * 
     */
    @Import(name="strategy")
    private @Nullable Output<String> strategy;

    /**
     * @return Available values: &#34;percentage&#34;.
     * 
     */
    public Optional<Output<String>> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    @Import(name="versions")
    private @Nullable Output<List<WorkersDeploymentVersionArgs>> versions;

    public Optional<Output<List<WorkersDeploymentVersionArgs>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private WorkersDeploymentState() {}

    private WorkersDeploymentState(WorkersDeploymentState $) {
        this.accountId = $.accountId;
        this.annotations = $.annotations;
        this.authorEmail = $.authorEmail;
        this.createdOn = $.createdOn;
        this.scriptName = $.scriptName;
        this.source = $.source;
        this.strategy = $.strategy;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkersDeploymentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkersDeploymentState $;

        public Builder() {
            $ = new WorkersDeploymentState();
        }

        public Builder(WorkersDeploymentState defaults) {
            $ = new WorkersDeploymentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder annotations(@Nullable Output<WorkersDeploymentAnnotationsArgs> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(WorkersDeploymentAnnotationsArgs annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder authorEmail(@Nullable Output<String> authorEmail) {
            $.authorEmail = authorEmail;
            return this;
        }

        public Builder authorEmail(String authorEmail) {
            return authorEmail(Output.of(authorEmail));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param scriptName Name of the script, used in URLs and route configuration.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(@Nullable Output<String> scriptName) {
            $.scriptName = scriptName;
            return this;
        }

        /**
         * @param scriptName Name of the script, used in URLs and route configuration.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(String scriptName) {
            return scriptName(Output.of(scriptName));
        }

        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param strategy Available values: &#34;percentage&#34;.
         * 
         * @return builder
         * 
         */
        public Builder strategy(@Nullable Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy Available values: &#34;percentage&#34;.
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        public Builder versions(@Nullable Output<List<WorkersDeploymentVersionArgs>> versions) {
            $.versions = versions;
            return this;
        }

        public Builder versions(List<WorkersDeploymentVersionArgs> versions) {
            return versions(Output.of(versions));
        }

        public Builder versions(WorkersDeploymentVersionArgs... versions) {
            return versions(List.of(versions));
        }

        public WorkersDeploymentState build() {
            return $;
        }
    }

}
