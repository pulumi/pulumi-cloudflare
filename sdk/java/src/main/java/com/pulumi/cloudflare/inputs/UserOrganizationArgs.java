// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserOrganizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserOrganizationArgs Empty = new UserOrganizationArgs();

    /**
     * Identifier
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Organization name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Organization name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Access permissions for this User.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<String>> permissions;

    /**
     * @return Access permissions for this User.
     * 
     */
    public Optional<Output<List<String>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * List of roles that a user has within an organization.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return List of roles that a user has within an organization.
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * Whether the user is a member of the organization or has an invitation pending.
     * Available values: &#34;member&#34;, &#34;invited&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Whether the user is a member of the organization or has an invitation pending.
     * Available values: &#34;member&#34;, &#34;invited&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private UserOrganizationArgs() {}

    private UserOrganizationArgs(UserOrganizationArgs $) {
        this.id = $.id;
        this.name = $.name;
        this.permissions = $.permissions;
        this.roles = $.roles;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserOrganizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserOrganizationArgs $;

        public Builder() {
            $ = new UserOrganizationArgs();
        }

        public Builder(UserOrganizationArgs defaults) {
            $ = new UserOrganizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id Identifier
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Organization name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Organization name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions Access permissions for this User.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Access permissions for this User.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions Access permissions for this User.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param roles List of roles that a user has within an organization.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles List of roles that a user has within an organization.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles List of roles that a user has within an organization.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param status Whether the user is a member of the organization or has an invitation pending.
         * Available values: &#34;member&#34;, &#34;invited&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Whether the user is a member of the organization or has an invitation pending.
         * Available values: &#34;member&#34;, &#34;invited&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public UserOrganizationArgs build() {
            return $;
        }
    }

}
