// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamArgs Empty = new StreamArgs();

    /**
     * The account identifier tag.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return The account identifier tag.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     * 
     */
    @Import(name="allowedOrigins")
    private @Nullable Output<List<String>> allowedOrigins;

    /**
     * @return Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     * 
     */
    public Optional<Output<List<String>>> allowedOrigins() {
        return Optional.ofNullable(this.allowedOrigins);
    }

    /**
     * A user-defined identifier for the media creator.
     * 
     */
    @Import(name="creator")
    private @Nullable Output<String> creator;

    /**
     * @return A user-defined identifier for the media creator.
     * 
     */
    public Optional<Output<String>> creator() {
        return Optional.ofNullable(this.creator);
    }

    /**
     * A Cloudflare-generated unique identifier for a media item.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return A Cloudflare-generated unique identifier for a media item.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     * 
     */
    @Import(name="maxDurationSeconds")
    private @Nullable Output<Integer> maxDurationSeconds;

    /**
     * @return The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     * 
     */
    public Optional<Output<Integer>> maxDurationSeconds() {
        return Optional.ofNullable(this.maxDurationSeconds);
    }

    /**
     * A user modifiable key-value store used to reference other systems of record for managing videos.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<String> meta;

    /**
     * @return A user modifiable key-value store used to reference other systems of record for managing videos.
     * 
     */
    public Optional<Output<String>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     * 
     */
    @Import(name="requireSignedUrls")
    private @Nullable Output<Boolean> requireSignedUrls;

    /**
     * @return Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     * 
     */
    public Optional<Output<Boolean>> requireSignedUrls() {
        return Optional.ofNullable(this.requireSignedUrls);
    }

    /**
     * Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     * 
     */
    @Import(name="scheduledDeletion")
    private @Nullable Output<String> scheduledDeletion;

    /**
     * @return Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     * 
     */
    public Optional<Output<String>> scheduledDeletion() {
        return Optional.ofNullable(this.scheduledDeletion);
    }

    /**
     * The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     * 
     */
    @Import(name="thumbnailTimestampPct")
    private @Nullable Output<Double> thumbnailTimestampPct;

    /**
     * @return The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     * 
     */
    public Optional<Output<Double>> thumbnailTimestampPct() {
        return Optional.ofNullable(this.thumbnailTimestampPct);
    }

    /**
     * The date and time when the video upload URL is no longer valid for direct user uploads.
     * 
     */
    @Import(name="uploadExpiry")
    private @Nullable Output<String> uploadExpiry;

    /**
     * @return The date and time when the video upload URL is no longer valid for direct user uploads.
     * 
     */
    public Optional<Output<String>> uploadExpiry() {
        return Optional.ofNullable(this.uploadExpiry);
    }

    private StreamArgs() {}

    private StreamArgs(StreamArgs $) {
        this.accountId = $.accountId;
        this.allowedOrigins = $.allowedOrigins;
        this.creator = $.creator;
        this.identifier = $.identifier;
        this.maxDurationSeconds = $.maxDurationSeconds;
        this.meta = $.meta;
        this.requireSignedUrls = $.requireSignedUrls;
        this.scheduledDeletion = $.scheduledDeletion;
        this.thumbnailTimestampPct = $.thumbnailTimestampPct;
        this.uploadExpiry = $.uploadExpiry;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamArgs $;

        public Builder() {
            $ = new StreamArgs();
        }

        public Builder(StreamArgs defaults) {
            $ = new StreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param allowedOrigins Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(@Nullable Output<List<String>> allowedOrigins) {
            $.allowedOrigins = allowedOrigins;
            return this;
        }

        /**
         * @param allowedOrigins Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(List<String> allowedOrigins) {
            return allowedOrigins(Output.of(allowedOrigins));
        }

        /**
         * @param allowedOrigins Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(String... allowedOrigins) {
            return allowedOrigins(List.of(allowedOrigins));
        }

        /**
         * @param creator A user-defined identifier for the media creator.
         * 
         * @return builder
         * 
         */
        public Builder creator(@Nullable Output<String> creator) {
            $.creator = creator;
            return this;
        }

        /**
         * @param creator A user-defined identifier for the media creator.
         * 
         * @return builder
         * 
         */
        public Builder creator(String creator) {
            return creator(Output.of(creator));
        }

        /**
         * @param identifier A Cloudflare-generated unique identifier for a media item.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier A Cloudflare-generated unique identifier for a media item.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param maxDurationSeconds The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
         * 
         * @return builder
         * 
         */
        public Builder maxDurationSeconds(@Nullable Output<Integer> maxDurationSeconds) {
            $.maxDurationSeconds = maxDurationSeconds;
            return this;
        }

        /**
         * @param maxDurationSeconds The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
         * 
         * @return builder
         * 
         */
        public Builder maxDurationSeconds(Integer maxDurationSeconds) {
            return maxDurationSeconds(Output.of(maxDurationSeconds));
        }

        /**
         * @param meta A user modifiable key-value store used to reference other systems of record for managing videos.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<String> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta A user modifiable key-value store used to reference other systems of record for managing videos.
         * 
         * @return builder
         * 
         */
        public Builder meta(String meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param requireSignedUrls Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
         * 
         * @return builder
         * 
         */
        public Builder requireSignedUrls(@Nullable Output<Boolean> requireSignedUrls) {
            $.requireSignedUrls = requireSignedUrls;
            return this;
        }

        /**
         * @param requireSignedUrls Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
         * 
         * @return builder
         * 
         */
        public Builder requireSignedUrls(Boolean requireSignedUrls) {
            return requireSignedUrls(Output.of(requireSignedUrls));
        }

        /**
         * @param scheduledDeletion Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
         * 
         * @return builder
         * 
         */
        public Builder scheduledDeletion(@Nullable Output<String> scheduledDeletion) {
            $.scheduledDeletion = scheduledDeletion;
            return this;
        }

        /**
         * @param scheduledDeletion Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
         * 
         * @return builder
         * 
         */
        public Builder scheduledDeletion(String scheduledDeletion) {
            return scheduledDeletion(Output.of(scheduledDeletion));
        }

        /**
         * @param thumbnailTimestampPct The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
         * 
         * @return builder
         * 
         */
        public Builder thumbnailTimestampPct(@Nullable Output<Double> thumbnailTimestampPct) {
            $.thumbnailTimestampPct = thumbnailTimestampPct;
            return this;
        }

        /**
         * @param thumbnailTimestampPct The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
         * 
         * @return builder
         * 
         */
        public Builder thumbnailTimestampPct(Double thumbnailTimestampPct) {
            return thumbnailTimestampPct(Output.of(thumbnailTimestampPct));
        }

        /**
         * @param uploadExpiry The date and time when the video upload URL is no longer valid for direct user uploads.
         * 
         * @return builder
         * 
         */
        public Builder uploadExpiry(@Nullable Output<String> uploadExpiry) {
            $.uploadExpiry = uploadExpiry;
            return this;
        }

        /**
         * @param uploadExpiry The date and time when the video upload URL is no longer valid for direct user uploads.
         * 
         * @return builder
         * 
         */
        public Builder uploadExpiry(String uploadExpiry) {
            return uploadExpiry(Output.of(uploadExpiry));
        }

        public StreamArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("StreamArgs", "accountId");
            }
            return $;
        }
    }

}
