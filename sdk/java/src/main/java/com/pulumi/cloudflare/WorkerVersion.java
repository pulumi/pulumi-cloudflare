// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.WorkerVersionArgs;
import com.pulumi.cloudflare.inputs.WorkerVersionState;
import com.pulumi.cloudflare.outputs.WorkerVersionAnnotations;
import com.pulumi.cloudflare.outputs.WorkerVersionAssets;
import com.pulumi.cloudflare.outputs.WorkerVersionBinding;
import com.pulumi.cloudflare.outputs.WorkerVersionLimits;
import com.pulumi.cloudflare.outputs.WorkerVersionMigrations;
import com.pulumi.cloudflare.outputs.WorkerVersionModule;
import com.pulumi.cloudflare.outputs.WorkerVersionPlacement;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.WorkerVersion;
 * import com.pulumi.cloudflare.WorkerVersionArgs;
 * import com.pulumi.cloudflare.inputs.WorkerVersionAnnotationsArgs;
 * import com.pulumi.cloudflare.inputs.WorkerVersionAssetsArgs;
 * import com.pulumi.cloudflare.inputs.WorkerVersionAssetsConfigArgs;
 * import com.pulumi.cloudflare.inputs.WorkerVersionBindingArgs;
 * import com.pulumi.cloudflare.inputs.WorkerVersionLimitsArgs;
 * import com.pulumi.cloudflare.inputs.WorkerVersionMigrationsArgs;
 * import com.pulumi.cloudflare.inputs.WorkerVersionModuleArgs;
 * import com.pulumi.cloudflare.inputs.WorkerVersionPlacementArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleWorkerVersion = new WorkerVersion("exampleWorkerVersion", WorkerVersionArgs.builder()
 *             .accountId("023e105f4ecef8ad9ca31a8372d0c353")
 *             .workerId("worker_id")
 *             .annotations(WorkerVersionAnnotationsArgs.builder()
 *                 .workers_message("Fixed bug.")
 *                 .workers_tag("v1.0.1")
 *                 .build())
 *             .assets(WorkerVersionAssetsArgs.builder()
 *                 .config(WorkerVersionAssetsConfigArgs.builder()
 *                     .htmlHandling("auto-trailing-slash")
 *                     .notFoundHandling("404-page")
 *                     .runWorkerFirst(List.of("string"))
 *                     .build())
 *                 .jwt("jwt")
 *                 .build())
 *             .bindings(WorkerVersionBindingArgs.builder()
 *                 .name("MY_ENV_VAR")
 *                 .text("my_data")
 *                 .type("plain_text")
 *                 .build())
 *             .compatibilityDate("2021-01-01")
 *             .compatibilityFlags("nodejs_compat")
 *             .limits(WorkerVersionLimitsArgs.builder()
 *                 .cpu_ms(50)
 *                 .build())
 *             .mainModule("index.js")
 *             .migrations(WorkerVersionMigrationsArgs.builder()
 *                 .deleted_classes(List.of("string"))
 *                 .new_classes(List.of("string"))
 *                 .new_sqlite_classes(List.of("string"))
 *                 .new_tag("v2")
 *                 .old_tag("v1")
 *                 .renamed_classes(List.of(Map.ofEntries(
 *                     Map.entry("from", "from"),
 *                     Map.entry("to", "to")
 *                 )))
 *                 .transferred_classes(List.of(Map.ofEntries(
 *                     Map.entry("from", "from"),
 *                     Map.entry("fromScript", "from_script"),
 *                     Map.entry("to", "to")
 *                 )))
 *                 .build())
 *             .modules(WorkerVersionModuleArgs.builder()
 *                 .content_file("dist/index.js")
 *                 .content_type("application/javascript+module")
 *                 .name("index.js")
 *                 .build())
 *             .placement(WorkerVersionPlacementArgs.builder()
 *                 .mode("smart")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/workerVersion:WorkerVersion example &#39;&lt;account_id&gt;/&lt;worker_id&gt;/&lt;version_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/workerVersion:WorkerVersion")
public class WorkerVersion extends com.pulumi.resources.CustomResource {
    /**
     * Identifier.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Metadata about the version.
     * 
     */
    @Export(name="annotations", refs={WorkerVersionAnnotations.class}, tree="[0]")
    private Output<WorkerVersionAnnotations> annotations;

    /**
     * @return Metadata about the version.
     * 
     */
    public Output<WorkerVersionAnnotations> annotations() {
        return this.annotations;
    }
    /**
     * Configuration for assets within a Worker.
     * 
     */
    @Export(name="assets", refs={WorkerVersionAssets.class}, tree="[0]")
    private Output</* @Nullable */ WorkerVersionAssets> assets;

    /**
     * @return Configuration for assets within a Worker.
     * 
     */
    public Output<Optional<WorkerVersionAssets>> assets() {
        return Codegen.optional(this.assets);
    }
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     * 
     */
    @Export(name="bindings", refs={List.class,WorkerVersionBinding.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkerVersionBinding>> bindings;

    /**
     * @return List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     * 
     */
    public Output<Optional<List<WorkerVersionBinding>>> bindings() {
        return Codegen.optional(this.bindings);
    }
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     * 
     */
    @Export(name="compatibilityDate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> compatibilityDate;

    /**
     * @return Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     * 
     */
    public Output<Optional<String>> compatibilityDate() {
        return Codegen.optional(this.compatibilityDate);
    }
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     * 
     */
    @Export(name="compatibilityFlags", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> compatibilityFlags;

    /**
     * @return Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     * 
     */
    public Output<List<String>> compatibilityFlags() {
        return this.compatibilityFlags;
    }
    /**
     * When the version was created.
     * 
     */
    @Export(name="createdOn", refs={String.class}, tree="[0]")
    private Output<String> createdOn;

    /**
     * @return When the version was created.
     * 
     */
    public Output<String> createdOn() {
        return this.createdOn;
    }
    /**
     * Resource limits enforced at runtime.
     * 
     */
    @Export(name="limits", refs={WorkerVersionLimits.class}, tree="[0]")
    private Output<WorkerVersionLimits> limits;

    /**
     * @return Resource limits enforced at runtime.
     * 
     */
    public Output<WorkerVersionLimits> limits() {
        return this.limits;
    }
    /**
     * The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
     * 
     */
    @Export(name="mainModule", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mainModule;

    /**
     * @return The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
     * 
     */
    public Output<Optional<String>> mainModule() {
        return Codegen.optional(this.mainModule);
    }
    /**
     * Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
     * 
     */
    @Export(name="migrations", refs={WorkerVersionMigrations.class}, tree="[0]")
    private Output</* @Nullable */ WorkerVersionMigrations> migrations;

    /**
     * @return Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
     * 
     */
    public Output<Optional<WorkerVersionMigrations>> migrations() {
        return Codegen.optional(this.migrations);
    }
    /**
     * Code, sourcemaps, and other content used at runtime.
     * 
     * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
     * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
     * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
     * included as modules named `_headers` and `_redirects` with content type `text/plain`.
     * 
     */
    @Export(name="modules", refs={List.class,WorkerVersionModule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkerVersionModule>> modules;

    /**
     * @return Code, sourcemaps, and other content used at runtime.
     * 
     * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
     * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
     * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
     * included as modules named `_headers` and `_redirects` with content type `text/plain`.
     * 
     */
    public Output<Optional<List<WorkerVersionModule>>> modules() {
        return Codegen.optional(this.modules);
    }
    /**
     * The integer version number, starting from one.
     * 
     */
    @Export(name="number", refs={Integer.class}, tree="[0]")
    private Output<Integer> number;

    /**
     * @return The integer version number, starting from one.
     * 
     */
    public Output<Integer> number() {
        return this.number;
    }
    /**
     * Placement settings for the version.
     * 
     */
    @Export(name="placement", refs={WorkerVersionPlacement.class}, tree="[0]")
    private Output</* @Nullable */ WorkerVersionPlacement> placement;

    /**
     * @return Placement settings for the version.
     * 
     */
    public Output<Optional<WorkerVersionPlacement>> placement() {
        return Codegen.optional(this.placement);
    }
    /**
     * The client used to create the version.
     * 
     */
    @Export(name="source", refs={String.class}, tree="[0]")
    private Output<String> source;

    /**
     * @return The client used to create the version.
     * 
     */
    public Output<String> source() {
        return this.source;
    }
    /**
     * Usage model for the version.
     * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    @Export(name="usageModel", refs={String.class}, tree="[0]")
    private Output<String> usageModel;

    /**
     * @return Usage model for the version.
     * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
     * 
     */
    public Output<String> usageModel() {
        return this.usageModel;
    }
    /**
     * Identifier for the Worker, which can be ID or name.
     * 
     */
    @Export(name="workerId", refs={String.class}, tree="[0]")
    private Output<String> workerId;

    /**
     * @return Identifier for the Worker, which can be ID or name.
     * 
     */
    public Output<String> workerId() {
        return this.workerId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WorkerVersion(java.lang.String name) {
        this(name, WorkerVersionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WorkerVersion(java.lang.String name, WorkerVersionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WorkerVersion(java.lang.String name, WorkerVersionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/workerVersion:WorkerVersion", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private WorkerVersion(java.lang.String name, Output<java.lang.String> id, @Nullable WorkerVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/workerVersion:WorkerVersion", name, state, makeResourceOptions(options, id), false);
    }

    private static WorkerVersionArgs makeArgs(WorkerVersionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? WorkerVersionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WorkerVersion get(java.lang.String name, Output<java.lang.String> id, @Nullable WorkerVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WorkerVersion(name, id, state, options);
    }
}
