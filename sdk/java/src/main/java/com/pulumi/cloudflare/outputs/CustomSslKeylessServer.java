// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.CustomSslKeylessServerTunnel;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CustomSslKeylessServer {
    /**
     * @return When the Keyless SSL was created.
     * 
     */
    private @Nullable String createdOn;
    /**
     * @return Whether or not the Keyless SSL is on or off.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return The keyless SSL name.
     * 
     */
    private @Nullable String host;
    /**
     * @return Keyless certificate identifier tag.
     * 
     */
    private @Nullable String id;
    /**
     * @return When the Keyless SSL was last modified.
     * 
     */
    private @Nullable String modifiedOn;
    /**
     * @return The keyless SSL name.
     * 
     */
    private @Nullable String name;
    /**
     * @return Available permissions for the Keyless SSL for the current user requesting the item.
     * 
     */
    private @Nullable List<String> permissions;
    /**
     * @return The keyless SSL port used to communicate between Cloudflare and the client&#39;s Keyless SSL server.
     * 
     */
    private @Nullable Double port;
    /**
     * @return Status of the Keyless SSL.
     * Available values: &#34;active&#34;, &#34;deleted&#34;.
     * 
     */
    private @Nullable String status;
    /**
     * @return Configuration for using Keyless SSL through a Cloudflare Tunnel
     * 
     */
    private @Nullable CustomSslKeylessServerTunnel tunnel;

    private CustomSslKeylessServer() {}
    /**
     * @return When the Keyless SSL was created.
     * 
     */
    public Optional<String> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }
    /**
     * @return Whether or not the Keyless SSL is on or off.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The keyless SSL name.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return Keyless certificate identifier tag.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return When the Keyless SSL was last modified.
     * 
     */
    public Optional<String> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }
    /**
     * @return The keyless SSL name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Available permissions for the Keyless SSL for the current user requesting the item.
     * 
     */
    public List<String> permissions() {
        return this.permissions == null ? List.of() : this.permissions;
    }
    /**
     * @return The keyless SSL port used to communicate between Cloudflare and the client&#39;s Keyless SSL server.
     * 
     */
    public Optional<Double> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Status of the Keyless SSL.
     * Available values: &#34;active&#34;, &#34;deleted&#34;.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Configuration for using Keyless SSL through a Cloudflare Tunnel
     * 
     */
    public Optional<CustomSslKeylessServerTunnel> tunnel() {
        return Optional.ofNullable(this.tunnel);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomSslKeylessServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String createdOn;
        private @Nullable Boolean enabled;
        private @Nullable String host;
        private @Nullable String id;
        private @Nullable String modifiedOn;
        private @Nullable String name;
        private @Nullable List<String> permissions;
        private @Nullable Double port;
        private @Nullable String status;
        private @Nullable CustomSslKeylessServerTunnel tunnel;
        public Builder() {}
        public Builder(CustomSslKeylessServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdOn = defaults.createdOn;
    	      this.enabled = defaults.enabled;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.name = defaults.name;
    	      this.permissions = defaults.permissions;
    	      this.port = defaults.port;
    	      this.status = defaults.status;
    	      this.tunnel = defaults.tunnel;
        }

        @CustomType.Setter
        public Builder createdOn(@Nullable String createdOn) {

            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(@Nullable String modifiedOn) {

            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder permissions(@Nullable List<String> permissions) {

            this.permissions = permissions;
            return this;
        }
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder port(@Nullable Double port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tunnel(@Nullable CustomSslKeylessServerTunnel tunnel) {

            this.tunnel = tunnel;
            return this;
        }
        public CustomSslKeylessServer build() {
            final var _resultValue = new CustomSslKeylessServer();
            _resultValue.createdOn = createdOn;
            _resultValue.enabled = enabled;
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.name = name;
            _resultValue.permissions = permissions;
            _resultValue.port = port;
            _resultValue.status = status;
            _resultValue.tunnel = tunnel;
            return _resultValue;
        }
    }
}
