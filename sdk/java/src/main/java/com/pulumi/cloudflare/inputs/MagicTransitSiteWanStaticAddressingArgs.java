// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicTransitSiteWanStaticAddressingArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicTransitSiteWanStaticAddressingArgs Empty = new MagicTransitSiteWanStaticAddressingArgs();

    /**
     * A valid CIDR notation representing an IP range.
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * A valid IPv4 address.
     * 
     */
    @Import(name="gatewayAddress", required=true)
    private Output<String> gatewayAddress;

    /**
     * @return A valid IPv4 address.
     * 
     */
    public Output<String> gatewayAddress() {
        return this.gatewayAddress;
    }

    /**
     * A valid CIDR notation representing an IP range.
     * 
     */
    @Import(name="secondaryAddress")
    private @Nullable Output<String> secondaryAddress;

    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    public Optional<Output<String>> secondaryAddress() {
        return Optional.ofNullable(this.secondaryAddress);
    }

    private MagicTransitSiteWanStaticAddressingArgs() {}

    private MagicTransitSiteWanStaticAddressingArgs(MagicTransitSiteWanStaticAddressingArgs $) {
        this.address = $.address;
        this.gatewayAddress = $.gatewayAddress;
        this.secondaryAddress = $.secondaryAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicTransitSiteWanStaticAddressingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicTransitSiteWanStaticAddressingArgs $;

        public Builder() {
            $ = new MagicTransitSiteWanStaticAddressingArgs();
        }

        public Builder(MagicTransitSiteWanStaticAddressingArgs defaults) {
            $ = new MagicTransitSiteWanStaticAddressingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address A valid CIDR notation representing an IP range.
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address A valid CIDR notation representing an IP range.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param gatewayAddress A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder gatewayAddress(Output<String> gatewayAddress) {
            $.gatewayAddress = gatewayAddress;
            return this;
        }

        /**
         * @param gatewayAddress A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder gatewayAddress(String gatewayAddress) {
            return gatewayAddress(Output.of(gatewayAddress));
        }

        /**
         * @param secondaryAddress A valid CIDR notation representing an IP range.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAddress(@Nullable Output<String> secondaryAddress) {
            $.secondaryAddress = secondaryAddress;
            return this;
        }

        /**
         * @param secondaryAddress A valid CIDR notation representing an IP range.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAddress(String secondaryAddress) {
            return secondaryAddress(Output.of(secondaryAddress));
        }

        public MagicTransitSiteWanStaticAddressingArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteWanStaticAddressingArgs", "address");
            }
            if ($.gatewayAddress == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteWanStaticAddressingArgs", "gatewayAddress");
            }
            return $;
        }
    }

}
