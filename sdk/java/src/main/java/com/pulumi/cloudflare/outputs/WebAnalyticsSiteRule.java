// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WebAnalyticsSiteRule {
    private @Nullable String created;
    /**
     * @return The hostname the rule will be applied to.
     * 
     */
    private @Nullable String host;
    /**
     * @return The Web Analytics rule identifier.
     * 
     */
    private @Nullable String id;
    /**
     * @return Whether the rule includes or excludes traffic from being measured.
     * 
     */
    private @Nullable Boolean inclusive;
    /**
     * @return Whether the rule is paused or not.
     * 
     */
    private @Nullable Boolean isPaused;
    /**
     * @return The paths the rule will be applied to.
     * 
     */
    private @Nullable List<String> paths;
    private @Nullable Double priority;

    private WebAnalyticsSiteRule() {}
    public Optional<String> created() {
        return Optional.ofNullable(this.created);
    }
    /**
     * @return The hostname the rule will be applied to.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return The Web Analytics rule identifier.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether the rule includes or excludes traffic from being measured.
     * 
     */
    public Optional<Boolean> inclusive() {
        return Optional.ofNullable(this.inclusive);
    }
    /**
     * @return Whether the rule is paused or not.
     * 
     */
    public Optional<Boolean> isPaused() {
        return Optional.ofNullable(this.isPaused);
    }
    /**
     * @return The paths the rule will be applied to.
     * 
     */
    public List<String> paths() {
        return this.paths == null ? List.of() : this.paths;
    }
    public Optional<Double> priority() {
        return Optional.ofNullable(this.priority);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAnalyticsSiteRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String created;
        private @Nullable String host;
        private @Nullable String id;
        private @Nullable Boolean inclusive;
        private @Nullable Boolean isPaused;
        private @Nullable List<String> paths;
        private @Nullable Double priority;
        public Builder() {}
        public Builder(WebAnalyticsSiteRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.created = defaults.created;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.inclusive = defaults.inclusive;
    	      this.isPaused = defaults.isPaused;
    	      this.paths = defaults.paths;
    	      this.priority = defaults.priority;
        }

        @CustomType.Setter
        public Builder created(@Nullable String created) {

            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inclusive(@Nullable Boolean inclusive) {

            this.inclusive = inclusive;
            return this;
        }
        @CustomType.Setter
        public Builder isPaused(@Nullable Boolean isPaused) {

            this.isPaused = isPaused;
            return this;
        }
        @CustomType.Setter
        public Builder paths(@Nullable List<String> paths) {

            this.paths = paths;
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        @CustomType.Setter
        public Builder priority(@Nullable Double priority) {

            this.priority = priority;
            return this;
        }
        public WebAnalyticsSiteRule build() {
            final var _resultValue = new WebAnalyticsSiteRule();
            _resultValue.created = created;
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.inclusive = inclusive;
            _resultValue.isPaused = isPaused;
            _resultValue.paths = paths;
            _resultValue.priority = priority;
            return _resultValue;
        }
    }
}
