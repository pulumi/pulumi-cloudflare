// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.WorkersScriptMigrationsRenamedClassArgs;
import com.pulumi.cloudflare.inputs.WorkersScriptMigrationsStepArgs;
import com.pulumi.cloudflare.inputs.WorkersScriptMigrationsTransferredClassArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkersScriptMigrationsArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkersScriptMigrationsArgs Empty = new WorkersScriptMigrationsArgs();

    /**
     * A list of classes to delete Durable Object namespaces from.
     * 
     */
    @Import(name="deletedClasses")
    private @Nullable Output<List<String>> deletedClasses;

    /**
     * @return A list of classes to delete Durable Object namespaces from.
     * 
     */
    public Optional<Output<List<String>>> deletedClasses() {
        return Optional.ofNullable(this.deletedClasses);
    }

    /**
     * A list of classes to create Durable Object namespaces from.
     * 
     */
    @Import(name="newClasses")
    private @Nullable Output<List<String>> newClasses;

    /**
     * @return A list of classes to create Durable Object namespaces from.
     * 
     */
    public Optional<Output<List<String>>> newClasses() {
        return Optional.ofNullable(this.newClasses);
    }

    /**
     * A list of classes to create Durable Object namespaces with SQLite from.
     * 
     */
    @Import(name="newSqliteClasses")
    private @Nullable Output<List<String>> newSqliteClasses;

    /**
     * @return A list of classes to create Durable Object namespaces with SQLite from.
     * 
     */
    public Optional<Output<List<String>>> newSqliteClasses() {
        return Optional.ofNullable(this.newSqliteClasses);
    }

    /**
     * Tag to set as the latest migration tag.
     * 
     */
    @Import(name="newTag")
    private @Nullable Output<String> newTag;

    /**
     * @return Tag to set as the latest migration tag.
     * 
     */
    public Optional<Output<String>> newTag() {
        return Optional.ofNullable(this.newTag);
    }

    /**
     * Tag used to verify against the latest migration tag for this Worker. If they don&#39;t match, the upload is rejected.
     * 
     */
    @Import(name="oldTag")
    private @Nullable Output<String> oldTag;

    /**
     * @return Tag used to verify against the latest migration tag for this Worker. If they don&#39;t match, the upload is rejected.
     * 
     */
    public Optional<Output<String>> oldTag() {
        return Optional.ofNullable(this.oldTag);
    }

    /**
     * A list of classes with Durable Object namespaces that were renamed.
     * 
     */
    @Import(name="renamedClasses")
    private @Nullable Output<List<WorkersScriptMigrationsRenamedClassArgs>> renamedClasses;

    /**
     * @return A list of classes with Durable Object namespaces that were renamed.
     * 
     */
    public Optional<Output<List<WorkersScriptMigrationsRenamedClassArgs>>> renamedClasses() {
        return Optional.ofNullable(this.renamedClasses);
    }

    /**
     * Migrations to apply in order.
     * 
     */
    @Import(name="steps")
    private @Nullable Output<List<WorkersScriptMigrationsStepArgs>> steps;

    /**
     * @return Migrations to apply in order.
     * 
     */
    public Optional<Output<List<WorkersScriptMigrationsStepArgs>>> steps() {
        return Optional.ofNullable(this.steps);
    }

    /**
     * A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.
     * 
     */
    @Import(name="transferredClasses")
    private @Nullable Output<List<WorkersScriptMigrationsTransferredClassArgs>> transferredClasses;

    /**
     * @return A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.
     * 
     */
    public Optional<Output<List<WorkersScriptMigrationsTransferredClassArgs>>> transferredClasses() {
        return Optional.ofNullable(this.transferredClasses);
    }

    private WorkersScriptMigrationsArgs() {}

    private WorkersScriptMigrationsArgs(WorkersScriptMigrationsArgs $) {
        this.deletedClasses = $.deletedClasses;
        this.newClasses = $.newClasses;
        this.newSqliteClasses = $.newSqliteClasses;
        this.newTag = $.newTag;
        this.oldTag = $.oldTag;
        this.renamedClasses = $.renamedClasses;
        this.steps = $.steps;
        this.transferredClasses = $.transferredClasses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkersScriptMigrationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkersScriptMigrationsArgs $;

        public Builder() {
            $ = new WorkersScriptMigrationsArgs();
        }

        public Builder(WorkersScriptMigrationsArgs defaults) {
            $ = new WorkersScriptMigrationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deletedClasses A list of classes to delete Durable Object namespaces from.
         * 
         * @return builder
         * 
         */
        public Builder deletedClasses(@Nullable Output<List<String>> deletedClasses) {
            $.deletedClasses = deletedClasses;
            return this;
        }

        /**
         * @param deletedClasses A list of classes to delete Durable Object namespaces from.
         * 
         * @return builder
         * 
         */
        public Builder deletedClasses(List<String> deletedClasses) {
            return deletedClasses(Output.of(deletedClasses));
        }

        /**
         * @param deletedClasses A list of classes to delete Durable Object namespaces from.
         * 
         * @return builder
         * 
         */
        public Builder deletedClasses(String... deletedClasses) {
            return deletedClasses(List.of(deletedClasses));
        }

        /**
         * @param newClasses A list of classes to create Durable Object namespaces from.
         * 
         * @return builder
         * 
         */
        public Builder newClasses(@Nullable Output<List<String>> newClasses) {
            $.newClasses = newClasses;
            return this;
        }

        /**
         * @param newClasses A list of classes to create Durable Object namespaces from.
         * 
         * @return builder
         * 
         */
        public Builder newClasses(List<String> newClasses) {
            return newClasses(Output.of(newClasses));
        }

        /**
         * @param newClasses A list of classes to create Durable Object namespaces from.
         * 
         * @return builder
         * 
         */
        public Builder newClasses(String... newClasses) {
            return newClasses(List.of(newClasses));
        }

        /**
         * @param newSqliteClasses A list of classes to create Durable Object namespaces with SQLite from.
         * 
         * @return builder
         * 
         */
        public Builder newSqliteClasses(@Nullable Output<List<String>> newSqliteClasses) {
            $.newSqliteClasses = newSqliteClasses;
            return this;
        }

        /**
         * @param newSqliteClasses A list of classes to create Durable Object namespaces with SQLite from.
         * 
         * @return builder
         * 
         */
        public Builder newSqliteClasses(List<String> newSqliteClasses) {
            return newSqliteClasses(Output.of(newSqliteClasses));
        }

        /**
         * @param newSqliteClasses A list of classes to create Durable Object namespaces with SQLite from.
         * 
         * @return builder
         * 
         */
        public Builder newSqliteClasses(String... newSqliteClasses) {
            return newSqliteClasses(List.of(newSqliteClasses));
        }

        /**
         * @param newTag Tag to set as the latest migration tag.
         * 
         * @return builder
         * 
         */
        public Builder newTag(@Nullable Output<String> newTag) {
            $.newTag = newTag;
            return this;
        }

        /**
         * @param newTag Tag to set as the latest migration tag.
         * 
         * @return builder
         * 
         */
        public Builder newTag(String newTag) {
            return newTag(Output.of(newTag));
        }

        /**
         * @param oldTag Tag used to verify against the latest migration tag for this Worker. If they don&#39;t match, the upload is rejected.
         * 
         * @return builder
         * 
         */
        public Builder oldTag(@Nullable Output<String> oldTag) {
            $.oldTag = oldTag;
            return this;
        }

        /**
         * @param oldTag Tag used to verify against the latest migration tag for this Worker. If they don&#39;t match, the upload is rejected.
         * 
         * @return builder
         * 
         */
        public Builder oldTag(String oldTag) {
            return oldTag(Output.of(oldTag));
        }

        /**
         * @param renamedClasses A list of classes with Durable Object namespaces that were renamed.
         * 
         * @return builder
         * 
         */
        public Builder renamedClasses(@Nullable Output<List<WorkersScriptMigrationsRenamedClassArgs>> renamedClasses) {
            $.renamedClasses = renamedClasses;
            return this;
        }

        /**
         * @param renamedClasses A list of classes with Durable Object namespaces that were renamed.
         * 
         * @return builder
         * 
         */
        public Builder renamedClasses(List<WorkersScriptMigrationsRenamedClassArgs> renamedClasses) {
            return renamedClasses(Output.of(renamedClasses));
        }

        /**
         * @param renamedClasses A list of classes with Durable Object namespaces that were renamed.
         * 
         * @return builder
         * 
         */
        public Builder renamedClasses(WorkersScriptMigrationsRenamedClassArgs... renamedClasses) {
            return renamedClasses(List.of(renamedClasses));
        }

        /**
         * @param steps Migrations to apply in order.
         * 
         * @return builder
         * 
         */
        public Builder steps(@Nullable Output<List<WorkersScriptMigrationsStepArgs>> steps) {
            $.steps = steps;
            return this;
        }

        /**
         * @param steps Migrations to apply in order.
         * 
         * @return builder
         * 
         */
        public Builder steps(List<WorkersScriptMigrationsStepArgs> steps) {
            return steps(Output.of(steps));
        }

        /**
         * @param steps Migrations to apply in order.
         * 
         * @return builder
         * 
         */
        public Builder steps(WorkersScriptMigrationsStepArgs... steps) {
            return steps(List.of(steps));
        }

        /**
         * @param transferredClasses A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.
         * 
         * @return builder
         * 
         */
        public Builder transferredClasses(@Nullable Output<List<WorkersScriptMigrationsTransferredClassArgs>> transferredClasses) {
            $.transferredClasses = transferredClasses;
            return this;
        }

        /**
         * @param transferredClasses A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.
         * 
         * @return builder
         * 
         */
        public Builder transferredClasses(List<WorkersScriptMigrationsTransferredClassArgs> transferredClasses) {
            return transferredClasses(Output.of(transferredClasses));
        }

        /**
         * @param transferredClasses A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.
         * 
         * @return builder
         * 
         */
        public Builder transferredClasses(WorkersScriptMigrationsTransferredClassArgs... transferredClasses) {
            return transferredClasses(List.of(transferredClasses));
        }

        public WorkersScriptMigrationsArgs build() {
            return $;
        }
    }

}
