// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultPolicyApprovalGroup;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultPolicyConnectionRules;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultPolicyExclude;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultPolicyInclude;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultPolicyRequire;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetZeroTrustAccessApplicationsResultPolicy {
    /**
     * @return Administrators who can approve a temporary authentication request.
     * 
     */
    private List<GetZeroTrustAccessApplicationsResultPolicyApprovalGroup> approvalGroups;
    /**
     * @return Requires the user to request access from an administrator at the start of each session.
     * 
     */
    private Boolean approvalRequired;
    /**
     * @return The rules that define how users may connect to the targets secured by your application.
     * 
     */
    private GetZeroTrustAccessApplicationsResultPolicyConnectionRules connectionRules;
    private String createdAt;
    /**
     * @return The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;non_identity&#34;, &#34;bypass&#34;.
     * 
     */
    private String decision;
    /**
     * @return Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     * 
     */
    private List<GetZeroTrustAccessApplicationsResultPolicyExclude> excludes;
    /**
     * @return The UUID of the policy
     * 
     */
    private String id;
    /**
     * @return Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    private List<GetZeroTrustAccessApplicationsResultPolicyInclude> includes;
    /**
     * @return Require this application to be served in an isolated browser for users matching this policy. &#39;Client Web Isolation&#39; must be on for the account in order to use this feature.
     * 
     */
    private Boolean isolationRequired;
    /**
     * @return The name of the Access policy.
     * 
     */
    private String name;
    /**
     * @return The order of execution for this policy. Must be unique for each policy within an app.
     * 
     */
    private Integer precedence;
    /**
     * @return A custom message that will appear on the purpose justification screen.
     * 
     */
    private String purposeJustificationPrompt;
    /**
     * @return Require users to enter a justification when they log in to the application.
     * 
     */
    private Boolean purposeJustificationRequired;
    /**
     * @return Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     * 
     */
    private List<GetZeroTrustAccessApplicationsResultPolicyRequire> requires;
    /**
     * @return The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     * 
     */
    private String sessionDuration;
    private String updatedAt;

    private GetZeroTrustAccessApplicationsResultPolicy() {}
    /**
     * @return Administrators who can approve a temporary authentication request.
     * 
     */
    public List<GetZeroTrustAccessApplicationsResultPolicyApprovalGroup> approvalGroups() {
        return this.approvalGroups;
    }
    /**
     * @return Requires the user to request access from an administrator at the start of each session.
     * 
     */
    public Boolean approvalRequired() {
        return this.approvalRequired;
    }
    /**
     * @return The rules that define how users may connect to the targets secured by your application.
     * 
     */
    public GetZeroTrustAccessApplicationsResultPolicyConnectionRules connectionRules() {
        return this.connectionRules;
    }
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;non_identity&#34;, &#34;bypass&#34;.
     * 
     */
    public String decision() {
        return this.decision;
    }
    /**
     * @return Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     * 
     */
    public List<GetZeroTrustAccessApplicationsResultPolicyExclude> excludes() {
        return this.excludes;
    }
    /**
     * @return The UUID of the policy
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    public List<GetZeroTrustAccessApplicationsResultPolicyInclude> includes() {
        return this.includes;
    }
    /**
     * @return Require this application to be served in an isolated browser for users matching this policy. &#39;Client Web Isolation&#39; must be on for the account in order to use this feature.
     * 
     */
    public Boolean isolationRequired() {
        return this.isolationRequired;
    }
    /**
     * @return The name of the Access policy.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The order of execution for this policy. Must be unique for each policy within an app.
     * 
     */
    public Integer precedence() {
        return this.precedence;
    }
    /**
     * @return A custom message that will appear on the purpose justification screen.
     * 
     */
    public String purposeJustificationPrompt() {
        return this.purposeJustificationPrompt;
    }
    /**
     * @return Require users to enter a justification when they log in to the application.
     * 
     */
    public Boolean purposeJustificationRequired() {
        return this.purposeJustificationRequired;
    }
    /**
     * @return Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     * 
     */
    public List<GetZeroTrustAccessApplicationsResultPolicyRequire> requires() {
        return this.requires;
    }
    /**
     * @return The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     * 
     */
    public String sessionDuration() {
        return this.sessionDuration;
    }
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustAccessApplicationsResultPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetZeroTrustAccessApplicationsResultPolicyApprovalGroup> approvalGroups;
        private Boolean approvalRequired;
        private GetZeroTrustAccessApplicationsResultPolicyConnectionRules connectionRules;
        private String createdAt;
        private String decision;
        private List<GetZeroTrustAccessApplicationsResultPolicyExclude> excludes;
        private String id;
        private List<GetZeroTrustAccessApplicationsResultPolicyInclude> includes;
        private Boolean isolationRequired;
        private String name;
        private Integer precedence;
        private String purposeJustificationPrompt;
        private Boolean purposeJustificationRequired;
        private List<GetZeroTrustAccessApplicationsResultPolicyRequire> requires;
        private String sessionDuration;
        private String updatedAt;
        public Builder() {}
        public Builder(GetZeroTrustAccessApplicationsResultPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approvalGroups = defaults.approvalGroups;
    	      this.approvalRequired = defaults.approvalRequired;
    	      this.connectionRules = defaults.connectionRules;
    	      this.createdAt = defaults.createdAt;
    	      this.decision = defaults.decision;
    	      this.excludes = defaults.excludes;
    	      this.id = defaults.id;
    	      this.includes = defaults.includes;
    	      this.isolationRequired = defaults.isolationRequired;
    	      this.name = defaults.name;
    	      this.precedence = defaults.precedence;
    	      this.purposeJustificationPrompt = defaults.purposeJustificationPrompt;
    	      this.purposeJustificationRequired = defaults.purposeJustificationRequired;
    	      this.requires = defaults.requires;
    	      this.sessionDuration = defaults.sessionDuration;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder approvalGroups(List<GetZeroTrustAccessApplicationsResultPolicyApprovalGroup> approvalGroups) {
            if (approvalGroups == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "approvalGroups");
            }
            this.approvalGroups = approvalGroups;
            return this;
        }
        public Builder approvalGroups(GetZeroTrustAccessApplicationsResultPolicyApprovalGroup... approvalGroups) {
            return approvalGroups(List.of(approvalGroups));
        }
        @CustomType.Setter
        public Builder approvalRequired(Boolean approvalRequired) {
            if (approvalRequired == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "approvalRequired");
            }
            this.approvalRequired = approvalRequired;
            return this;
        }
        @CustomType.Setter
        public Builder connectionRules(GetZeroTrustAccessApplicationsResultPolicyConnectionRules connectionRules) {
            if (connectionRules == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "connectionRules");
            }
            this.connectionRules = connectionRules;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder decision(String decision) {
            if (decision == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "decision");
            }
            this.decision = decision;
            return this;
        }
        @CustomType.Setter
        public Builder excludes(List<GetZeroTrustAccessApplicationsResultPolicyExclude> excludes) {
            if (excludes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "excludes");
            }
            this.excludes = excludes;
            return this;
        }
        public Builder excludes(GetZeroTrustAccessApplicationsResultPolicyExclude... excludes) {
            return excludes(List.of(excludes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includes(List<GetZeroTrustAccessApplicationsResultPolicyInclude> includes) {
            if (includes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "includes");
            }
            this.includes = includes;
            return this;
        }
        public Builder includes(GetZeroTrustAccessApplicationsResultPolicyInclude... includes) {
            return includes(List.of(includes));
        }
        @CustomType.Setter
        public Builder isolationRequired(Boolean isolationRequired) {
            if (isolationRequired == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "isolationRequired");
            }
            this.isolationRequired = isolationRequired;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder precedence(Integer precedence) {
            if (precedence == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "precedence");
            }
            this.precedence = precedence;
            return this;
        }
        @CustomType.Setter
        public Builder purposeJustificationPrompt(String purposeJustificationPrompt) {
            if (purposeJustificationPrompt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "purposeJustificationPrompt");
            }
            this.purposeJustificationPrompt = purposeJustificationPrompt;
            return this;
        }
        @CustomType.Setter
        public Builder purposeJustificationRequired(Boolean purposeJustificationRequired) {
            if (purposeJustificationRequired == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "purposeJustificationRequired");
            }
            this.purposeJustificationRequired = purposeJustificationRequired;
            return this;
        }
        @CustomType.Setter
        public Builder requires(List<GetZeroTrustAccessApplicationsResultPolicyRequire> requires) {
            if (requires == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "requires");
            }
            this.requires = requires;
            return this;
        }
        public Builder requires(GetZeroTrustAccessApplicationsResultPolicyRequire... requires) {
            return requires(List.of(requires));
        }
        @CustomType.Setter
        public Builder sessionDuration(String sessionDuration) {
            if (sessionDuration == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "sessionDuration");
            }
            this.sessionDuration = sessionDuration;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultPolicy", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetZeroTrustAccessApplicationsResultPolicy build() {
            final var _resultValue = new GetZeroTrustAccessApplicationsResultPolicy();
            _resultValue.approvalGroups = approvalGroups;
            _resultValue.approvalRequired = approvalRequired;
            _resultValue.connectionRules = connectionRules;
            _resultValue.createdAt = createdAt;
            _resultValue.decision = decision;
            _resultValue.excludes = excludes;
            _resultValue.id = id;
            _resultValue.includes = includes;
            _resultValue.isolationRequired = isolationRequired;
            _resultValue.name = name;
            _resultValue.precedence = precedence;
            _resultValue.purposeJustificationPrompt = purposeJustificationPrompt;
            _resultValue.purposeJustificationRequired = purposeJustificationRequired;
            _resultValue.requires = requires;
            _resultValue.sessionDuration = sessionDuration;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
