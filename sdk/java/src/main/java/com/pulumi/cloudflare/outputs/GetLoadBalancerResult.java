// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetLoadBalancerAdaptiveRouting;
import com.pulumi.cloudflare.outputs.GetLoadBalancerLocationStrategy;
import com.pulumi.cloudflare.outputs.GetLoadBalancerRandomSteering;
import com.pulumi.cloudflare.outputs.GetLoadBalancerRule;
import com.pulumi.cloudflare.outputs.GetLoadBalancerSessionAffinityAttributes;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLoadBalancerResult {
    /**
     * @return Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    private GetLoadBalancerAdaptiveRouting adaptiveRouting;
    /**
     * @return A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    private Map<String,List<String>> countryPools;
    private String createdOn;
    /**
     * @return A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when regionPools are not configured for a given region.
     * 
     */
    private List<String> defaultPools;
    /**
     * @return Object description.
     * 
     */
    private String description;
    /**
     * @return Whether to enable (the default) this load balancer.
     * 
     */
    private Boolean enabled;
    /**
     * @return The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    private String fallbackPool;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    private @Nullable String loadBalancerId;
    /**
     * @return Controls location-based steering for non-proxied requests. See `steeringPolicy` to learn how steering is affected.
     * 
     */
    private GetLoadBalancerLocationStrategy locationStrategy;
    private String modifiedOn;
    /**
     * @return The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare&#39;s DNS, the Load Balancer will take precedence and the DNS record will not be used.
     * 
     */
    private String name;
    /**
     * @return List of networks where Load Balancer or Pool is enabled.
     * 
     */
    private List<String> networks;
    /**
     * @return Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    private Map<String,List<String>> popPools;
    /**
     * @return Whether the hostname should be gray clouded (false) or orange clouded (true).
     * 
     */
    private Boolean proxied;
    /**
     * @return Configures pool weights.
     * 
     */
    private GetLoadBalancerRandomSteering randomSteering;
    /**
     * @return A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    private Map<String,List<String>> regionPools;
    /**
     * @return BETA Field Not General Access: A list of rules for this load balancer to execute.
     * 
     */
    private List<GetLoadBalancerRule> rules;
    /**
     * @return Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are: - `&#34;cookie&#34;`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `&#34;ipCookie&#34;`: Behaves the same as `&#34;cookie&#34;` except the initial origin selection is stable and based on the client&#39;s ip address. - `&#34;header&#34;`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `sessionAffinityTtl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `sessionAffinityAttributes` for additional required configuration.
     * Available values: &#34;none&#34;, &#34;cookie&#34;, &#34;ipCookie&#34;, &#34;header&#34;.
     * 
     */
    private String sessionAffinity;
    /**
     * @return Configures attributes for session affinity.
     * 
     */
    private GetLoadBalancerSessionAffinityAttributes sessionAffinityAttributes;
    /**
     * @return Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are: - `&#34;cookie&#34;` / `&#34;ipCookie&#34;`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `&#34;header&#34;`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven&#39;t been used for the number of seconds specified.
     * 
     */
    private Double sessionAffinityTtl;
    /**
     * @return Steering Policy for this load balancer.
     * 
     */
    private String steeringPolicy;
    /**
     * @return Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    private Double ttl;
    private String zoneId;

    private GetLoadBalancerResult() {}
    /**
     * @return Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    public GetLoadBalancerAdaptiveRouting adaptiveRouting() {
        return this.adaptiveRouting;
    }
    /**
     * @return A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    public Map<String,List<String>> countryPools() {
        return this.countryPools;
    }
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when regionPools are not configured for a given region.
     * 
     */
    public List<String> defaultPools() {
        return this.defaultPools;
    }
    /**
     * @return Object description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether to enable (the default) this load balancer.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    public String fallbackPool() {
        return this.fallbackPool;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> loadBalancerId() {
        return Optional.ofNullable(this.loadBalancerId);
    }
    /**
     * @return Controls location-based steering for non-proxied requests. See `steeringPolicy` to learn how steering is affected.
     * 
     */
    public GetLoadBalancerLocationStrategy locationStrategy() {
        return this.locationStrategy;
    }
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare&#39;s DNS, the Load Balancer will take precedence and the DNS record will not be used.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of networks where Load Balancer or Pool is enabled.
     * 
     */
    public List<String> networks() {
        return this.networks;
    }
    /**
     * @return Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    public Map<String,List<String>> popPools() {
        return this.popPools;
    }
    /**
     * @return Whether the hostname should be gray clouded (false) or orange clouded (true).
     * 
     */
    public Boolean proxied() {
        return this.proxied;
    }
    /**
     * @return Configures pool weights.
     * 
     */
    public GetLoadBalancerRandomSteering randomSteering() {
        return this.randomSteering;
    }
    /**
     * @return A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    public Map<String,List<String>> regionPools() {
        return this.regionPools;
    }
    /**
     * @return BETA Field Not General Access: A list of rules for this load balancer to execute.
     * 
     */
    public List<GetLoadBalancerRule> rules() {
        return this.rules;
    }
    /**
     * @return Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are: - `&#34;cookie&#34;`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `&#34;ipCookie&#34;`: Behaves the same as `&#34;cookie&#34;` except the initial origin selection is stable and based on the client&#39;s ip address. - `&#34;header&#34;`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `sessionAffinityTtl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `sessionAffinityAttributes` for additional required configuration.
     * Available values: &#34;none&#34;, &#34;cookie&#34;, &#34;ipCookie&#34;, &#34;header&#34;.
     * 
     */
    public String sessionAffinity() {
        return this.sessionAffinity;
    }
    /**
     * @return Configures attributes for session affinity.
     * 
     */
    public GetLoadBalancerSessionAffinityAttributes sessionAffinityAttributes() {
        return this.sessionAffinityAttributes;
    }
    /**
     * @return Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are: - `&#34;cookie&#34;` / `&#34;ipCookie&#34;`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `&#34;header&#34;`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven&#39;t been used for the number of seconds specified.
     * 
     */
    public Double sessionAffinityTtl() {
        return this.sessionAffinityTtl;
    }
    /**
     * @return Steering Policy for this load balancer.
     * 
     */
    public String steeringPolicy() {
        return this.steeringPolicy;
    }
    /**
     * @return Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    public Double ttl() {
        return this.ttl;
    }
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetLoadBalancerAdaptiveRouting adaptiveRouting;
        private Map<String,List<String>> countryPools;
        private String createdOn;
        private List<String> defaultPools;
        private String description;
        private Boolean enabled;
        private String fallbackPool;
        private String id;
        private @Nullable String loadBalancerId;
        private GetLoadBalancerLocationStrategy locationStrategy;
        private String modifiedOn;
        private String name;
        private List<String> networks;
        private Map<String,List<String>> popPools;
        private Boolean proxied;
        private GetLoadBalancerRandomSteering randomSteering;
        private Map<String,List<String>> regionPools;
        private List<GetLoadBalancerRule> rules;
        private String sessionAffinity;
        private GetLoadBalancerSessionAffinityAttributes sessionAffinityAttributes;
        private Double sessionAffinityTtl;
        private String steeringPolicy;
        private Double ttl;
        private String zoneId;
        public Builder() {}
        public Builder(GetLoadBalancerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adaptiveRouting = defaults.adaptiveRouting;
    	      this.countryPools = defaults.countryPools;
    	      this.createdOn = defaults.createdOn;
    	      this.defaultPools = defaults.defaultPools;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.fallbackPool = defaults.fallbackPool;
    	      this.id = defaults.id;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.locationStrategy = defaults.locationStrategy;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.name = defaults.name;
    	      this.networks = defaults.networks;
    	      this.popPools = defaults.popPools;
    	      this.proxied = defaults.proxied;
    	      this.randomSteering = defaults.randomSteering;
    	      this.regionPools = defaults.regionPools;
    	      this.rules = defaults.rules;
    	      this.sessionAffinity = defaults.sessionAffinity;
    	      this.sessionAffinityAttributes = defaults.sessionAffinityAttributes;
    	      this.sessionAffinityTtl = defaults.sessionAffinityTtl;
    	      this.steeringPolicy = defaults.steeringPolicy;
    	      this.ttl = defaults.ttl;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder adaptiveRouting(GetLoadBalancerAdaptiveRouting adaptiveRouting) {
            if (adaptiveRouting == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "adaptiveRouting");
            }
            this.adaptiveRouting = adaptiveRouting;
            return this;
        }
        @CustomType.Setter
        public Builder countryPools(Map<String,List<String>> countryPools) {
            if (countryPools == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "countryPools");
            }
            this.countryPools = countryPools;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPools(List<String> defaultPools) {
            if (defaultPools == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "defaultPools");
            }
            this.defaultPools = defaultPools;
            return this;
        }
        public Builder defaultPools(String... defaultPools) {
            return defaultPools(List.of(defaultPools));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackPool(String fallbackPool) {
            if (fallbackPool == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "fallbackPool");
            }
            this.fallbackPool = fallbackPool;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(@Nullable String loadBalancerId) {

            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder locationStrategy(GetLoadBalancerLocationStrategy locationStrategy) {
            if (locationStrategy == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "locationStrategy");
            }
            this.locationStrategy = locationStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networks(List<String> networks) {
            if (networks == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "networks");
            }
            this.networks = networks;
            return this;
        }
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }
        @CustomType.Setter
        public Builder popPools(Map<String,List<String>> popPools) {
            if (popPools == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "popPools");
            }
            this.popPools = popPools;
            return this;
        }
        @CustomType.Setter
        public Builder proxied(Boolean proxied) {
            if (proxied == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "proxied");
            }
            this.proxied = proxied;
            return this;
        }
        @CustomType.Setter
        public Builder randomSteering(GetLoadBalancerRandomSteering randomSteering) {
            if (randomSteering == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "randomSteering");
            }
            this.randomSteering = randomSteering;
            return this;
        }
        @CustomType.Setter
        public Builder regionPools(Map<String,List<String>> regionPools) {
            if (regionPools == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "regionPools");
            }
            this.regionPools = regionPools;
            return this;
        }
        @CustomType.Setter
        public Builder rules(List<GetLoadBalancerRule> rules) {
            if (rules == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "rules");
            }
            this.rules = rules;
            return this;
        }
        public Builder rules(GetLoadBalancerRule... rules) {
            return rules(List.of(rules));
        }
        @CustomType.Setter
        public Builder sessionAffinity(String sessionAffinity) {
            if (sessionAffinity == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "sessionAffinity");
            }
            this.sessionAffinity = sessionAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinityAttributes(GetLoadBalancerSessionAffinityAttributes sessionAffinityAttributes) {
            if (sessionAffinityAttributes == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "sessionAffinityAttributes");
            }
            this.sessionAffinityAttributes = sessionAffinityAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinityTtl(Double sessionAffinityTtl) {
            if (sessionAffinityTtl == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "sessionAffinityTtl");
            }
            this.sessionAffinityTtl = sessionAffinityTtl;
            return this;
        }
        @CustomType.Setter
        public Builder steeringPolicy(String steeringPolicy) {
            if (steeringPolicy == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "steeringPolicy");
            }
            this.steeringPolicy = steeringPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(Double ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetLoadBalancerResult build() {
            final var _resultValue = new GetLoadBalancerResult();
            _resultValue.adaptiveRouting = adaptiveRouting;
            _resultValue.countryPools = countryPools;
            _resultValue.createdOn = createdOn;
            _resultValue.defaultPools = defaultPools;
            _resultValue.description = description;
            _resultValue.enabled = enabled;
            _resultValue.fallbackPool = fallbackPool;
            _resultValue.id = id;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.locationStrategy = locationStrategy;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.name = name;
            _resultValue.networks = networks;
            _resultValue.popPools = popPools;
            _resultValue.proxied = proxied;
            _resultValue.randomSteering = randomSteering;
            _resultValue.regionPools = regionPools;
            _resultValue.rules = rules;
            _resultValue.sessionAffinity = sessionAffinity;
            _resultValue.sessionAffinityAttributes = sessionAffinityAttributes;
            _resultValue.sessionAffinityTtl = sessionAffinityTtl;
            _resultValue.steeringPolicy = steeringPolicy;
            _resultValue.ttl = ttl;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
