// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.DevicePostureRuleInputLocations;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DevicePostureRuleInput {
    /**
     * @return The Number of active threats.
     * 
     */
    private @Nullable Double activeThreats;
    /**
     * @return UUID of Cloudflare managed certificate.
     * 
     */
    private @Nullable String certificateId;
    /**
     * @return List of volume names to be checked for encryption.
     * 
     */
    private @Nullable List<String> checkDisks;
    /**
     * @return Confirm the certificate was not imported from another device. We recommend keeping this enabled unless the certificate was deployed without a private key.
     * 
     */
    private @Nullable Boolean checkPrivateKey;
    /**
     * @return Common Name that is protected by the certificate.
     * 
     */
    private @Nullable String cn;
    /**
     * @return Compliance Status.
     * Available values: &#34;compliant&#34;, &#34;noncompliant&#34;, &#34;unknown&#34;, &#34;notapplicable&#34;, &#34;ingraceperiod&#34;, &#34;error&#34;.
     * 
     */
    private @Nullable String complianceStatus;
    /**
     * @return Posture Integration ID.
     * 
     */
    private @Nullable String connectionId;
    /**
     * @return Count Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    private @Nullable String countOperator;
    /**
     * @return Domain.
     * 
     */
    private @Nullable String domain;
    /**
     * @return For more details on eid last seen, refer to the Tanium documentation.
     * 
     */
    private @Nullable String eidLastSeen;
    /**
     * @return Enabled.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Whether or not file exists.
     * 
     */
    private @Nullable Boolean exists;
    /**
     * @return List of values indicating purposes for which the certificate public key can be used.
     * 
     */
    private @Nullable List<String> extendedKeyUsages;
    /**
     * @return List ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Whether device is infected.
     * 
     */
    private @Nullable Boolean infected;
    /**
     * @return Whether device is active.
     * 
     */
    private @Nullable Boolean isActive;
    /**
     * @return The Number of Issues.
     * 
     */
    private @Nullable String issueCount;
    /**
     * @return For more details on last seen, please refer to the Crowdstrike documentation.
     * 
     */
    private @Nullable String lastSeen;
    private @Nullable DevicePostureRuleInputLocations locations;
    /**
     * @return Network status of device.
     * Available values: &#34;connected&#34;, &#34;disconnected&#34;, &#34;disconnecting&#34;, &#34;connecting&#34;.
     * 
     */
    private @Nullable String networkStatus;
    /**
     * @return Operating system.
     * Available values: &#34;windows&#34;, &#34;linux&#34;, &#34;mac&#34;, &#34;android&#34;, &#34;ios&#34;, &#34;chromeos&#34;.
     * 
     */
    private @Nullable String operatingSystem;
    /**
     * @return Agent operational state.
     * Available values: &#34;na&#34;, &#34;partially*disabled&#34;, &#34;auto*fully*disabled&#34;, &#34;fully*disabled&#34;, &#34;auto*partially*disabled&#34;, &#34;disabled*error&#34;, &#34;db*corruption&#34;.
     * 
     */
    private @Nullable String operationalState;
    /**
     * @return Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    private @Nullable String operator;
    /**
     * @return Os Version.
     * 
     */
    private @Nullable String os;
    /**
     * @return Operating System Distribution Name (linux only).
     * 
     */
    private @Nullable String osDistroName;
    /**
     * @return Version of OS Distribution (linux only).
     * 
     */
    private @Nullable String osDistroRevision;
    /**
     * @return Additional version data. For Mac or iOS, the Product Version Extra. For Linux, the kernel release version. (Mac, iOS, and Linux only).
     * 
     */
    private @Nullable String osVersionExtra;
    /**
     * @return Overall.
     * 
     */
    private @Nullable String overall;
    /**
     * @return File path.
     * 
     */
    private @Nullable String path;
    /**
     * @return Whether to check all disks for encryption.
     * 
     */
    private @Nullable Boolean requireAll;
    /**
     * @return For more details on risk level, refer to the Tanium documentation.
     * Available values: &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;critical&#34;.
     * 
     */
    private @Nullable String riskLevel;
    /**
     * @return A value between 0-100 assigned to devices set by the 3rd party posture provider.
     * 
     */
    private @Nullable Double score;
    /**
     * @return Score Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    private @Nullable String scoreOperator;
    /**
     * @return SensorConfig.
     * 
     */
    private @Nullable String sensorConfig;
    /**
     * @return SHA-256.
     * 
     */
    private @Nullable String sha256;
    /**
     * @return For more details on state, please refer to the Crowdstrike documentation.
     * Available values: &#34;online&#34;, &#34;offline&#34;, &#34;unknown&#34;.
     * 
     */
    private @Nullable String state;
    /**
     * @return List of certificate Subject Alternative Names.
     * 
     */
    private @Nullable List<String> subjectAlternativeNames;
    /**
     * @return Signing certificate thumbprint.
     * 
     */
    private @Nullable String thumbprint;
    /**
     * @return For more details on total score, refer to the Tanium documentation.
     * 
     */
    private @Nullable Double totalScore;
    /**
     * @return Version of OS.
     * 
     */
    private @Nullable String version;
    /**
     * @return Version Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    private @Nullable String versionOperator;

    private DevicePostureRuleInput() {}
    /**
     * @return The Number of active threats.
     * 
     */
    public Optional<Double> activeThreats() {
        return Optional.ofNullable(this.activeThreats);
    }
    /**
     * @return UUID of Cloudflare managed certificate.
     * 
     */
    public Optional<String> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }
    /**
     * @return List of volume names to be checked for encryption.
     * 
     */
    public List<String> checkDisks() {
        return this.checkDisks == null ? List.of() : this.checkDisks;
    }
    /**
     * @return Confirm the certificate was not imported from another device. We recommend keeping this enabled unless the certificate was deployed without a private key.
     * 
     */
    public Optional<Boolean> checkPrivateKey() {
        return Optional.ofNullable(this.checkPrivateKey);
    }
    /**
     * @return Common Name that is protected by the certificate.
     * 
     */
    public Optional<String> cn() {
        return Optional.ofNullable(this.cn);
    }
    /**
     * @return Compliance Status.
     * Available values: &#34;compliant&#34;, &#34;noncompliant&#34;, &#34;unknown&#34;, &#34;notapplicable&#34;, &#34;ingraceperiod&#34;, &#34;error&#34;.
     * 
     */
    public Optional<String> complianceStatus() {
        return Optional.ofNullable(this.complianceStatus);
    }
    /**
     * @return Posture Integration ID.
     * 
     */
    public Optional<String> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }
    /**
     * @return Count Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    public Optional<String> countOperator() {
        return Optional.ofNullable(this.countOperator);
    }
    /**
     * @return Domain.
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return For more details on eid last seen, refer to the Tanium documentation.
     * 
     */
    public Optional<String> eidLastSeen() {
        return Optional.ofNullable(this.eidLastSeen);
    }
    /**
     * @return Enabled.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Whether or not file exists.
     * 
     */
    public Optional<Boolean> exists() {
        return Optional.ofNullable(this.exists);
    }
    /**
     * @return List of values indicating purposes for which the certificate public key can be used.
     * 
     */
    public List<String> extendedKeyUsages() {
        return this.extendedKeyUsages == null ? List.of() : this.extendedKeyUsages;
    }
    /**
     * @return List ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether device is infected.
     * 
     */
    public Optional<Boolean> infected() {
        return Optional.ofNullable(this.infected);
    }
    /**
     * @return Whether device is active.
     * 
     */
    public Optional<Boolean> isActive() {
        return Optional.ofNullable(this.isActive);
    }
    /**
     * @return The Number of Issues.
     * 
     */
    public Optional<String> issueCount() {
        return Optional.ofNullable(this.issueCount);
    }
    /**
     * @return For more details on last seen, please refer to the Crowdstrike documentation.
     * 
     */
    public Optional<String> lastSeen() {
        return Optional.ofNullable(this.lastSeen);
    }
    public Optional<DevicePostureRuleInputLocations> locations() {
        return Optional.ofNullable(this.locations);
    }
    /**
     * @return Network status of device.
     * Available values: &#34;connected&#34;, &#34;disconnected&#34;, &#34;disconnecting&#34;, &#34;connecting&#34;.
     * 
     */
    public Optional<String> networkStatus() {
        return Optional.ofNullable(this.networkStatus);
    }
    /**
     * @return Operating system.
     * Available values: &#34;windows&#34;, &#34;linux&#34;, &#34;mac&#34;, &#34;android&#34;, &#34;ios&#34;, &#34;chromeos&#34;.
     * 
     */
    public Optional<String> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }
    /**
     * @return Agent operational state.
     * Available values: &#34;na&#34;, &#34;partially*disabled&#34;, &#34;auto*fully*disabled&#34;, &#34;fully*disabled&#34;, &#34;auto*partially*disabled&#34;, &#34;disabled*error&#34;, &#34;db*corruption&#34;.
     * 
     */
    public Optional<String> operationalState() {
        return Optional.ofNullable(this.operationalState);
    }
    /**
     * @return Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    public Optional<String> operator() {
        return Optional.ofNullable(this.operator);
    }
    /**
     * @return Os Version.
     * 
     */
    public Optional<String> os() {
        return Optional.ofNullable(this.os);
    }
    /**
     * @return Operating System Distribution Name (linux only).
     * 
     */
    public Optional<String> osDistroName() {
        return Optional.ofNullable(this.osDistroName);
    }
    /**
     * @return Version of OS Distribution (linux only).
     * 
     */
    public Optional<String> osDistroRevision() {
        return Optional.ofNullable(this.osDistroRevision);
    }
    /**
     * @return Additional version data. For Mac or iOS, the Product Version Extra. For Linux, the kernel release version. (Mac, iOS, and Linux only).
     * 
     */
    public Optional<String> osVersionExtra() {
        return Optional.ofNullable(this.osVersionExtra);
    }
    /**
     * @return Overall.
     * 
     */
    public Optional<String> overall() {
        return Optional.ofNullable(this.overall);
    }
    /**
     * @return File path.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Whether to check all disks for encryption.
     * 
     */
    public Optional<Boolean> requireAll() {
        return Optional.ofNullable(this.requireAll);
    }
    /**
     * @return For more details on risk level, refer to the Tanium documentation.
     * Available values: &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;critical&#34;.
     * 
     */
    public Optional<String> riskLevel() {
        return Optional.ofNullable(this.riskLevel);
    }
    /**
     * @return A value between 0-100 assigned to devices set by the 3rd party posture provider.
     * 
     */
    public Optional<Double> score() {
        return Optional.ofNullable(this.score);
    }
    /**
     * @return Score Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    public Optional<String> scoreOperator() {
        return Optional.ofNullable(this.scoreOperator);
    }
    /**
     * @return SensorConfig.
     * 
     */
    public Optional<String> sensorConfig() {
        return Optional.ofNullable(this.sensorConfig);
    }
    /**
     * @return SHA-256.
     * 
     */
    public Optional<String> sha256() {
        return Optional.ofNullable(this.sha256);
    }
    /**
     * @return For more details on state, please refer to the Crowdstrike documentation.
     * Available values: &#34;online&#34;, &#34;offline&#34;, &#34;unknown&#34;.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return List of certificate Subject Alternative Names.
     * 
     */
    public List<String> subjectAlternativeNames() {
        return this.subjectAlternativeNames == null ? List.of() : this.subjectAlternativeNames;
    }
    /**
     * @return Signing certificate thumbprint.
     * 
     */
    public Optional<String> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }
    /**
     * @return For more details on total score, refer to the Tanium documentation.
     * 
     */
    public Optional<Double> totalScore() {
        return Optional.ofNullable(this.totalScore);
    }
    /**
     * @return Version of OS.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }
    /**
     * @return Version Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    public Optional<String> versionOperator() {
        return Optional.ofNullable(this.versionOperator);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DevicePostureRuleInput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double activeThreats;
        private @Nullable String certificateId;
        private @Nullable List<String> checkDisks;
        private @Nullable Boolean checkPrivateKey;
        private @Nullable String cn;
        private @Nullable String complianceStatus;
        private @Nullable String connectionId;
        private @Nullable String countOperator;
        private @Nullable String domain;
        private @Nullable String eidLastSeen;
        private @Nullable Boolean enabled;
        private @Nullable Boolean exists;
        private @Nullable List<String> extendedKeyUsages;
        private @Nullable String id;
        private @Nullable Boolean infected;
        private @Nullable Boolean isActive;
        private @Nullable String issueCount;
        private @Nullable String lastSeen;
        private @Nullable DevicePostureRuleInputLocations locations;
        private @Nullable String networkStatus;
        private @Nullable String operatingSystem;
        private @Nullable String operationalState;
        private @Nullable String operator;
        private @Nullable String os;
        private @Nullable String osDistroName;
        private @Nullable String osDistroRevision;
        private @Nullable String osVersionExtra;
        private @Nullable String overall;
        private @Nullable String path;
        private @Nullable Boolean requireAll;
        private @Nullable String riskLevel;
        private @Nullable Double score;
        private @Nullable String scoreOperator;
        private @Nullable String sensorConfig;
        private @Nullable String sha256;
        private @Nullable String state;
        private @Nullable List<String> subjectAlternativeNames;
        private @Nullable String thumbprint;
        private @Nullable Double totalScore;
        private @Nullable String version;
        private @Nullable String versionOperator;
        public Builder() {}
        public Builder(DevicePostureRuleInput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeThreats = defaults.activeThreats;
    	      this.certificateId = defaults.certificateId;
    	      this.checkDisks = defaults.checkDisks;
    	      this.checkPrivateKey = defaults.checkPrivateKey;
    	      this.cn = defaults.cn;
    	      this.complianceStatus = defaults.complianceStatus;
    	      this.connectionId = defaults.connectionId;
    	      this.countOperator = defaults.countOperator;
    	      this.domain = defaults.domain;
    	      this.eidLastSeen = defaults.eidLastSeen;
    	      this.enabled = defaults.enabled;
    	      this.exists = defaults.exists;
    	      this.extendedKeyUsages = defaults.extendedKeyUsages;
    	      this.id = defaults.id;
    	      this.infected = defaults.infected;
    	      this.isActive = defaults.isActive;
    	      this.issueCount = defaults.issueCount;
    	      this.lastSeen = defaults.lastSeen;
    	      this.locations = defaults.locations;
    	      this.networkStatus = defaults.networkStatus;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.operationalState = defaults.operationalState;
    	      this.operator = defaults.operator;
    	      this.os = defaults.os;
    	      this.osDistroName = defaults.osDistroName;
    	      this.osDistroRevision = defaults.osDistroRevision;
    	      this.osVersionExtra = defaults.osVersionExtra;
    	      this.overall = defaults.overall;
    	      this.path = defaults.path;
    	      this.requireAll = defaults.requireAll;
    	      this.riskLevel = defaults.riskLevel;
    	      this.score = defaults.score;
    	      this.scoreOperator = defaults.scoreOperator;
    	      this.sensorConfig = defaults.sensorConfig;
    	      this.sha256 = defaults.sha256;
    	      this.state = defaults.state;
    	      this.subjectAlternativeNames = defaults.subjectAlternativeNames;
    	      this.thumbprint = defaults.thumbprint;
    	      this.totalScore = defaults.totalScore;
    	      this.version = defaults.version;
    	      this.versionOperator = defaults.versionOperator;
        }

        @CustomType.Setter
        public Builder activeThreats(@Nullable Double activeThreats) {

            this.activeThreats = activeThreats;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(@Nullable String certificateId) {

            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder checkDisks(@Nullable List<String> checkDisks) {

            this.checkDisks = checkDisks;
            return this;
        }
        public Builder checkDisks(String... checkDisks) {
            return checkDisks(List.of(checkDisks));
        }
        @CustomType.Setter
        public Builder checkPrivateKey(@Nullable Boolean checkPrivateKey) {

            this.checkPrivateKey = checkPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder cn(@Nullable String cn) {

            this.cn = cn;
            return this;
        }
        @CustomType.Setter
        public Builder complianceStatus(@Nullable String complianceStatus) {

            this.complianceStatus = complianceStatus;
            return this;
        }
        @CustomType.Setter
        public Builder connectionId(@Nullable String connectionId) {

            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder countOperator(@Nullable String countOperator) {

            this.countOperator = countOperator;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {

            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder eidLastSeen(@Nullable String eidLastSeen) {

            this.eidLastSeen = eidLastSeen;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder exists(@Nullable Boolean exists) {

            this.exists = exists;
            return this;
        }
        @CustomType.Setter
        public Builder extendedKeyUsages(@Nullable List<String> extendedKeyUsages) {

            this.extendedKeyUsages = extendedKeyUsages;
            return this;
        }
        public Builder extendedKeyUsages(String... extendedKeyUsages) {
            return extendedKeyUsages(List.of(extendedKeyUsages));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder infected(@Nullable Boolean infected) {

            this.infected = infected;
            return this;
        }
        @CustomType.Setter
        public Builder isActive(@Nullable Boolean isActive) {

            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder issueCount(@Nullable String issueCount) {

            this.issueCount = issueCount;
            return this;
        }
        @CustomType.Setter
        public Builder lastSeen(@Nullable String lastSeen) {

            this.lastSeen = lastSeen;
            return this;
        }
        @CustomType.Setter
        public Builder locations(@Nullable DevicePostureRuleInputLocations locations) {

            this.locations = locations;
            return this;
        }
        @CustomType.Setter
        public Builder networkStatus(@Nullable String networkStatus) {

            this.networkStatus = networkStatus;
            return this;
        }
        @CustomType.Setter
        public Builder operatingSystem(@Nullable String operatingSystem) {

            this.operatingSystem = operatingSystem;
            return this;
        }
        @CustomType.Setter
        public Builder operationalState(@Nullable String operationalState) {

            this.operationalState = operationalState;
            return this;
        }
        @CustomType.Setter
        public Builder operator(@Nullable String operator) {

            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder os(@Nullable String os) {

            this.os = os;
            return this;
        }
        @CustomType.Setter
        public Builder osDistroName(@Nullable String osDistroName) {

            this.osDistroName = osDistroName;
            return this;
        }
        @CustomType.Setter
        public Builder osDistroRevision(@Nullable String osDistroRevision) {

            this.osDistroRevision = osDistroRevision;
            return this;
        }
        @CustomType.Setter
        public Builder osVersionExtra(@Nullable String osVersionExtra) {

            this.osVersionExtra = osVersionExtra;
            return this;
        }
        @CustomType.Setter
        public Builder overall(@Nullable String overall) {

            this.overall = overall;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder requireAll(@Nullable Boolean requireAll) {

            this.requireAll = requireAll;
            return this;
        }
        @CustomType.Setter
        public Builder riskLevel(@Nullable String riskLevel) {

            this.riskLevel = riskLevel;
            return this;
        }
        @CustomType.Setter
        public Builder score(@Nullable Double score) {

            this.score = score;
            return this;
        }
        @CustomType.Setter
        public Builder scoreOperator(@Nullable String scoreOperator) {

            this.scoreOperator = scoreOperator;
            return this;
        }
        @CustomType.Setter
        public Builder sensorConfig(@Nullable String sensorConfig) {

            this.sensorConfig = sensorConfig;
            return this;
        }
        @CustomType.Setter
        public Builder sha256(@Nullable String sha256) {

            this.sha256 = sha256;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subjectAlternativeNames(@Nullable List<String> subjectAlternativeNames) {

            this.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }
        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }
        @CustomType.Setter
        public Builder thumbprint(@Nullable String thumbprint) {

            this.thumbprint = thumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder totalScore(@Nullable Double totalScore) {

            this.totalScore = totalScore;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {

            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder versionOperator(@Nullable String versionOperator) {

            this.versionOperator = versionOperator;
            return this;
        }
        public DevicePostureRuleInput build() {
            final var _resultValue = new DevicePostureRuleInput();
            _resultValue.activeThreats = activeThreats;
            _resultValue.certificateId = certificateId;
            _resultValue.checkDisks = checkDisks;
            _resultValue.checkPrivateKey = checkPrivateKey;
            _resultValue.cn = cn;
            _resultValue.complianceStatus = complianceStatus;
            _resultValue.connectionId = connectionId;
            _resultValue.countOperator = countOperator;
            _resultValue.domain = domain;
            _resultValue.eidLastSeen = eidLastSeen;
            _resultValue.enabled = enabled;
            _resultValue.exists = exists;
            _resultValue.extendedKeyUsages = extendedKeyUsages;
            _resultValue.id = id;
            _resultValue.infected = infected;
            _resultValue.isActive = isActive;
            _resultValue.issueCount = issueCount;
            _resultValue.lastSeen = lastSeen;
            _resultValue.locations = locations;
            _resultValue.networkStatus = networkStatus;
            _resultValue.operatingSystem = operatingSystem;
            _resultValue.operationalState = operationalState;
            _resultValue.operator = operator;
            _resultValue.os = os;
            _resultValue.osDistroName = osDistroName;
            _resultValue.osDistroRevision = osDistroRevision;
            _resultValue.osVersionExtra = osVersionExtra;
            _resultValue.overall = overall;
            _resultValue.path = path;
            _resultValue.requireAll = requireAll;
            _resultValue.riskLevel = riskLevel;
            _resultValue.score = score;
            _resultValue.scoreOperator = scoreOperator;
            _resultValue.sensorConfig = sensorConfig;
            _resultValue.sha256 = sha256;
            _resultValue.state = state;
            _resultValue.subjectAlternativeNames = subjectAlternativeNames;
            _resultValue.thumbprint = thumbprint;
            _resultValue.totalScore = totalScore;
            _resultValue.version = version;
            _resultValue.versionOperator = versionOperator;
            return _resultValue;
        }
    }
}
