// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs Empty = new R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs();

    @Import(name="maxAge", required=true)
    private Output<Integer> maxAge;

    public Output<Integer> maxAge() {
        return this.maxAge;
    }

    /**
     * Available values: &#34;Age&#34;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Available values: &#34;Age&#34;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs() {}

    private R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs(R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs $) {
        this.maxAge = $.maxAge;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs $;

        public Builder() {
            $ = new R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs();
        }

        public Builder(R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs defaults) {
            $ = new R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder maxAge(Output<Integer> maxAge) {
            $.maxAge = maxAge;
            return this;
        }

        public Builder maxAge(Integer maxAge) {
            return maxAge(Output.of(maxAge));
        }

        /**
         * @param type Available values: &#34;Age&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Available values: &#34;Age&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs build() {
            if ($.maxAge == null) {
                throw new MissingRequiredPropertyException("R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs", "maxAge");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("R2BucketLifecycleRuleAbortMultipartUploadsTransitionConditionArgs", "type");
            }
            return $;
        }
    }

}
