// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ListItemRedirect {
    /**
     * @return Whether the redirect also matches subdomains of the source url.
     * 
     */
    private @Nullable Boolean includeSubdomains;
    /**
     * @return Whether the redirect target url should keep the query string of the request&#39;s url.
     * 
     */
    private @Nullable Boolean preservePathSuffix;
    /**
     * @return Whether the redirect target url should keep the query string of the request&#39;s url.
     * 
     */
    private @Nullable Boolean preserveQueryString;
    /**
     * @return The source url of the redirect.
     * 
     */
    private String sourceUrl;
    /**
     * @return The status code to be used when redirecting a request.
     * 
     */
    private @Nullable Integer statusCode;
    /**
     * @return Whether the redirect also matches subpaths of the source url.
     * 
     */
    private @Nullable Boolean subpathMatching;
    /**
     * @return The target url of the redirect.
     * 
     */
    private String targetUrl;

    private ListItemRedirect() {}
    /**
     * @return Whether the redirect also matches subdomains of the source url.
     * 
     */
    public Optional<Boolean> includeSubdomains() {
        return Optional.ofNullable(this.includeSubdomains);
    }
    /**
     * @return Whether the redirect target url should keep the query string of the request&#39;s url.
     * 
     */
    public Optional<Boolean> preservePathSuffix() {
        return Optional.ofNullable(this.preservePathSuffix);
    }
    /**
     * @return Whether the redirect target url should keep the query string of the request&#39;s url.
     * 
     */
    public Optional<Boolean> preserveQueryString() {
        return Optional.ofNullable(this.preserveQueryString);
    }
    /**
     * @return The source url of the redirect.
     * 
     */
    public String sourceUrl() {
        return this.sourceUrl;
    }
    /**
     * @return The status code to be used when redirecting a request.
     * 
     */
    public Optional<Integer> statusCode() {
        return Optional.ofNullable(this.statusCode);
    }
    /**
     * @return Whether the redirect also matches subpaths of the source url.
     * 
     */
    public Optional<Boolean> subpathMatching() {
        return Optional.ofNullable(this.subpathMatching);
    }
    /**
     * @return The target url of the redirect.
     * 
     */
    public String targetUrl() {
        return this.targetUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListItemRedirect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean includeSubdomains;
        private @Nullable Boolean preservePathSuffix;
        private @Nullable Boolean preserveQueryString;
        private String sourceUrl;
        private @Nullable Integer statusCode;
        private @Nullable Boolean subpathMatching;
        private String targetUrl;
        public Builder() {}
        public Builder(ListItemRedirect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.includeSubdomains = defaults.includeSubdomains;
    	      this.preservePathSuffix = defaults.preservePathSuffix;
    	      this.preserveQueryString = defaults.preserveQueryString;
    	      this.sourceUrl = defaults.sourceUrl;
    	      this.statusCode = defaults.statusCode;
    	      this.subpathMatching = defaults.subpathMatching;
    	      this.targetUrl = defaults.targetUrl;
        }

        @CustomType.Setter
        public Builder includeSubdomains(@Nullable Boolean includeSubdomains) {

            this.includeSubdomains = includeSubdomains;
            return this;
        }
        @CustomType.Setter
        public Builder preservePathSuffix(@Nullable Boolean preservePathSuffix) {

            this.preservePathSuffix = preservePathSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder preserveQueryString(@Nullable Boolean preserveQueryString) {

            this.preserveQueryString = preserveQueryString;
            return this;
        }
        @CustomType.Setter
        public Builder sourceUrl(String sourceUrl) {
            if (sourceUrl == null) {
              throw new MissingRequiredPropertyException("ListItemRedirect", "sourceUrl");
            }
            this.sourceUrl = sourceUrl;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(@Nullable Integer statusCode) {

            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder subpathMatching(@Nullable Boolean subpathMatching) {

            this.subpathMatching = subpathMatching;
            return this;
        }
        @CustomType.Setter
        public Builder targetUrl(String targetUrl) {
            if (targetUrl == null) {
              throw new MissingRequiredPropertyException("ListItemRedirect", "targetUrl");
            }
            this.targetUrl = targetUrl;
            return this;
        }
        public ListItemRedirect build() {
            final var _resultValue = new ListItemRedirect();
            _resultValue.includeSubdomains = includeSubdomains;
            _resultValue.preservePathSuffix = preservePathSuffix;
            _resultValue.preserveQueryString = preserveQueryString;
            _resultValue.sourceUrl = sourceUrl;
            _resultValue.statusCode = statusCode;
            _resultValue.subpathMatching = subpathMatching;
            _resultValue.targetUrl = targetUrl;
            return _resultValue;
        }
    }
}
