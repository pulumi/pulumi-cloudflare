// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StreamStatus {
    /**
     * @return Specifies why the video failed to encode. This field is empty if the video is not in an `error` state. Preferred for programmatic use.
     * 
     */
    private @Nullable String errorReasonCode;
    /**
     * @return Specifies why the video failed to encode using a human readable error message in English. This field is empty if the video is not in an `error` state.
     * 
     */
    private @Nullable String errorReasonText;
    /**
     * @return Indicates the size of the entire upload in bytes. The value must be a non-negative integer.
     * 
     */
    private @Nullable String pctComplete;
    /**
     * @return Specifies the processing status for all quality levels for a video.
     * 
     */
    private @Nullable String state;

    private StreamStatus() {}
    /**
     * @return Specifies why the video failed to encode. This field is empty if the video is not in an `error` state. Preferred for programmatic use.
     * 
     */
    public Optional<String> errorReasonCode() {
        return Optional.ofNullable(this.errorReasonCode);
    }
    /**
     * @return Specifies why the video failed to encode using a human readable error message in English. This field is empty if the video is not in an `error` state.
     * 
     */
    public Optional<String> errorReasonText() {
        return Optional.ofNullable(this.errorReasonText);
    }
    /**
     * @return Indicates the size of the entire upload in bytes. The value must be a non-negative integer.
     * 
     */
    public Optional<String> pctComplete() {
        return Optional.ofNullable(this.pctComplete);
    }
    /**
     * @return Specifies the processing status for all quality levels for a video.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamStatus defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String errorReasonCode;
        private @Nullable String errorReasonText;
        private @Nullable String pctComplete;
        private @Nullable String state;
        public Builder() {}
        public Builder(StreamStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.errorReasonCode = defaults.errorReasonCode;
    	      this.errorReasonText = defaults.errorReasonText;
    	      this.pctComplete = defaults.pctComplete;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder errorReasonCode(@Nullable String errorReasonCode) {

            this.errorReasonCode = errorReasonCode;
            return this;
        }
        @CustomType.Setter
        public Builder errorReasonText(@Nullable String errorReasonText) {

            this.errorReasonText = errorReasonText;
            return this;
        }
        @CustomType.Setter
        public Builder pctComplete(@Nullable String pctComplete) {

            this.pctComplete = pctComplete;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {

            this.state = state;
            return this;
        }
        public StreamStatus build() {
            final var _resultValue = new StreamStatus();
            _resultValue.errorReasonCode = errorReasonCode;
            _resultValue.errorReasonText = errorReasonText;
            _resultValue.pctComplete = pctComplete;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}
