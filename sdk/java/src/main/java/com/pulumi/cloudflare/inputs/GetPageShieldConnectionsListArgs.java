// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPageShieldConnectionsListArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPageShieldConnectionsListArgs Empty = new GetPageShieldConnectionsListArgs();

    /**
     * The direction used to sort returned connections.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<String> direction;

    /**
     * @return The direction used to sort returned connections.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    public Optional<Output<String>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * When true, excludes connections seen in a `/cdn-cgi` path from the returned connections. The default value is true.
     * 
     */
    @Import(name="excludeCdnCgi")
    private @Nullable Output<Boolean> excludeCdnCgi;

    /**
     * @return When true, excludes connections seen in a `/cdn-cgi` path from the returned connections. The default value is true.
     * 
     */
    public Optional<Output<Boolean>> excludeCdnCgi() {
        return Optional.ofNullable(this.excludeCdnCgi);
    }

    /**
     * Excludes connections whose URL contains one of the URL-encoded URLs separated by commas.
     * 
     */
    @Import(name="excludeUrls")
    private @Nullable Output<String> excludeUrls;

    /**
     * @return Excludes connections whose URL contains one of the URL-encoded URLs separated by commas.
     * 
     */
    public Optional<Output<String>> excludeUrls() {
        return Optional.ofNullable(this.excludeUrls);
    }

    /**
     * Export the list of connections as a file.
     * Available values: &#34;csv&#34;.
     * 
     */
    @Import(name="export")
    private @Nullable Output<String> export;

    /**
     * @return Export the list of connections as a file.
     * Available values: &#34;csv&#34;.
     * 
     */
    public Optional<Output<String>> export() {
        return Optional.ofNullable(this.export);
    }

    /**
     * Includes connections that match one or more URL-encoded hostnames separated by commas.
     * 
     */
    @Import(name="hosts")
    private @Nullable Output<String> hosts;

    /**
     * @return Includes connections that match one or more URL-encoded hostnames separated by commas.
     * 
     */
    public Optional<Output<String>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    @Import(name="maxItems")
    private @Nullable Output<Integer> maxItems;

    public Optional<Output<Integer>> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    @Import(name="orderBy")
    private @Nullable Output<String> orderBy;

    public Optional<Output<String>> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    @Import(name="page")
    private @Nullable Output<String> page;

    public Optional<Output<String>> page() {
        return Optional.ofNullable(this.page);
    }

    @Import(name="pageUrl")
    private @Nullable Output<String> pageUrl;

    public Optional<Output<String>> pageUrl() {
        return Optional.ofNullable(this.pageUrl);
    }

    @Import(name="perPage")
    private @Nullable Output<Double> perPage;

    public Optional<Output<Double>> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    @Import(name="prioritizeMalicious")
    private @Nullable Output<Boolean> prioritizeMalicious;

    public Optional<Output<Boolean>> prioritizeMalicious() {
        return Optional.ofNullable(this.prioritizeMalicious);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="urls")
    private @Nullable Output<String> urls;

    public Optional<Output<String>> urls() {
        return Optional.ofNullable(this.urls);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private GetPageShieldConnectionsListArgs() {}

    private GetPageShieldConnectionsListArgs(GetPageShieldConnectionsListArgs $) {
        this.direction = $.direction;
        this.excludeCdnCgi = $.excludeCdnCgi;
        this.excludeUrls = $.excludeUrls;
        this.export = $.export;
        this.hosts = $.hosts;
        this.maxItems = $.maxItems;
        this.orderBy = $.orderBy;
        this.page = $.page;
        this.pageUrl = $.pageUrl;
        this.perPage = $.perPage;
        this.prioritizeMalicious = $.prioritizeMalicious;
        this.status = $.status;
        this.urls = $.urls;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPageShieldConnectionsListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPageShieldConnectionsListArgs $;

        public Builder() {
            $ = new GetPageShieldConnectionsListArgs();
        }

        public Builder(GetPageShieldConnectionsListArgs defaults) {
            $ = new GetPageShieldConnectionsListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction The direction used to sort returned connections.
         * Available values: &#34;asc&#34;, &#34;desc&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction The direction used to sort returned connections.
         * Available values: &#34;asc&#34;, &#34;desc&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param excludeCdnCgi When true, excludes connections seen in a `/cdn-cgi` path from the returned connections. The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder excludeCdnCgi(@Nullable Output<Boolean> excludeCdnCgi) {
            $.excludeCdnCgi = excludeCdnCgi;
            return this;
        }

        /**
         * @param excludeCdnCgi When true, excludes connections seen in a `/cdn-cgi` path from the returned connections. The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder excludeCdnCgi(Boolean excludeCdnCgi) {
            return excludeCdnCgi(Output.of(excludeCdnCgi));
        }

        /**
         * @param excludeUrls Excludes connections whose URL contains one of the URL-encoded URLs separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder excludeUrls(@Nullable Output<String> excludeUrls) {
            $.excludeUrls = excludeUrls;
            return this;
        }

        /**
         * @param excludeUrls Excludes connections whose URL contains one of the URL-encoded URLs separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder excludeUrls(String excludeUrls) {
            return excludeUrls(Output.of(excludeUrls));
        }

        /**
         * @param export Export the list of connections as a file.
         * Available values: &#34;csv&#34;.
         * 
         * @return builder
         * 
         */
        public Builder export(@Nullable Output<String> export) {
            $.export = export;
            return this;
        }

        /**
         * @param export Export the list of connections as a file.
         * Available values: &#34;csv&#34;.
         * 
         * @return builder
         * 
         */
        public Builder export(String export) {
            return export(Output.of(export));
        }

        /**
         * @param hosts Includes connections that match one or more URL-encoded hostnames separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder hosts(@Nullable Output<String> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts Includes connections that match one or more URL-encoded hostnames separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder hosts(String hosts) {
            return hosts(Output.of(hosts));
        }

        public Builder maxItems(@Nullable Output<Integer> maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        public Builder maxItems(Integer maxItems) {
            return maxItems(Output.of(maxItems));
        }

        public Builder orderBy(@Nullable Output<String> orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        public Builder orderBy(String orderBy) {
            return orderBy(Output.of(orderBy));
        }

        public Builder page(@Nullable Output<String> page) {
            $.page = page;
            return this;
        }

        public Builder page(String page) {
            return page(Output.of(page));
        }

        public Builder pageUrl(@Nullable Output<String> pageUrl) {
            $.pageUrl = pageUrl;
            return this;
        }

        public Builder pageUrl(String pageUrl) {
            return pageUrl(Output.of(pageUrl));
        }

        public Builder perPage(@Nullable Output<Double> perPage) {
            $.perPage = perPage;
            return this;
        }

        public Builder perPage(Double perPage) {
            return perPage(Output.of(perPage));
        }

        public Builder prioritizeMalicious(@Nullable Output<Boolean> prioritizeMalicious) {
            $.prioritizeMalicious = prioritizeMalicious;
            return this;
        }

        public Builder prioritizeMalicious(Boolean prioritizeMalicious) {
            return prioritizeMalicious(Output.of(prioritizeMalicious));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder urls(@Nullable Output<String> urls) {
            $.urls = urls;
            return this;
        }

        public Builder urls(String urls) {
            return urls(Output.of(urls));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public GetPageShieldConnectionsListArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetPageShieldConnectionsListArgs", "zoneId");
            }
            return $;
        }
    }

}
