// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ObservatoryScheduledTestTestDesktopReportErrorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservatoryScheduledTestTestDesktopReportArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservatoryScheduledTestTestDesktopReportArgs Empty = new ObservatoryScheduledTestTestDesktopReportArgs();

    /**
     * Cumulative Layout Shift.
     * 
     */
    @Import(name="cls")
    private @Nullable Output<Double> cls;

    /**
     * @return Cumulative Layout Shift.
     * 
     */
    public Optional<Output<Double>> cls() {
        return Optional.ofNullable(this.cls);
    }

    /**
     * The type of device.
     * Available values: &#34;DESKTOP&#34;, &#34;MOBILE&#34;.
     * 
     */
    @Import(name="deviceType")
    private @Nullable Output<String> deviceType;

    /**
     * @return The type of device.
     * Available values: &#34;DESKTOP&#34;, &#34;MOBILE&#34;.
     * 
     */
    public Optional<Output<String>> deviceType() {
        return Optional.ofNullable(this.deviceType);
    }

    @Import(name="error")
    private @Nullable Output<ObservatoryScheduledTestTestDesktopReportErrorArgs> error;

    public Optional<Output<ObservatoryScheduledTestTestDesktopReportErrorArgs>> error() {
        return Optional.ofNullable(this.error);
    }

    /**
     * First Contentful Paint.
     * 
     */
    @Import(name="fcp")
    private @Nullable Output<Double> fcp;

    /**
     * @return First Contentful Paint.
     * 
     */
    public Optional<Output<Double>> fcp() {
        return Optional.ofNullable(this.fcp);
    }

    /**
     * The URL to the full Lighthouse JSON report.
     * 
     */
    @Import(name="jsonReportUrl")
    private @Nullable Output<String> jsonReportUrl;

    /**
     * @return The URL to the full Lighthouse JSON report.
     * 
     */
    public Optional<Output<String>> jsonReportUrl() {
        return Optional.ofNullable(this.jsonReportUrl);
    }

    /**
     * Largest Contentful Paint.
     * 
     */
    @Import(name="lcp")
    private @Nullable Output<Double> lcp;

    /**
     * @return Largest Contentful Paint.
     * 
     */
    public Optional<Output<Double>> lcp() {
        return Optional.ofNullable(this.lcp);
    }

    /**
     * The Lighthouse performance score.
     * 
     */
    @Import(name="performanceScore")
    private @Nullable Output<Double> performanceScore;

    /**
     * @return The Lighthouse performance score.
     * 
     */
    public Optional<Output<Double>> performanceScore() {
        return Optional.ofNullable(this.performanceScore);
    }

    /**
     * Speed Index.
     * 
     */
    @Import(name="si")
    private @Nullable Output<Double> si;

    /**
     * @return Speed Index.
     * 
     */
    public Optional<Output<Double>> si() {
        return Optional.ofNullable(this.si);
    }

    /**
     * The state of the Lighthouse report.
     * Available values: &#34;RUNNING&#34;, &#34;COMPLETE&#34;, &#34;FAILED&#34;.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the Lighthouse report.
     * Available values: &#34;RUNNING&#34;, &#34;COMPLETE&#34;, &#34;FAILED&#34;.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Total Blocking Time.
     * 
     */
    @Import(name="tbt")
    private @Nullable Output<Double> tbt;

    /**
     * @return Total Blocking Time.
     * 
     */
    public Optional<Output<Double>> tbt() {
        return Optional.ofNullable(this.tbt);
    }

    /**
     * Time To First Byte.
     * 
     */
    @Import(name="ttfb")
    private @Nullable Output<Double> ttfb;

    /**
     * @return Time To First Byte.
     * 
     */
    public Optional<Output<Double>> ttfb() {
        return Optional.ofNullable(this.ttfb);
    }

    /**
     * Time To Interactive.
     * 
     */
    @Import(name="tti")
    private @Nullable Output<Double> tti;

    /**
     * @return Time To Interactive.
     * 
     */
    public Optional<Output<Double>> tti() {
        return Optional.ofNullable(this.tti);
    }

    private ObservatoryScheduledTestTestDesktopReportArgs() {}

    private ObservatoryScheduledTestTestDesktopReportArgs(ObservatoryScheduledTestTestDesktopReportArgs $) {
        this.cls = $.cls;
        this.deviceType = $.deviceType;
        this.error = $.error;
        this.fcp = $.fcp;
        this.jsonReportUrl = $.jsonReportUrl;
        this.lcp = $.lcp;
        this.performanceScore = $.performanceScore;
        this.si = $.si;
        this.state = $.state;
        this.tbt = $.tbt;
        this.ttfb = $.ttfb;
        this.tti = $.tti;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservatoryScheduledTestTestDesktopReportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservatoryScheduledTestTestDesktopReportArgs $;

        public Builder() {
            $ = new ObservatoryScheduledTestTestDesktopReportArgs();
        }

        public Builder(ObservatoryScheduledTestTestDesktopReportArgs defaults) {
            $ = new ObservatoryScheduledTestTestDesktopReportArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cls Cumulative Layout Shift.
         * 
         * @return builder
         * 
         */
        public Builder cls(@Nullable Output<Double> cls) {
            $.cls = cls;
            return this;
        }

        /**
         * @param cls Cumulative Layout Shift.
         * 
         * @return builder
         * 
         */
        public Builder cls(Double cls) {
            return cls(Output.of(cls));
        }

        /**
         * @param deviceType The type of device.
         * Available values: &#34;DESKTOP&#34;, &#34;MOBILE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder deviceType(@Nullable Output<String> deviceType) {
            $.deviceType = deviceType;
            return this;
        }

        /**
         * @param deviceType The type of device.
         * Available values: &#34;DESKTOP&#34;, &#34;MOBILE&#34;.
         * 
         * @return builder
         * 
         */
        public Builder deviceType(String deviceType) {
            return deviceType(Output.of(deviceType));
        }

        public Builder error(@Nullable Output<ObservatoryScheduledTestTestDesktopReportErrorArgs> error) {
            $.error = error;
            return this;
        }

        public Builder error(ObservatoryScheduledTestTestDesktopReportErrorArgs error) {
            return error(Output.of(error));
        }

        /**
         * @param fcp First Contentful Paint.
         * 
         * @return builder
         * 
         */
        public Builder fcp(@Nullable Output<Double> fcp) {
            $.fcp = fcp;
            return this;
        }

        /**
         * @param fcp First Contentful Paint.
         * 
         * @return builder
         * 
         */
        public Builder fcp(Double fcp) {
            return fcp(Output.of(fcp));
        }

        /**
         * @param jsonReportUrl The URL to the full Lighthouse JSON report.
         * 
         * @return builder
         * 
         */
        public Builder jsonReportUrl(@Nullable Output<String> jsonReportUrl) {
            $.jsonReportUrl = jsonReportUrl;
            return this;
        }

        /**
         * @param jsonReportUrl The URL to the full Lighthouse JSON report.
         * 
         * @return builder
         * 
         */
        public Builder jsonReportUrl(String jsonReportUrl) {
            return jsonReportUrl(Output.of(jsonReportUrl));
        }

        /**
         * @param lcp Largest Contentful Paint.
         * 
         * @return builder
         * 
         */
        public Builder lcp(@Nullable Output<Double> lcp) {
            $.lcp = lcp;
            return this;
        }

        /**
         * @param lcp Largest Contentful Paint.
         * 
         * @return builder
         * 
         */
        public Builder lcp(Double lcp) {
            return lcp(Output.of(lcp));
        }

        /**
         * @param performanceScore The Lighthouse performance score.
         * 
         * @return builder
         * 
         */
        public Builder performanceScore(@Nullable Output<Double> performanceScore) {
            $.performanceScore = performanceScore;
            return this;
        }

        /**
         * @param performanceScore The Lighthouse performance score.
         * 
         * @return builder
         * 
         */
        public Builder performanceScore(Double performanceScore) {
            return performanceScore(Output.of(performanceScore));
        }

        /**
         * @param si Speed Index.
         * 
         * @return builder
         * 
         */
        public Builder si(@Nullable Output<Double> si) {
            $.si = si;
            return this;
        }

        /**
         * @param si Speed Index.
         * 
         * @return builder
         * 
         */
        public Builder si(Double si) {
            return si(Output.of(si));
        }

        /**
         * @param state The state of the Lighthouse report.
         * Available values: &#34;RUNNING&#34;, &#34;COMPLETE&#34;, &#34;FAILED&#34;.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the Lighthouse report.
         * Available values: &#34;RUNNING&#34;, &#34;COMPLETE&#34;, &#34;FAILED&#34;.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tbt Total Blocking Time.
         * 
         * @return builder
         * 
         */
        public Builder tbt(@Nullable Output<Double> tbt) {
            $.tbt = tbt;
            return this;
        }

        /**
         * @param tbt Total Blocking Time.
         * 
         * @return builder
         * 
         */
        public Builder tbt(Double tbt) {
            return tbt(Output.of(tbt));
        }

        /**
         * @param ttfb Time To First Byte.
         * 
         * @return builder
         * 
         */
        public Builder ttfb(@Nullable Output<Double> ttfb) {
            $.ttfb = ttfb;
            return this;
        }

        /**
         * @param ttfb Time To First Byte.
         * 
         * @return builder
         * 
         */
        public Builder ttfb(Double ttfb) {
            return ttfb(Output.of(ttfb));
        }

        /**
         * @param tti Time To Interactive.
         * 
         * @return builder
         * 
         */
        public Builder tti(@Nullable Output<Double> tti) {
            $.tti = tti;
            return this;
        }

        /**
         * @param tti Time To Interactive.
         * 
         * @return builder
         * 
         */
        public Builder tti(Double tti) {
            return tti(Output.of(tti));
        }

        public ObservatoryScheduledTestTestDesktopReportArgs build() {
            return $;
        }
    }

}
