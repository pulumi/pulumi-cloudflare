// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkersSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkersSecretArgs Empty = new WorkersSecretArgs();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Name of the Workers for Platforms dispatch namespace.
     * 
     */
    @Import(name="dispatchNamespace", required=true)
    private Output<String> dispatchNamespace;

    /**
     * @return Name of the Workers for Platforms dispatch namespace.
     * 
     */
    public Output<String> dispatchNamespace() {
        return this.dispatchNamespace;
    }

    /**
     * The name of this secret, this is what will be used to access it inside the Worker.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of this secret, this is what will be used to access it inside the Worker.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Name of the script, used in URLs and route configuration.
     * 
     */
    @Import(name="scriptName", required=true)
    private Output<String> scriptName;

    /**
     * @return Name of the script, used in URLs and route configuration.
     * 
     */
    public Output<String> scriptName() {
        return this.scriptName;
    }

    /**
     * The value of the secret.
     * 
     */
    @Import(name="text")
    private @Nullable Output<String> text;

    /**
     * @return The value of the secret.
     * 
     */
    public Optional<Output<String>> text() {
        return Optional.ofNullable(this.text);
    }

    /**
     * The type of secret to put.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of secret to put.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private WorkersSecretArgs() {}

    private WorkersSecretArgs(WorkersSecretArgs $) {
        this.accountId = $.accountId;
        this.dispatchNamespace = $.dispatchNamespace;
        this.name = $.name;
        this.scriptName = $.scriptName;
        this.text = $.text;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkersSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkersSecretArgs $;

        public Builder() {
            $ = new WorkersSecretArgs();
        }

        public Builder(WorkersSecretArgs defaults) {
            $ = new WorkersSecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param dispatchNamespace Name of the Workers for Platforms dispatch namespace.
         * 
         * @return builder
         * 
         */
        public Builder dispatchNamespace(Output<String> dispatchNamespace) {
            $.dispatchNamespace = dispatchNamespace;
            return this;
        }

        /**
         * @param dispatchNamespace Name of the Workers for Platforms dispatch namespace.
         * 
         * @return builder
         * 
         */
        public Builder dispatchNamespace(String dispatchNamespace) {
            return dispatchNamespace(Output.of(dispatchNamespace));
        }

        /**
         * @param name The name of this secret, this is what will be used to access it inside the Worker.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of this secret, this is what will be used to access it inside the Worker.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scriptName Name of the script, used in URLs and route configuration.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(Output<String> scriptName) {
            $.scriptName = scriptName;
            return this;
        }

        /**
         * @param scriptName Name of the script, used in URLs and route configuration.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(String scriptName) {
            return scriptName(Output.of(scriptName));
        }

        /**
         * @param text The value of the secret.
         * 
         * @return builder
         * 
         */
        public Builder text(@Nullable Output<String> text) {
            $.text = text;
            return this;
        }

        /**
         * @param text The value of the secret.
         * 
         * @return builder
         * 
         */
        public Builder text(String text) {
            return text(Output.of(text));
        }

        /**
         * @param type The type of secret to put.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of secret to put.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public WorkersSecretArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("WorkersSecretArgs", "accountId");
            }
            if ($.dispatchNamespace == null) {
                throw new MissingRequiredPropertyException("WorkersSecretArgs", "dispatchNamespace");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("WorkersSecretArgs", "name");
            }
            if ($.scriptName == null) {
                throw new MissingRequiredPropertyException("WorkersSecretArgs", "scriptName");
            }
            return $;
        }
    }

}
