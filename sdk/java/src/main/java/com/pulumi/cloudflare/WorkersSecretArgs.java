// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class WorkersSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkersSecretArgs Empty = new WorkersSecretArgs();

    /**
     * The account identifier to target for the resource.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return The account identifier to target for the resource.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * The name of the Worker secret. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Worker secret. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The name of the Worker script to associate the secret with. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="scriptName", required=true)
    private Output<String> scriptName;

    /**
     * @return The name of the Worker script to associate the secret with. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> scriptName() {
        return this.scriptName;
    }

    /**
     * The text of the Worker secret. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="secretText", required=true)
    private Output<String> secretText;

    /**
     * @return The text of the Worker secret. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> secretText() {
        return this.secretText;
    }

    private WorkersSecretArgs() {}

    private WorkersSecretArgs(WorkersSecretArgs $) {
        this.accountId = $.accountId;
        this.name = $.name;
        this.scriptName = $.scriptName;
        this.secretText = $.secretText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkersSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkersSecretArgs $;

        public Builder() {
            $ = new WorkersSecretArgs();
        }

        public Builder(WorkersSecretArgs defaults) {
            $ = new WorkersSecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param name The name of the Worker secret. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Worker secret. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scriptName The name of the Worker script to associate the secret with. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder scriptName(Output<String> scriptName) {
            $.scriptName = scriptName;
            return this;
        }

        /**
         * @param scriptName The name of the Worker script to associate the secret with. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder scriptName(String scriptName) {
            return scriptName(Output.of(scriptName));
        }

        /**
         * @param secretText The text of the Worker secret. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder secretText(Output<String> secretText) {
            $.secretText = secretText;
            return this;
        }

        /**
         * @param secretText The text of the Worker secret. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder secretText(String secretText) {
            return secretText(Output.of(secretText));
        }

        public WorkersSecretArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("WorkersSecretArgs", "accountId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("WorkersSecretArgs", "name");
            }
            if ($.scriptName == null) {
                throw new MissingRequiredPropertyException("WorkersSecretArgs", "scriptName");
            }
            if ($.secretText == null) {
                throw new MissingRequiredPropertyException("WorkersSecretArgs", "secretText");
            }
            return $;
        }
    }

}
