// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.AccountTokenConditionArgs;
import com.pulumi.cloudflare.inputs.AccountTokenPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountTokenState extends com.pulumi.resources.ResourceArgs {

    public static final AccountTokenState Empty = new AccountTokenState();

    /**
     * Account identifier tag.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account identifier tag.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="condition")
    private @Nullable Output<AccountTokenConditionArgs> condition;

    public Optional<Output<AccountTokenConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * The expiration time on or after which the JWT MUST NOT be accepted for processing.
     * 
     */
    @Import(name="expiresOn")
    private @Nullable Output<String> expiresOn;

    /**
     * @return The expiration time on or after which the JWT MUST NOT be accepted for processing.
     * 
     */
    public Optional<Output<String>> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }

    /**
     * The time on which the token was created.
     * 
     */
    @Import(name="issuedOn")
    private @Nullable Output<String> issuedOn;

    /**
     * @return The time on which the token was created.
     * 
     */
    public Optional<Output<String>> issuedOn() {
        return Optional.ofNullable(this.issuedOn);
    }

    /**
     * Last time the token was used.
     * 
     */
    @Import(name="lastUsedOn")
    private @Nullable Output<String> lastUsedOn;

    /**
     * @return Last time the token was used.
     * 
     */
    public Optional<Output<String>> lastUsedOn() {
        return Optional.ofNullable(this.lastUsedOn);
    }

    /**
     * Last time the token was modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return Last time the token was modified.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * Token name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Token name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The time before which the token MUST NOT be accepted for processing.
     * 
     */
    @Import(name="notBefore")
    private @Nullable Output<String> notBefore;

    /**
     * @return The time before which the token MUST NOT be accepted for processing.
     * 
     */
    public Optional<Output<String>> notBefore() {
        return Optional.ofNullable(this.notBefore);
    }

    /**
     * List of access policies assigned to the token.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<AccountTokenPolicyArgs>> policies;

    /**
     * @return List of access policies assigned to the token.
     * 
     */
    public Optional<Output<List<AccountTokenPolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * Status of the token.
     * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the token.
     * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The token value.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The token value.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private AccountTokenState() {}

    private AccountTokenState(AccountTokenState $) {
        this.accountId = $.accountId;
        this.condition = $.condition;
        this.expiresOn = $.expiresOn;
        this.issuedOn = $.issuedOn;
        this.lastUsedOn = $.lastUsedOn;
        this.modifiedOn = $.modifiedOn;
        this.name = $.name;
        this.notBefore = $.notBefore;
        this.policies = $.policies;
        this.status = $.status;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountTokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountTokenState $;

        public Builder() {
            $ = new AccountTokenState();
        }

        public Builder(AccountTokenState defaults) {
            $ = new AccountTokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder condition(@Nullable Output<AccountTokenConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(AccountTokenConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param expiresOn The expiration time on or after which the JWT MUST NOT be accepted for processing.
         * 
         * @return builder
         * 
         */
        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            $.expiresOn = expiresOn;
            return this;
        }

        /**
         * @param expiresOn The expiration time on or after which the JWT MUST NOT be accepted for processing.
         * 
         * @return builder
         * 
         */
        public Builder expiresOn(String expiresOn) {
            return expiresOn(Output.of(expiresOn));
        }

        /**
         * @param issuedOn The time on which the token was created.
         * 
         * @return builder
         * 
         */
        public Builder issuedOn(@Nullable Output<String> issuedOn) {
            $.issuedOn = issuedOn;
            return this;
        }

        /**
         * @param issuedOn The time on which the token was created.
         * 
         * @return builder
         * 
         */
        public Builder issuedOn(String issuedOn) {
            return issuedOn(Output.of(issuedOn));
        }

        /**
         * @param lastUsedOn Last time the token was used.
         * 
         * @return builder
         * 
         */
        public Builder lastUsedOn(@Nullable Output<String> lastUsedOn) {
            $.lastUsedOn = lastUsedOn;
            return this;
        }

        /**
         * @param lastUsedOn Last time the token was used.
         * 
         * @return builder
         * 
         */
        public Builder lastUsedOn(String lastUsedOn) {
            return lastUsedOn(Output.of(lastUsedOn));
        }

        /**
         * @param modifiedOn Last time the token was modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn Last time the token was modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param name Token name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Token name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notBefore The time before which the token MUST NOT be accepted for processing.
         * 
         * @return builder
         * 
         */
        public Builder notBefore(@Nullable Output<String> notBefore) {
            $.notBefore = notBefore;
            return this;
        }

        /**
         * @param notBefore The time before which the token MUST NOT be accepted for processing.
         * 
         * @return builder
         * 
         */
        public Builder notBefore(String notBefore) {
            return notBefore(Output.of(notBefore));
        }

        /**
         * @param policies List of access policies assigned to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<AccountTokenPolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies List of access policies assigned to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<AccountTokenPolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies List of access policies assigned to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(AccountTokenPolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param status Status of the token.
         * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the token.
         * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param value The token value.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The token value.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public AccountTokenState build() {
            return $;
        }
    }

}
