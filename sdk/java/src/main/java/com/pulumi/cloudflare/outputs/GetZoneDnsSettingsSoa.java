// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetZoneDnsSettingsSoa {
    /**
     * @return Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
     * 
     */
    private Double expire;
    /**
     * @return The time to live (TTL) for negative caching of records within the zone.
     * 
     */
    private Double minTtl;
    /**
     * @return The primary nameserver, which may be used for outbound zone transfers.
     * 
     */
    private String mname;
    /**
     * @return Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
     * 
     */
    private Double refresh;
    /**
     * @return Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
     * 
     */
    private Double retry;
    /**
     * @return The email address of the zone administrator, with the first label representing the local part of the email address.
     * 
     */
    private String rname;
    /**
     * @return The time to live (TTL) of the SOA record itself.
     * 
     */
    private Double ttl;

    private GetZoneDnsSettingsSoa() {}
    /**
     * @return Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
     * 
     */
    public Double expire() {
        return this.expire;
    }
    /**
     * @return The time to live (TTL) for negative caching of records within the zone.
     * 
     */
    public Double minTtl() {
        return this.minTtl;
    }
    /**
     * @return The primary nameserver, which may be used for outbound zone transfers.
     * 
     */
    public String mname() {
        return this.mname;
    }
    /**
     * @return Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
     * 
     */
    public Double refresh() {
        return this.refresh;
    }
    /**
     * @return Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
     * 
     */
    public Double retry() {
        return this.retry;
    }
    /**
     * @return The email address of the zone administrator, with the first label representing the local part of the email address.
     * 
     */
    public String rname() {
        return this.rname;
    }
    /**
     * @return The time to live (TTL) of the SOA record itself.
     * 
     */
    public Double ttl() {
        return this.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZoneDnsSettingsSoa defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double expire;
        private Double minTtl;
        private String mname;
        private Double refresh;
        private Double retry;
        private String rname;
        private Double ttl;
        public Builder() {}
        public Builder(GetZoneDnsSettingsSoa defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expire = defaults.expire;
    	      this.minTtl = defaults.minTtl;
    	      this.mname = defaults.mname;
    	      this.refresh = defaults.refresh;
    	      this.retry = defaults.retry;
    	      this.rname = defaults.rname;
    	      this.ttl = defaults.ttl;
        }

        @CustomType.Setter
        public Builder expire(Double expire) {
            if (expire == null) {
              throw new MissingRequiredPropertyException("GetZoneDnsSettingsSoa", "expire");
            }
            this.expire = expire;
            return this;
        }
        @CustomType.Setter
        public Builder minTtl(Double minTtl) {
            if (minTtl == null) {
              throw new MissingRequiredPropertyException("GetZoneDnsSettingsSoa", "minTtl");
            }
            this.minTtl = minTtl;
            return this;
        }
        @CustomType.Setter
        public Builder mname(String mname) {
            if (mname == null) {
              throw new MissingRequiredPropertyException("GetZoneDnsSettingsSoa", "mname");
            }
            this.mname = mname;
            return this;
        }
        @CustomType.Setter
        public Builder refresh(Double refresh) {
            if (refresh == null) {
              throw new MissingRequiredPropertyException("GetZoneDnsSettingsSoa", "refresh");
            }
            this.refresh = refresh;
            return this;
        }
        @CustomType.Setter
        public Builder retry(Double retry) {
            if (retry == null) {
              throw new MissingRequiredPropertyException("GetZoneDnsSettingsSoa", "retry");
            }
            this.retry = retry;
            return this;
        }
        @CustomType.Setter
        public Builder rname(String rname) {
            if (rname == null) {
              throw new MissingRequiredPropertyException("GetZoneDnsSettingsSoa", "rname");
            }
            this.rname = rname;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(Double ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetZoneDnsSettingsSoa", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        public GetZoneDnsSettingsSoa build() {
            final var _resultValue = new GetZoneDnsSettingsSoa();
            _resultValue.expire = expire;
            _resultValue.minTtl = minTtl;
            _resultValue.mname = mname;
            _resultValue.refresh = refresh;
            _resultValue.retry = retry;
            _resultValue.rname = rname;
            _resultValue.ttl = ttl;
            return _resultValue;
        }
    }
}
