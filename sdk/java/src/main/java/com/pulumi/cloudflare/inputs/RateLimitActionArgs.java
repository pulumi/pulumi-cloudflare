// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.RateLimitActionResponseArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RateLimitActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RateLimitActionArgs Empty = new RateLimitActionArgs();

    /**
     * The type of action to perform. Available values: `simulate`, `ban`, `challenge`, `js_challenge`, `managed_challenge`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return The type of action to perform. Available values: `simulate`, `ban`, `challenge`, `js_challenge`, `managed_challenge`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page.
     * 
     */
    @Import(name="response")
    private @Nullable Output<RateLimitActionResponseArgs> response;

    /**
     * @return Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page.
     * 
     */
    public Optional<Output<RateLimitActionResponseArgs>> response() {
        return Optional.ofNullable(this.response);
    }

    /**
     * The time in seconds as an integer to perform the mitigation action. This field is required if the `mode` is either `simulate` or `ban`. Must be the same or greater than the period.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The time in seconds as an integer to perform the mitigation action. This field is required if the `mode` is either `simulate` or `ban`. Must be the same or greater than the period.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private RateLimitActionArgs() {}

    private RateLimitActionArgs(RateLimitActionArgs $) {
        this.mode = $.mode;
        this.response = $.response;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RateLimitActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RateLimitActionArgs $;

        public Builder() {
            $ = new RateLimitActionArgs();
        }

        public Builder(RateLimitActionArgs defaults) {
            $ = new RateLimitActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode The type of action to perform. Available values: `simulate`, `ban`, `challenge`, `js_challenge`, `managed_challenge`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The type of action to perform. Available values: `simulate`, `ban`, `challenge`, `js_challenge`, `managed_challenge`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param response Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page.
         * 
         * @return builder
         * 
         */
        public Builder response(@Nullable Output<RateLimitActionResponseArgs> response) {
            $.response = response;
            return this;
        }

        /**
         * @param response Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page.
         * 
         * @return builder
         * 
         */
        public Builder response(RateLimitActionResponseArgs response) {
            return response(Output.of(response));
        }

        /**
         * @param timeout The time in seconds as an integer to perform the mitigation action. This field is required if the `mode` is either `simulate` or `ban`. Must be the same or greater than the period.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The time in seconds as an integer to perform the mitigation action. This field is required if the `mode` is either `simulate` or `ban`. Must be the same or greater than the period.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public RateLimitActionArgs build() {
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("RateLimitActionArgs", "mode");
            }
            return $;
        }
    }

}
