// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetNotificationPoliciesResultFilters;
import com.pulumi.cloudflare.outputs.GetNotificationPoliciesResultMechanisms;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNotificationPoliciesResult {
    /**
     * @return Optional specification of how often to re-alert from the same incident, not support on all alert types.
     * 
     */
    private String alertInterval;
    /**
     * @return Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
     * 
     */
    private String alertType;
    private String created;
    /**
     * @return Optional description for the Notification policy.
     * 
     */
    private String description;
    /**
     * @return Whether or not the Notification policy is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
     * 
     */
    private GetNotificationPoliciesResultFilters filters;
    /**
     * @return The unique identifier of a notification policy
     * 
     */
    private String id;
    /**
     * @return List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
     * 
     */
    private GetNotificationPoliciesResultMechanisms mechanisms;
    private String modified;
    /**
     * @return Name of the policy.
     * 
     */
    private String name;

    private GetNotificationPoliciesResult() {}
    /**
     * @return Optional specification of how often to re-alert from the same incident, not support on all alert types.
     * 
     */
    public String alertInterval() {
        return this.alertInterval;
    }
    /**
     * @return Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
     * 
     */
    public String alertType() {
        return this.alertType;
    }
    public String created() {
        return this.created;
    }
    /**
     * @return Optional description for the Notification policy.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether or not the Notification policy is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
     * 
     */
    public GetNotificationPoliciesResultFilters filters() {
        return this.filters;
    }
    /**
     * @return The unique identifier of a notification policy
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
     * 
     */
    public GetNotificationPoliciesResultMechanisms mechanisms() {
        return this.mechanisms;
    }
    public String modified() {
        return this.modified;
    }
    /**
     * @return Name of the policy.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNotificationPoliciesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alertInterval;
        private String alertType;
        private String created;
        private String description;
        private Boolean enabled;
        private GetNotificationPoliciesResultFilters filters;
        private String id;
        private GetNotificationPoliciesResultMechanisms mechanisms;
        private String modified;
        private String name;
        public Builder() {}
        public Builder(GetNotificationPoliciesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alertInterval = defaults.alertInterval;
    	      this.alertType = defaults.alertType;
    	      this.created = defaults.created;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.mechanisms = defaults.mechanisms;
    	      this.modified = defaults.modified;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder alertInterval(String alertInterval) {
            if (alertInterval == null) {
              throw new MissingRequiredPropertyException("GetNotificationPoliciesResult", "alertInterval");
            }
            this.alertInterval = alertInterval;
            return this;
        }
        @CustomType.Setter
        public Builder alertType(String alertType) {
            if (alertType == null) {
              throw new MissingRequiredPropertyException("GetNotificationPoliciesResult", "alertType");
            }
            this.alertType = alertType;
            return this;
        }
        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetNotificationPoliciesResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNotificationPoliciesResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetNotificationPoliciesResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder filters(GetNotificationPoliciesResultFilters filters) {
            if (filters == null) {
              throw new MissingRequiredPropertyException("GetNotificationPoliciesResult", "filters");
            }
            this.filters = filters;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNotificationPoliciesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mechanisms(GetNotificationPoliciesResultMechanisms mechanisms) {
            if (mechanisms == null) {
              throw new MissingRequiredPropertyException("GetNotificationPoliciesResult", "mechanisms");
            }
            this.mechanisms = mechanisms;
            return this;
        }
        @CustomType.Setter
        public Builder modified(String modified) {
            if (modified == null) {
              throw new MissingRequiredPropertyException("GetNotificationPoliciesResult", "modified");
            }
            this.modified = modified;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNotificationPoliciesResult", "name");
            }
            this.name = name;
            return this;
        }
        public GetNotificationPoliciesResult build() {
            final var _resultValue = new GetNotificationPoliciesResult();
            _resultValue.alertInterval = alertInterval;
            _resultValue.alertType = alertType;
            _resultValue.created = created;
            _resultValue.description = description;
            _resultValue.enabled = enabled;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.mechanisms = mechanisms;
            _resultValue.modified = modified;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
