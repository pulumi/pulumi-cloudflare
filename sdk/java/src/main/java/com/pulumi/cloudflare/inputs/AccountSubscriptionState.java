// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.AccountSubscriptionRatePlanArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountSubscriptionState extends com.pulumi.resources.ResourceArgs {

    public static final AccountSubscriptionState Empty = new AccountSubscriptionState();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The monetary unit in which pricing information is displayed.
     * 
     */
    @Import(name="currency")
    private @Nullable Output<String> currency;

    /**
     * @return The monetary unit in which pricing information is displayed.
     * 
     */
    public Optional<Output<String>> currency() {
        return Optional.ofNullable(this.currency);
    }

    /**
     * The end of the current period and also when the next billing is due.
     * 
     */
    @Import(name="currentPeriodEnd")
    private @Nullable Output<String> currentPeriodEnd;

    /**
     * @return The end of the current period and also when the next billing is due.
     * 
     */
    public Optional<Output<String>> currentPeriodEnd() {
        return Optional.ofNullable(this.currentPeriodEnd);
    }

    /**
     * When the current billing period started. May match initial*period*start if this is the first period.
     * 
     */
    @Import(name="currentPeriodStart")
    private @Nullable Output<String> currentPeriodStart;

    /**
     * @return When the current billing period started. May match initial*period*start if this is the first period.
     * 
     */
    public Optional<Output<String>> currentPeriodStart() {
        return Optional.ofNullable(this.currentPeriodStart);
    }

    /**
     * How often the subscription is renewed automatically.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return How often the subscription is renewed automatically.
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * The price of the subscription that will be billed, in US dollars.
     * 
     */
    @Import(name="price")
    private @Nullable Output<Double> price;

    /**
     * @return The price of the subscription that will be billed, in US dollars.
     * 
     */
    public Optional<Output<Double>> price() {
        return Optional.ofNullable(this.price);
    }

    /**
     * The rate plan applied to the subscription.
     * 
     */
    @Import(name="ratePlan")
    private @Nullable Output<AccountSubscriptionRatePlanArgs> ratePlan;

    /**
     * @return The rate plan applied to the subscription.
     * 
     */
    public Optional<Output<AccountSubscriptionRatePlanArgs>> ratePlan() {
        return Optional.ofNullable(this.ratePlan);
    }

    /**
     * The state that the subscription is in.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state that the subscription is in.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Subscription identifier tag.
     * 
     */
    @Import(name="subscriptionIdentifier")
    private @Nullable Output<String> subscriptionIdentifier;

    /**
     * @return Subscription identifier tag.
     * 
     */
    public Optional<Output<String>> subscriptionIdentifier() {
        return Optional.ofNullable(this.subscriptionIdentifier);
    }

    private AccountSubscriptionState() {}

    private AccountSubscriptionState(AccountSubscriptionState $) {
        this.accountId = $.accountId;
        this.currency = $.currency;
        this.currentPeriodEnd = $.currentPeriodEnd;
        this.currentPeriodStart = $.currentPeriodStart;
        this.frequency = $.frequency;
        this.price = $.price;
        this.ratePlan = $.ratePlan;
        this.state = $.state;
        this.subscriptionIdentifier = $.subscriptionIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountSubscriptionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountSubscriptionState $;

        public Builder() {
            $ = new AccountSubscriptionState();
        }

        public Builder(AccountSubscriptionState defaults) {
            $ = new AccountSubscriptionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param currency The monetary unit in which pricing information is displayed.
         * 
         * @return builder
         * 
         */
        public Builder currency(@Nullable Output<String> currency) {
            $.currency = currency;
            return this;
        }

        /**
         * @param currency The monetary unit in which pricing information is displayed.
         * 
         * @return builder
         * 
         */
        public Builder currency(String currency) {
            return currency(Output.of(currency));
        }

        /**
         * @param currentPeriodEnd The end of the current period and also when the next billing is due.
         * 
         * @return builder
         * 
         */
        public Builder currentPeriodEnd(@Nullable Output<String> currentPeriodEnd) {
            $.currentPeriodEnd = currentPeriodEnd;
            return this;
        }

        /**
         * @param currentPeriodEnd The end of the current period and also when the next billing is due.
         * 
         * @return builder
         * 
         */
        public Builder currentPeriodEnd(String currentPeriodEnd) {
            return currentPeriodEnd(Output.of(currentPeriodEnd));
        }

        /**
         * @param currentPeriodStart When the current billing period started. May match initial*period*start if this is the first period.
         * 
         * @return builder
         * 
         */
        public Builder currentPeriodStart(@Nullable Output<String> currentPeriodStart) {
            $.currentPeriodStart = currentPeriodStart;
            return this;
        }

        /**
         * @param currentPeriodStart When the current billing period started. May match initial*period*start if this is the first period.
         * 
         * @return builder
         * 
         */
        public Builder currentPeriodStart(String currentPeriodStart) {
            return currentPeriodStart(Output.of(currentPeriodStart));
        }

        /**
         * @param frequency How often the subscription is renewed automatically.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency How often the subscription is renewed automatically.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param price The price of the subscription that will be billed, in US dollars.
         * 
         * @return builder
         * 
         */
        public Builder price(@Nullable Output<Double> price) {
            $.price = price;
            return this;
        }

        /**
         * @param price The price of the subscription that will be billed, in US dollars.
         * 
         * @return builder
         * 
         */
        public Builder price(Double price) {
            return price(Output.of(price));
        }

        /**
         * @param ratePlan The rate plan applied to the subscription.
         * 
         * @return builder
         * 
         */
        public Builder ratePlan(@Nullable Output<AccountSubscriptionRatePlanArgs> ratePlan) {
            $.ratePlan = ratePlan;
            return this;
        }

        /**
         * @param ratePlan The rate plan applied to the subscription.
         * 
         * @return builder
         * 
         */
        public Builder ratePlan(AccountSubscriptionRatePlanArgs ratePlan) {
            return ratePlan(Output.of(ratePlan));
        }

        /**
         * @param state The state that the subscription is in.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state that the subscription is in.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subscriptionIdentifier Subscription identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionIdentifier(@Nullable Output<String> subscriptionIdentifier) {
            $.subscriptionIdentifier = subscriptionIdentifier;
            return this;
        }

        /**
         * @param subscriptionIdentifier Subscription identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionIdentifier(String subscriptionIdentifier) {
            return subscriptionIdentifier(Output.of(subscriptionIdentifier));
        }

        public AccountSubscriptionState build() {
            return $;
        }
    }

}
