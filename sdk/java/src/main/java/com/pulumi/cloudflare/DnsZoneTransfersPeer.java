// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.DnsZoneTransfersPeerArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.DnsZoneTransfersPeerState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.DnsZoneTransfersPeer;
 * import com.pulumi.cloudflare.DnsZoneTransfersPeerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleDnsZoneTransfersPeer = new DnsZoneTransfersPeer("exampleDnsZoneTransfersPeer", DnsZoneTransfersPeerArgs.builder()
 *             .accountId("01a7362d577a6c3019a474fd6f485823")
 *             .name("my-peer-1")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer example &#39;&lt;account_id&gt;/&lt;peer_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer")
public class DnsZoneTransfersPeer extends com.pulumi.resources.CustomResource {
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
     * 
     */
    @Export(name="ip", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ip;

    /**
     * @return IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
     * 
     */
    public Output<Optional<String>> ip() {
        return Codegen.optional(this.ip);
    }
    /**
     * Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
     * 
     */
    @Export(name="ixfrEnable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ixfrEnable;

    /**
     * @return Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
     * 
     */
    public Output<Optional<Boolean>> ixfrEnable() {
        return Codegen.optional(this.ixfrEnable);
    }
    /**
     * The name of the peer.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the peer.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
     * 
     */
    @Export(name="port", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> port;

    /**
     * @return DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
     * 
     */
    public Output<Optional<Double>> port() {
        return Codegen.optional(this.port);
    }
    /**
     * TSIG authentication will be used for zone transfer if configured.
     * 
     */
    @Export(name="tsigId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tsigId;

    /**
     * @return TSIG authentication will be used for zone transfer if configured.
     * 
     */
    public Output<Optional<String>> tsigId() {
        return Codegen.optional(this.tsigId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DnsZoneTransfersPeer(java.lang.String name) {
        this(name, DnsZoneTransfersPeerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DnsZoneTransfersPeer(java.lang.String name, DnsZoneTransfersPeerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DnsZoneTransfersPeer(java.lang.String name, DnsZoneTransfersPeerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DnsZoneTransfersPeer(java.lang.String name, Output<java.lang.String> id, @Nullable DnsZoneTransfersPeerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer", name, state, makeResourceOptions(options, id), false);
    }

    private static DnsZoneTransfersPeerArgs makeArgs(DnsZoneTransfersPeerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DnsZoneTransfersPeerArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DnsZoneTransfersPeer get(java.lang.String name, Output<java.lang.String> id, @Nullable DnsZoneTransfersPeerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DnsZoneTransfersPeer(name, id, state, options);
    }
}
