// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetZonePlan {
    /**
     * @return States if the subscription can be activated.
     * 
     */
    private Boolean canSubscribe;
    /**
     * @return The denomination of the customer.
     * 
     */
    private String currency;
    /**
     * @return If this Zone is managed by another company.
     * 
     */
    private Boolean externallyManaged;
    /**
     * @return How often the customer is billed.
     * 
     */
    private String frequency;
    /**
     * @return Identifier
     * 
     */
    private String id;
    /**
     * @return States if the subscription active.
     * 
     */
    private Boolean isSubscribed;
    /**
     * @return If the legacy discount applies to this Zone.
     * 
     */
    private Boolean legacyDiscount;
    /**
     * @return The legacy name of the plan.
     * 
     */
    private String legacyId;
    /**
     * @return Name of the owner.
     * 
     */
    private String name;
    /**
     * @return How much the customer is paying.
     * 
     */
    private Double price;

    private GetZonePlan() {}
    /**
     * @return States if the subscription can be activated.
     * 
     */
    public Boolean canSubscribe() {
        return this.canSubscribe;
    }
    /**
     * @return The denomination of the customer.
     * 
     */
    public String currency() {
        return this.currency;
    }
    /**
     * @return If this Zone is managed by another company.
     * 
     */
    public Boolean externallyManaged() {
        return this.externallyManaged;
    }
    /**
     * @return How often the customer is billed.
     * 
     */
    public String frequency() {
        return this.frequency;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return States if the subscription active.
     * 
     */
    public Boolean isSubscribed() {
        return this.isSubscribed;
    }
    /**
     * @return If the legacy discount applies to this Zone.
     * 
     */
    public Boolean legacyDiscount() {
        return this.legacyDiscount;
    }
    /**
     * @return The legacy name of the plan.
     * 
     */
    public String legacyId() {
        return this.legacyId;
    }
    /**
     * @return Name of the owner.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return How much the customer is paying.
     * 
     */
    public Double price() {
        return this.price;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZonePlan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean canSubscribe;
        private String currency;
        private Boolean externallyManaged;
        private String frequency;
        private String id;
        private Boolean isSubscribed;
        private Boolean legacyDiscount;
        private String legacyId;
        private String name;
        private Double price;
        public Builder() {}
        public Builder(GetZonePlan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canSubscribe = defaults.canSubscribe;
    	      this.currency = defaults.currency;
    	      this.externallyManaged = defaults.externallyManaged;
    	      this.frequency = defaults.frequency;
    	      this.id = defaults.id;
    	      this.isSubscribed = defaults.isSubscribed;
    	      this.legacyDiscount = defaults.legacyDiscount;
    	      this.legacyId = defaults.legacyId;
    	      this.name = defaults.name;
    	      this.price = defaults.price;
        }

        @CustomType.Setter
        public Builder canSubscribe(Boolean canSubscribe) {
            if (canSubscribe == null) {
              throw new MissingRequiredPropertyException("GetZonePlan", "canSubscribe");
            }
            this.canSubscribe = canSubscribe;
            return this;
        }
        @CustomType.Setter
        public Builder currency(String currency) {
            if (currency == null) {
              throw new MissingRequiredPropertyException("GetZonePlan", "currency");
            }
            this.currency = currency;
            return this;
        }
        @CustomType.Setter
        public Builder externallyManaged(Boolean externallyManaged) {
            if (externallyManaged == null) {
              throw new MissingRequiredPropertyException("GetZonePlan", "externallyManaged");
            }
            this.externallyManaged = externallyManaged;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(String frequency) {
            if (frequency == null) {
              throw new MissingRequiredPropertyException("GetZonePlan", "frequency");
            }
            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZonePlan", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isSubscribed(Boolean isSubscribed) {
            if (isSubscribed == null) {
              throw new MissingRequiredPropertyException("GetZonePlan", "isSubscribed");
            }
            this.isSubscribed = isSubscribed;
            return this;
        }
        @CustomType.Setter
        public Builder legacyDiscount(Boolean legacyDiscount) {
            if (legacyDiscount == null) {
              throw new MissingRequiredPropertyException("GetZonePlan", "legacyDiscount");
            }
            this.legacyDiscount = legacyDiscount;
            return this;
        }
        @CustomType.Setter
        public Builder legacyId(String legacyId) {
            if (legacyId == null) {
              throw new MissingRequiredPropertyException("GetZonePlan", "legacyId");
            }
            this.legacyId = legacyId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetZonePlan", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder price(Double price) {
            if (price == null) {
              throw new MissingRequiredPropertyException("GetZonePlan", "price");
            }
            this.price = price;
            return this;
        }
        public GetZonePlan build() {
            final var _resultValue = new GetZonePlan();
            _resultValue.canSubscribe = canSubscribe;
            _resultValue.currency = currency;
            _resultValue.externallyManaged = externallyManaged;
            _resultValue.frequency = frequency;
            _resultValue.id = id;
            _resultValue.isSubscribed = isSubscribed;
            _resultValue.legacyDiscount = legacyDiscount;
            _resultValue.legacyId = legacyId;
            _resultValue.name = name;
            _resultValue.price = price;
            return _resultValue;
        }
    }
}
