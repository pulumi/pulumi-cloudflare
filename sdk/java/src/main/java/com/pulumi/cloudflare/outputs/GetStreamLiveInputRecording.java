// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStreamLiveInputRecording {
    /**
     * @return Lists the origins allowed to display videos created with this input. Enter allowed origin domains in an array and use `*` for wildcard subdomains. An empty array allows videos to be viewed on any origin.
     * 
     */
    private List<String> allowedOrigins;
    /**
     * @return Disables reporting the number of live viewers when this property is set to `true`.
     * 
     */
    private Boolean hideLiveViewerCount;
    /**
     * @return Specifies the recording behavior for the live input. Set this value to `off` to prevent a recording. Set the value to `automatic` to begin a recording and transition to on-demand after Stream Live stops receiving input.
     * Available values: &#34;off&#34;, &#34;automatic&#34;.
     * 
     */
    private String mode;
    /**
     * @return Indicates if a video using the live input has the `requireSignedURLs` property set. Also enforces access controls on any video recording of the livestream with the live input.
     * 
     */
    private Boolean requireSignedUrls;
    /**
     * @return Determines the amount of time a live input configured in `automatic` mode should wait before a recording transitions from live to on-demand. `0` is recommended for most use cases and indicates the platform default should be used.
     * 
     */
    private Integer timeoutSeconds;

    private GetStreamLiveInputRecording() {}
    /**
     * @return Lists the origins allowed to display videos created with this input. Enter allowed origin domains in an array and use `*` for wildcard subdomains. An empty array allows videos to be viewed on any origin.
     * 
     */
    public List<String> allowedOrigins() {
        return this.allowedOrigins;
    }
    /**
     * @return Disables reporting the number of live viewers when this property is set to `true`.
     * 
     */
    public Boolean hideLiveViewerCount() {
        return this.hideLiveViewerCount;
    }
    /**
     * @return Specifies the recording behavior for the live input. Set this value to `off` to prevent a recording. Set the value to `automatic` to begin a recording and transition to on-demand after Stream Live stops receiving input.
     * Available values: &#34;off&#34;, &#34;automatic&#34;.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return Indicates if a video using the live input has the `requireSignedURLs` property set. Also enforces access controls on any video recording of the livestream with the live input.
     * 
     */
    public Boolean requireSignedUrls() {
        return this.requireSignedUrls;
    }
    /**
     * @return Determines the amount of time a live input configured in `automatic` mode should wait before a recording transitions from live to on-demand. `0` is recommended for most use cases and indicates the platform default should be used.
     * 
     */
    public Integer timeoutSeconds() {
        return this.timeoutSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamLiveInputRecording defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedOrigins;
        private Boolean hideLiveViewerCount;
        private String mode;
        private Boolean requireSignedUrls;
        private Integer timeoutSeconds;
        public Builder() {}
        public Builder(GetStreamLiveInputRecording defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedOrigins = defaults.allowedOrigins;
    	      this.hideLiveViewerCount = defaults.hideLiveViewerCount;
    	      this.mode = defaults.mode;
    	      this.requireSignedUrls = defaults.requireSignedUrls;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        @CustomType.Setter
        public Builder allowedOrigins(List<String> allowedOrigins) {
            if (allowedOrigins == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputRecording", "allowedOrigins");
            }
            this.allowedOrigins = allowedOrigins;
            return this;
        }
        public Builder allowedOrigins(String... allowedOrigins) {
            return allowedOrigins(List.of(allowedOrigins));
        }
        @CustomType.Setter
        public Builder hideLiveViewerCount(Boolean hideLiveViewerCount) {
            if (hideLiveViewerCount == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputRecording", "hideLiveViewerCount");
            }
            this.hideLiveViewerCount = hideLiveViewerCount;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputRecording", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder requireSignedUrls(Boolean requireSignedUrls) {
            if (requireSignedUrls == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputRecording", "requireSignedUrls");
            }
            this.requireSignedUrls = requireSignedUrls;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            if (timeoutSeconds == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputRecording", "timeoutSeconds");
            }
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        public GetStreamLiveInputRecording build() {
            final var _resultValue = new GetStreamLiveInputRecording();
            _resultValue.allowedOrigins = allowedOrigins;
            _resultValue.hideLiveViewerCount = hideLiveViewerCount;
            _resultValue.mode = mode;
            _resultValue.requireSignedUrls = requireSignedUrls;
            _resultValue.timeoutSeconds = timeoutSeconds;
            return _resultValue;
        }
    }
}
