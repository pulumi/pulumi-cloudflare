// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FallbackDomainDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final FallbackDomainDomainArgs Empty = new FallbackDomainDomainArgs();

    /**
     * The description of the domain.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the domain.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The DNS servers to receive the redirected request.
     * 
     */
    @Import(name="dnsServers")
    private @Nullable Output<List<String>> dnsServers;

    /**
     * @return The DNS servers to receive the redirected request.
     * 
     */
    public Optional<Output<List<String>>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * The domain to ignore DNS requests.
     * 
     */
    @Import(name="suffix")
    private @Nullable Output<String> suffix;

    /**
     * @return The domain to ignore DNS requests.
     * 
     */
    public Optional<Output<String>> suffix() {
        return Optional.ofNullable(this.suffix);
    }

    private FallbackDomainDomainArgs() {}

    private FallbackDomainDomainArgs(FallbackDomainDomainArgs $) {
        this.description = $.description;
        this.dnsServers = $.dnsServers;
        this.suffix = $.suffix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FallbackDomainDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FallbackDomainDomainArgs $;

        public Builder() {
            $ = new FallbackDomainDomainArgs();
        }

        public Builder(FallbackDomainDomainArgs defaults) {
            $ = new FallbackDomainDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the domain.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the domain.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dnsServers The DNS servers to receive the redirected request.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers The DNS servers to receive the redirected request.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        /**
         * @param dnsServers The DNS servers to receive the redirected request.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param suffix The domain to ignore DNS requests.
         * 
         * @return builder
         * 
         */
        public Builder suffix(@Nullable Output<String> suffix) {
            $.suffix = suffix;
            return this;
        }

        /**
         * @param suffix The domain to ignore DNS requests.
         * 
         * @return builder
         * 
         */
        public Builder suffix(String suffix) {
            return suffix(Output.of(suffix));
        }

        public FallbackDomainDomainArgs build() {
            return $;
        }
    }

}
