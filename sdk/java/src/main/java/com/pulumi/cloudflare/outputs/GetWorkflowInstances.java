// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.util.Objects;

@CustomType
public final class GetWorkflowInstances {
    private Double complete;
    private Double errored;
    private Double paused;
    private Double queued;
    private Double running;
    private Double terminated;
    private Double waiting;
    private Double waitingForPause;

    private GetWorkflowInstances() {}
    public Double complete() {
        return this.complete;
    }
    public Double errored() {
        return this.errored;
    }
    public Double paused() {
        return this.paused;
    }
    public Double queued() {
        return this.queued;
    }
    public Double running() {
        return this.running;
    }
    public Double terminated() {
        return this.terminated;
    }
    public Double waiting() {
        return this.waiting;
    }
    public Double waitingForPause() {
        return this.waitingForPause;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkflowInstances defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double complete;
        private Double errored;
        private Double paused;
        private Double queued;
        private Double running;
        private Double terminated;
        private Double waiting;
        private Double waitingForPause;
        public Builder() {}
        public Builder(GetWorkflowInstances defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.complete = defaults.complete;
    	      this.errored = defaults.errored;
    	      this.paused = defaults.paused;
    	      this.queued = defaults.queued;
    	      this.running = defaults.running;
    	      this.terminated = defaults.terminated;
    	      this.waiting = defaults.waiting;
    	      this.waitingForPause = defaults.waitingForPause;
        }

        @CustomType.Setter
        public Builder complete(Double complete) {
            if (complete == null) {
              throw new MissingRequiredPropertyException("GetWorkflowInstances", "complete");
            }
            this.complete = complete;
            return this;
        }
        @CustomType.Setter
        public Builder errored(Double errored) {
            if (errored == null) {
              throw new MissingRequiredPropertyException("GetWorkflowInstances", "errored");
            }
            this.errored = errored;
            return this;
        }
        @CustomType.Setter
        public Builder paused(Double paused) {
            if (paused == null) {
              throw new MissingRequiredPropertyException("GetWorkflowInstances", "paused");
            }
            this.paused = paused;
            return this;
        }
        @CustomType.Setter
        public Builder queued(Double queued) {
            if (queued == null) {
              throw new MissingRequiredPropertyException("GetWorkflowInstances", "queued");
            }
            this.queued = queued;
            return this;
        }
        @CustomType.Setter
        public Builder running(Double running) {
            if (running == null) {
              throw new MissingRequiredPropertyException("GetWorkflowInstances", "running");
            }
            this.running = running;
            return this;
        }
        @CustomType.Setter
        public Builder terminated(Double terminated) {
            if (terminated == null) {
              throw new MissingRequiredPropertyException("GetWorkflowInstances", "terminated");
            }
            this.terminated = terminated;
            return this;
        }
        @CustomType.Setter
        public Builder waiting(Double waiting) {
            if (waiting == null) {
              throw new MissingRequiredPropertyException("GetWorkflowInstances", "waiting");
            }
            this.waiting = waiting;
            return this;
        }
        @CustomType.Setter
        public Builder waitingForPause(Double waitingForPause) {
            if (waitingForPause == null) {
              throw new MissingRequiredPropertyException("GetWorkflowInstances", "waitingForPause");
            }
            this.waitingForPause = waitingForPause;
            return this;
        }
        public GetWorkflowInstances build() {
            final var _resultValue = new GetWorkflowInstances();
            _resultValue.complete = complete;
            _resultValue.errored = errored;
            _resultValue.paused = paused;
            _resultValue.queued = queued;
            _resultValue.running = running;
            _resultValue.terminated = terminated;
            _resultValue.waiting = waiting;
            _resultValue.waitingForPause = waitingForPause;
            return _resultValue;
        }
    }
}
