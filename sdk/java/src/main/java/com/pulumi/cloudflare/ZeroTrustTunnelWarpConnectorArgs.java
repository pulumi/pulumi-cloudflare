// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustTunnelWarpConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustTunnelWarpConnectorArgs Empty = new ZeroTrustTunnelWarpConnectorArgs();

    /**
     * Cloudflare account ID
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Cloudflare account ID
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * A user-friendly name for a tunnel.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A user-friendly name for a tunnel.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
     * 
     */
    @Import(name="tunnelSecret")
    private @Nullable Output<String> tunnelSecret;

    /**
     * @return Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
     * 
     */
    public Optional<Output<String>> tunnelSecret() {
        return Optional.ofNullable(this.tunnelSecret);
    }

    private ZeroTrustTunnelWarpConnectorArgs() {}

    private ZeroTrustTunnelWarpConnectorArgs(ZeroTrustTunnelWarpConnectorArgs $) {
        this.accountId = $.accountId;
        this.name = $.name;
        this.tunnelSecret = $.tunnelSecret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustTunnelWarpConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustTunnelWarpConnectorArgs $;

        public Builder() {
            $ = new ZeroTrustTunnelWarpConnectorArgs();
        }

        public Builder(ZeroTrustTunnelWarpConnectorArgs defaults) {
            $ = new ZeroTrustTunnelWarpConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Cloudflare account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Cloudflare account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param name A user-friendly name for a tunnel.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-friendly name for a tunnel.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tunnelSecret Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
         * 
         * @return builder
         * 
         */
        public Builder tunnelSecret(@Nullable Output<String> tunnelSecret) {
            $.tunnelSecret = tunnelSecret;
            return this;
        }

        /**
         * @param tunnelSecret Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
         * 
         * @return builder
         * 
         */
        public Builder tunnelSecret(String tunnelSecret) {
            return tunnelSecret(Output.of(tunnelSecret));
        }

        public ZeroTrustTunnelWarpConnectorArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("ZeroTrustTunnelWarpConnectorArgs", "accountId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ZeroTrustTunnelWarpConnectorArgs", "name");
            }
            return $;
        }
    }

}
