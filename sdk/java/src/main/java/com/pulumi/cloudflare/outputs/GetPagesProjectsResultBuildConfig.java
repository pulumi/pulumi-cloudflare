// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPagesProjectsResultBuildConfig {
    /**
     * @return Enable build caching for the project.
     * 
     */
    private Boolean buildCaching;
    /**
     * @return Command used to build project.
     * 
     */
    private String buildCommand;
    /**
     * @return Output directory of the build.
     * 
     */
    private String destinationDir;
    /**
     * @return Directory to run the command.
     * 
     */
    private String rootDir;
    /**
     * @return The classifying tag for analytics.
     * 
     */
    private String webAnalyticsTag;
    /**
     * @return The auth token for analytics.
     * 
     */
    private String webAnalyticsToken;

    private GetPagesProjectsResultBuildConfig() {}
    /**
     * @return Enable build caching for the project.
     * 
     */
    public Boolean buildCaching() {
        return this.buildCaching;
    }
    /**
     * @return Command used to build project.
     * 
     */
    public String buildCommand() {
        return this.buildCommand;
    }
    /**
     * @return Output directory of the build.
     * 
     */
    public String destinationDir() {
        return this.destinationDir;
    }
    /**
     * @return Directory to run the command.
     * 
     */
    public String rootDir() {
        return this.rootDir;
    }
    /**
     * @return The classifying tag for analytics.
     * 
     */
    public String webAnalyticsTag() {
        return this.webAnalyticsTag;
    }
    /**
     * @return The auth token for analytics.
     * 
     */
    public String webAnalyticsToken() {
        return this.webAnalyticsToken;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPagesProjectsResultBuildConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean buildCaching;
        private String buildCommand;
        private String destinationDir;
        private String rootDir;
        private String webAnalyticsTag;
        private String webAnalyticsToken;
        public Builder() {}
        public Builder(GetPagesProjectsResultBuildConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.buildCaching = defaults.buildCaching;
    	      this.buildCommand = defaults.buildCommand;
    	      this.destinationDir = defaults.destinationDir;
    	      this.rootDir = defaults.rootDir;
    	      this.webAnalyticsTag = defaults.webAnalyticsTag;
    	      this.webAnalyticsToken = defaults.webAnalyticsToken;
        }

        @CustomType.Setter
        public Builder buildCaching(Boolean buildCaching) {
            if (buildCaching == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResultBuildConfig", "buildCaching");
            }
            this.buildCaching = buildCaching;
            return this;
        }
        @CustomType.Setter
        public Builder buildCommand(String buildCommand) {
            if (buildCommand == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResultBuildConfig", "buildCommand");
            }
            this.buildCommand = buildCommand;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDir(String destinationDir) {
            if (destinationDir == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResultBuildConfig", "destinationDir");
            }
            this.destinationDir = destinationDir;
            return this;
        }
        @CustomType.Setter
        public Builder rootDir(String rootDir) {
            if (rootDir == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResultBuildConfig", "rootDir");
            }
            this.rootDir = rootDir;
            return this;
        }
        @CustomType.Setter
        public Builder webAnalyticsTag(String webAnalyticsTag) {
            if (webAnalyticsTag == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResultBuildConfig", "webAnalyticsTag");
            }
            this.webAnalyticsTag = webAnalyticsTag;
            return this;
        }
        @CustomType.Setter
        public Builder webAnalyticsToken(String webAnalyticsToken) {
            if (webAnalyticsToken == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResultBuildConfig", "webAnalyticsToken");
            }
            this.webAnalyticsToken = webAnalyticsToken;
            return this;
        }
        public GetPagesProjectsResultBuildConfig build() {
            final var _resultValue = new GetPagesProjectsResultBuildConfig();
            _resultValue.buildCaching = buildCaching;
            _resultValue.buildCommand = buildCommand;
            _resultValue.destinationDir = destinationDir;
            _resultValue.rootDir = rootDir;
            _resultValue.webAnalyticsTag = webAnalyticsTag;
            _resultValue.webAnalyticsToken = webAnalyticsToken;
            return _resultValue;
        }
    }
}
