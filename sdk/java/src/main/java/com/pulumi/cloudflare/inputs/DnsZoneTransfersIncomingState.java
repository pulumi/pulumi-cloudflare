// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsZoneTransfersIncomingState extends com.pulumi.resources.ResourceArgs {

    public static final DnsZoneTransfersIncomingState Empty = new DnsZoneTransfersIncomingState();

    /**
     * How often should a secondary zone auto refresh regardless of DNS NOTIFY.
     * Not applicable for primary zones.
     * 
     */
    @Import(name="autoRefreshSeconds")
    private @Nullable Output<Double> autoRefreshSeconds;

    /**
     * @return How often should a secondary zone auto refresh regardless of DNS NOTIFY.
     * Not applicable for primary zones.
     * 
     */
    public Optional<Output<Double>> autoRefreshSeconds() {
        return Optional.ofNullable(this.autoRefreshSeconds);
    }

    /**
     * The time for a specific event.
     * 
     */
    @Import(name="checkedTime")
    private @Nullable Output<String> checkedTime;

    /**
     * @return The time for a specific event.
     * 
     */
    public Optional<Output<String>> checkedTime() {
        return Optional.ofNullable(this.checkedTime);
    }

    /**
     * The time for a specific event.
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return The time for a specific event.
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * The time for a specific event.
     * 
     */
    @Import(name="modifiedTime")
    private @Nullable Output<String> modifiedTime;

    /**
     * @return The time for a specific event.
     * 
     */
    public Optional<Output<String>> modifiedTime() {
        return Optional.ofNullable(this.modifiedTime);
    }

    /**
     * Zone name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Zone name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of peer tags.
     * 
     */
    @Import(name="peers")
    private @Nullable Output<List<String>> peers;

    /**
     * @return A list of peer tags.
     * 
     */
    public Optional<Output<List<String>>> peers() {
        return Optional.ofNullable(this.peers);
    }

    /**
     * The serial number of the SOA for the given zone.
     * 
     */
    @Import(name="soaSerial")
    private @Nullable Output<Double> soaSerial;

    /**
     * @return The serial number of the SOA for the given zone.
     * 
     */
    public Optional<Output<Double>> soaSerial() {
        return Optional.ofNullable(this.soaSerial);
    }

    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private DnsZoneTransfersIncomingState() {}

    private DnsZoneTransfersIncomingState(DnsZoneTransfersIncomingState $) {
        this.autoRefreshSeconds = $.autoRefreshSeconds;
        this.checkedTime = $.checkedTime;
        this.createdTime = $.createdTime;
        this.modifiedTime = $.modifiedTime;
        this.name = $.name;
        this.peers = $.peers;
        this.soaSerial = $.soaSerial;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsZoneTransfersIncomingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsZoneTransfersIncomingState $;

        public Builder() {
            $ = new DnsZoneTransfersIncomingState();
        }

        public Builder(DnsZoneTransfersIncomingState defaults) {
            $ = new DnsZoneTransfersIncomingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRefreshSeconds How often should a secondary zone auto refresh regardless of DNS NOTIFY.
         * Not applicable for primary zones.
         * 
         * @return builder
         * 
         */
        public Builder autoRefreshSeconds(@Nullable Output<Double> autoRefreshSeconds) {
            $.autoRefreshSeconds = autoRefreshSeconds;
            return this;
        }

        /**
         * @param autoRefreshSeconds How often should a secondary zone auto refresh regardless of DNS NOTIFY.
         * Not applicable for primary zones.
         * 
         * @return builder
         * 
         */
        public Builder autoRefreshSeconds(Double autoRefreshSeconds) {
            return autoRefreshSeconds(Output.of(autoRefreshSeconds));
        }

        /**
         * @param checkedTime The time for a specific event.
         * 
         * @return builder
         * 
         */
        public Builder checkedTime(@Nullable Output<String> checkedTime) {
            $.checkedTime = checkedTime;
            return this;
        }

        /**
         * @param checkedTime The time for a specific event.
         * 
         * @return builder
         * 
         */
        public Builder checkedTime(String checkedTime) {
            return checkedTime(Output.of(checkedTime));
        }

        /**
         * @param createdTime The time for a specific event.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime The time for a specific event.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param modifiedTime The time for a specific event.
         * 
         * @return builder
         * 
         */
        public Builder modifiedTime(@Nullable Output<String> modifiedTime) {
            $.modifiedTime = modifiedTime;
            return this;
        }

        /**
         * @param modifiedTime The time for a specific event.
         * 
         * @return builder
         * 
         */
        public Builder modifiedTime(String modifiedTime) {
            return modifiedTime(Output.of(modifiedTime));
        }

        /**
         * @param name Zone name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Zone name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param peers A list of peer tags.
         * 
         * @return builder
         * 
         */
        public Builder peers(@Nullable Output<List<String>> peers) {
            $.peers = peers;
            return this;
        }

        /**
         * @param peers A list of peer tags.
         * 
         * @return builder
         * 
         */
        public Builder peers(List<String> peers) {
            return peers(Output.of(peers));
        }

        /**
         * @param peers A list of peer tags.
         * 
         * @return builder
         * 
         */
        public Builder peers(String... peers) {
            return peers(List.of(peers));
        }

        /**
         * @param soaSerial The serial number of the SOA for the given zone.
         * 
         * @return builder
         * 
         */
        public Builder soaSerial(@Nullable Output<Double> soaSerial) {
            $.soaSerial = soaSerial;
            return this;
        }

        /**
         * @param soaSerial The serial number of the SOA for the given zone.
         * 
         * @return builder
         * 
         */
        public Builder soaSerial(Double soaSerial) {
            return soaSerial(Output.of(soaSerial));
        }

        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public DnsZoneTransfersIncomingState build() {
            return $;
        }
    }

}
