// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.EmailRoutingCatchAllActionArgs;
import com.pulumi.cloudflare.inputs.EmailRoutingCatchAllMatcherArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EmailRoutingCatchAllArgs extends com.pulumi.resources.ResourceArgs {

    public static final EmailRoutingCatchAllArgs Empty = new EmailRoutingCatchAllArgs();

    /**
     * List actions for the catch-all routing rule.
     * 
     */
    @Import(name="actions", required=true)
    private Output<List<EmailRoutingCatchAllActionArgs>> actions;

    /**
     * @return List actions for the catch-all routing rule.
     * 
     */
    public Output<List<EmailRoutingCatchAllActionArgs>> actions() {
        return this.actions;
    }

    /**
     * Routing rule status.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Routing rule status.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * List of matchers for the catch-all routing rule.
     * 
     */
    @Import(name="matchers", required=true)
    private Output<List<EmailRoutingCatchAllMatcherArgs>> matchers;

    /**
     * @return List of matchers for the catch-all routing rule.
     * 
     */
    public Output<List<EmailRoutingCatchAllMatcherArgs>> matchers() {
        return this.matchers;
    }

    /**
     * Routing rule name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Routing rule name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private EmailRoutingCatchAllArgs() {}

    private EmailRoutingCatchAllArgs(EmailRoutingCatchAllArgs $) {
        this.actions = $.actions;
        this.enabled = $.enabled;
        this.matchers = $.matchers;
        this.name = $.name;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailRoutingCatchAllArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailRoutingCatchAllArgs $;

        public Builder() {
            $ = new EmailRoutingCatchAllArgs();
        }

        public Builder(EmailRoutingCatchAllArgs defaults) {
            $ = new EmailRoutingCatchAllArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions List actions for the catch-all routing rule.
         * 
         * @return builder
         * 
         */
        public Builder actions(Output<List<EmailRoutingCatchAllActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions List actions for the catch-all routing rule.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<EmailRoutingCatchAllActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions List actions for the catch-all routing rule.
         * 
         * @return builder
         * 
         */
        public Builder actions(EmailRoutingCatchAllActionArgs... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param enabled Routing rule status.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Routing rule status.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param matchers List of matchers for the catch-all routing rule.
         * 
         * @return builder
         * 
         */
        public Builder matchers(Output<List<EmailRoutingCatchAllMatcherArgs>> matchers) {
            $.matchers = matchers;
            return this;
        }

        /**
         * @param matchers List of matchers for the catch-all routing rule.
         * 
         * @return builder
         * 
         */
        public Builder matchers(List<EmailRoutingCatchAllMatcherArgs> matchers) {
            return matchers(Output.of(matchers));
        }

        /**
         * @param matchers List of matchers for the catch-all routing rule.
         * 
         * @return builder
         * 
         */
        public Builder matchers(EmailRoutingCatchAllMatcherArgs... matchers) {
            return matchers(List.of(matchers));
        }

        /**
         * @param name Routing rule name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Routing rule name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public EmailRoutingCatchAllArgs build() {
            if ($.actions == null) {
                throw new MissingRequiredPropertyException("EmailRoutingCatchAllArgs", "actions");
            }
            if ($.matchers == null) {
                throw new MissingRequiredPropertyException("EmailRoutingCatchAllArgs", "matchers");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("EmailRoutingCatchAllArgs", "zoneId");
            }
            return $;
        }
    }

}
