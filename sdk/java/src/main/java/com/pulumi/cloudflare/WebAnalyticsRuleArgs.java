// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAnalyticsRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAnalyticsRuleArgs Empty = new WebAnalyticsRuleArgs();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    @Import(name="host")
    private @Nullable Output<String> host;

    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Whether the rule includes or excludes traffic from being measured.
     * 
     */
    @Import(name="inclusive")
    private @Nullable Output<Boolean> inclusive;

    /**
     * @return Whether the rule includes or excludes traffic from being measured.
     * 
     */
    public Optional<Output<Boolean>> inclusive() {
        return Optional.ofNullable(this.inclusive);
    }

    /**
     * Whether the rule is paused or not.
     * 
     */
    @Import(name="isPaused")
    private @Nullable Output<Boolean> isPaused;

    /**
     * @return Whether the rule is paused or not.
     * 
     */
    public Optional<Output<Boolean>> isPaused() {
        return Optional.ofNullable(this.isPaused);
    }

    @Import(name="paths")
    private @Nullable Output<List<String>> paths;

    public Optional<Output<List<String>>> paths() {
        return Optional.ofNullable(this.paths);
    }

    /**
     * The Web Analytics ruleset identifier.
     * 
     */
    @Import(name="rulesetId", required=true)
    private Output<String> rulesetId;

    /**
     * @return The Web Analytics ruleset identifier.
     * 
     */
    public Output<String> rulesetId() {
        return this.rulesetId;
    }

    private WebAnalyticsRuleArgs() {}

    private WebAnalyticsRuleArgs(WebAnalyticsRuleArgs $) {
        this.accountId = $.accountId;
        this.host = $.host;
        this.inclusive = $.inclusive;
        this.isPaused = $.isPaused;
        this.paths = $.paths;
        this.rulesetId = $.rulesetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAnalyticsRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAnalyticsRuleArgs $;

        public Builder() {
            $ = new WebAnalyticsRuleArgs();
        }

        public Builder(WebAnalyticsRuleArgs defaults) {
            $ = new WebAnalyticsRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param inclusive Whether the rule includes or excludes traffic from being measured.
         * 
         * @return builder
         * 
         */
        public Builder inclusive(@Nullable Output<Boolean> inclusive) {
            $.inclusive = inclusive;
            return this;
        }

        /**
         * @param inclusive Whether the rule includes or excludes traffic from being measured.
         * 
         * @return builder
         * 
         */
        public Builder inclusive(Boolean inclusive) {
            return inclusive(Output.of(inclusive));
        }

        /**
         * @param isPaused Whether the rule is paused or not.
         * 
         * @return builder
         * 
         */
        public Builder isPaused(@Nullable Output<Boolean> isPaused) {
            $.isPaused = isPaused;
            return this;
        }

        /**
         * @param isPaused Whether the rule is paused or not.
         * 
         * @return builder
         * 
         */
        public Builder isPaused(Boolean isPaused) {
            return isPaused(Output.of(isPaused));
        }

        public Builder paths(@Nullable Output<List<String>> paths) {
            $.paths = paths;
            return this;
        }

        public Builder paths(List<String> paths) {
            return paths(Output.of(paths));
        }

        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }

        /**
         * @param rulesetId The Web Analytics ruleset identifier.
         * 
         * @return builder
         * 
         */
        public Builder rulesetId(Output<String> rulesetId) {
            $.rulesetId = rulesetId;
            return this;
        }

        /**
         * @param rulesetId The Web Analytics ruleset identifier.
         * 
         * @return builder
         * 
         */
        public Builder rulesetId(String rulesetId) {
            return rulesetId(Output.of(rulesetId));
        }

        public WebAnalyticsRuleArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("WebAnalyticsRuleArgs", "accountId");
            }
            if ($.rulesetId == null) {
                throw new MissingRequiredPropertyException("WebAnalyticsRuleArgs", "rulesetId");
            }
            return $;
        }
    }

}
