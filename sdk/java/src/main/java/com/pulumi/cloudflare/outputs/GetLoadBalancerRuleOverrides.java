// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetLoadBalancerRuleOverridesAdaptiveRouting;
import com.pulumi.cloudflare.outputs.GetLoadBalancerRuleOverridesLocationStrategy;
import com.pulumi.cloudflare.outputs.GetLoadBalancerRuleOverridesRandomSteering;
import com.pulumi.cloudflare.outputs.GetLoadBalancerRuleOverridesSessionAffinityAttributes;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetLoadBalancerRuleOverrides {
    /**
     * @return Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    private GetLoadBalancerRuleOverridesAdaptiveRouting adaptiveRouting;
    /**
     * @return A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    private Map<String,List<String>> countryPools;
    /**
     * @return A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
     * 
     */
    private List<String> defaultPools;
    /**
     * @return The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    private String fallbackPool;
    /**
     * @return Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
     * 
     */
    private GetLoadBalancerRuleOverridesLocationStrategy locationStrategy;
    /**
     * @return (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    private Map<String,List<String>> popPools;
    /**
     * @return Configures pool weights.
     * 
     */
    private GetLoadBalancerRuleOverridesRandomSteering randomSteering;
    /**
     * @return A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    private Map<String,List<String>> regionPools;
    /**
     * @return Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are:
     * 
     */
    private String sessionAffinity;
    /**
     * @return Configures attributes for session affinity.
     * 
     */
    private GetLoadBalancerRuleOverridesSessionAffinityAttributes sessionAffinityAttributes;
    /**
     * @return Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
     * 
     */
    private Double sessionAffinityTtl;
    /**
     * @return Steering Policy for this load balancer.
     * 
     */
    private String steeringPolicy;
    /**
     * @return Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    private Double ttl;

    private GetLoadBalancerRuleOverrides() {}
    /**
     * @return Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    public GetLoadBalancerRuleOverridesAdaptiveRouting adaptiveRouting() {
        return this.adaptiveRouting;
    }
    /**
     * @return A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    public Map<String,List<String>> countryPools() {
        return this.countryPools;
    }
    /**
     * @return A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
     * 
     */
    public List<String> defaultPools() {
        return this.defaultPools;
    }
    /**
     * @return The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    public String fallbackPool() {
        return this.fallbackPool;
    }
    /**
     * @return Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
     * 
     */
    public GetLoadBalancerRuleOverridesLocationStrategy locationStrategy() {
        return this.locationStrategy;
    }
    /**
     * @return (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    public Map<String,List<String>> popPools() {
        return this.popPools;
    }
    /**
     * @return Configures pool weights.
     * 
     */
    public GetLoadBalancerRuleOverridesRandomSteering randomSteering() {
        return this.randomSteering;
    }
    /**
     * @return A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    public Map<String,List<String>> regionPools() {
        return this.regionPools;
    }
    /**
     * @return Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are:
     * 
     */
    public String sessionAffinity() {
        return this.sessionAffinity;
    }
    /**
     * @return Configures attributes for session affinity.
     * 
     */
    public GetLoadBalancerRuleOverridesSessionAffinityAttributes sessionAffinityAttributes() {
        return this.sessionAffinityAttributes;
    }
    /**
     * @return Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
     * 
     */
    public Double sessionAffinityTtl() {
        return this.sessionAffinityTtl;
    }
    /**
     * @return Steering Policy for this load balancer.
     * 
     */
    public String steeringPolicy() {
        return this.steeringPolicy;
    }
    /**
     * @return Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    public Double ttl() {
        return this.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerRuleOverrides defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetLoadBalancerRuleOverridesAdaptiveRouting adaptiveRouting;
        private Map<String,List<String>> countryPools;
        private List<String> defaultPools;
        private String fallbackPool;
        private GetLoadBalancerRuleOverridesLocationStrategy locationStrategy;
        private Map<String,List<String>> popPools;
        private GetLoadBalancerRuleOverridesRandomSteering randomSteering;
        private Map<String,List<String>> regionPools;
        private String sessionAffinity;
        private GetLoadBalancerRuleOverridesSessionAffinityAttributes sessionAffinityAttributes;
        private Double sessionAffinityTtl;
        private String steeringPolicy;
        private Double ttl;
        public Builder() {}
        public Builder(GetLoadBalancerRuleOverrides defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adaptiveRouting = defaults.adaptiveRouting;
    	      this.countryPools = defaults.countryPools;
    	      this.defaultPools = defaults.defaultPools;
    	      this.fallbackPool = defaults.fallbackPool;
    	      this.locationStrategy = defaults.locationStrategy;
    	      this.popPools = defaults.popPools;
    	      this.randomSteering = defaults.randomSteering;
    	      this.regionPools = defaults.regionPools;
    	      this.sessionAffinity = defaults.sessionAffinity;
    	      this.sessionAffinityAttributes = defaults.sessionAffinityAttributes;
    	      this.sessionAffinityTtl = defaults.sessionAffinityTtl;
    	      this.steeringPolicy = defaults.steeringPolicy;
    	      this.ttl = defaults.ttl;
        }

        @CustomType.Setter
        public Builder adaptiveRouting(GetLoadBalancerRuleOverridesAdaptiveRouting adaptiveRouting) {
            if (adaptiveRouting == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "adaptiveRouting");
            }
            this.adaptiveRouting = adaptiveRouting;
            return this;
        }
        @CustomType.Setter
        public Builder countryPools(Map<String,List<String>> countryPools) {
            if (countryPools == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "countryPools");
            }
            this.countryPools = countryPools;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPools(List<String> defaultPools) {
            if (defaultPools == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "defaultPools");
            }
            this.defaultPools = defaultPools;
            return this;
        }
        public Builder defaultPools(String... defaultPools) {
            return defaultPools(List.of(defaultPools));
        }
        @CustomType.Setter
        public Builder fallbackPool(String fallbackPool) {
            if (fallbackPool == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "fallbackPool");
            }
            this.fallbackPool = fallbackPool;
            return this;
        }
        @CustomType.Setter
        public Builder locationStrategy(GetLoadBalancerRuleOverridesLocationStrategy locationStrategy) {
            if (locationStrategy == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "locationStrategy");
            }
            this.locationStrategy = locationStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder popPools(Map<String,List<String>> popPools) {
            if (popPools == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "popPools");
            }
            this.popPools = popPools;
            return this;
        }
        @CustomType.Setter
        public Builder randomSteering(GetLoadBalancerRuleOverridesRandomSteering randomSteering) {
            if (randomSteering == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "randomSteering");
            }
            this.randomSteering = randomSteering;
            return this;
        }
        @CustomType.Setter
        public Builder regionPools(Map<String,List<String>> regionPools) {
            if (regionPools == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "regionPools");
            }
            this.regionPools = regionPools;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinity(String sessionAffinity) {
            if (sessionAffinity == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "sessionAffinity");
            }
            this.sessionAffinity = sessionAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinityAttributes(GetLoadBalancerRuleOverridesSessionAffinityAttributes sessionAffinityAttributes) {
            if (sessionAffinityAttributes == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "sessionAffinityAttributes");
            }
            this.sessionAffinityAttributes = sessionAffinityAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinityTtl(Double sessionAffinityTtl) {
            if (sessionAffinityTtl == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "sessionAffinityTtl");
            }
            this.sessionAffinityTtl = sessionAffinityTtl;
            return this;
        }
        @CustomType.Setter
        public Builder steeringPolicy(String steeringPolicy) {
            if (steeringPolicy == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "steeringPolicy");
            }
            this.steeringPolicy = steeringPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(Double ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRuleOverrides", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        public GetLoadBalancerRuleOverrides build() {
            final var _resultValue = new GetLoadBalancerRuleOverrides();
            _resultValue.adaptiveRouting = adaptiveRouting;
            _resultValue.countryPools = countryPools;
            _resultValue.defaultPools = defaultPools;
            _resultValue.fallbackPool = fallbackPool;
            _resultValue.locationStrategy = locationStrategy;
            _resultValue.popPools = popPools;
            _resultValue.randomSteering = randomSteering;
            _resultValue.regionPools = regionPools;
            _resultValue.sessionAffinity = sessionAffinity;
            _resultValue.sessionAffinityAttributes = sessionAffinityAttributes;
            _resultValue.sessionAffinityTtl = sessionAffinityTtl;
            _resultValue.steeringPolicy = steeringPolicy;
            _resultValue.ttl = ttl;
            return _resultValue;
        }
    }
}
