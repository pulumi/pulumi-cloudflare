// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudforceOneRequestPriorityState extends com.pulumi.resources.ResourceArgs {

    public static final CloudforceOneRequestPriorityState Empty = new CloudforceOneRequestPriorityState();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="completed")
    private @Nullable Output<String> completed;

    public Optional<Output<String>> completed() {
        return Optional.ofNullable(this.completed);
    }

    /**
     * Request content.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return Request content.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    @Import(name="created")
    private @Nullable Output<String> created;

    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * List of labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return List of labels.
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Tokens for the request messages.
     * 
     */
    @Import(name="messageTokens")
    private @Nullable Output<Integer> messageTokens;

    /**
     * @return Tokens for the request messages.
     * 
     */
    public Optional<Output<Integer>> messageTokens() {
        return Optional.ofNullable(this.messageTokens);
    }

    /**
     * Priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Priority.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Readable Request ID.
     * 
     */
    @Import(name="readableId")
    private @Nullable Output<String> readableId;

    /**
     * @return Readable Request ID.
     * 
     */
    public Optional<Output<String>> readableId() {
        return Optional.ofNullable(this.readableId);
    }

    /**
     * Requested information from request.
     * 
     */
    @Import(name="request")
    private @Nullable Output<String> request;

    /**
     * @return Requested information from request.
     * 
     */
    public Optional<Output<String>> request() {
        return Optional.ofNullable(this.request);
    }

    /**
     * Requirement.
     * 
     */
    @Import(name="requirement")
    private @Nullable Output<String> requirement;

    /**
     * @return Requirement.
     * 
     */
    public Optional<Output<String>> requirement() {
        return Optional.ofNullable(this.requirement);
    }

    /**
     * Request Status.
     * Available values: &#34;open&#34;, &#34;accepted&#34;, &#34;reported&#34;, &#34;approved&#34;, &#34;completed&#34;, &#34;declined&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Request Status.
     * Available values: &#34;open&#34;, &#34;accepted&#34;, &#34;reported&#34;, &#34;approved&#34;, &#34;completed&#34;, &#34;declined&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Brief description of the request.
     * 
     */
    @Import(name="summary")
    private @Nullable Output<String> summary;

    /**
     * @return Brief description of the request.
     * 
     */
    public Optional<Output<String>> summary() {
        return Optional.ofNullable(this.summary);
    }

    /**
     * The CISA defined Traffic Light Protocol (TLP).
     * Available values: &#34;clear&#34;, &#34;amber&#34;, &#34;amber-strict&#34;, &#34;green&#34;, &#34;red&#34;.
     * 
     */
    @Import(name="tlp")
    private @Nullable Output<String> tlp;

    /**
     * @return The CISA defined Traffic Light Protocol (TLP).
     * Available values: &#34;clear&#34;, &#34;amber&#34;, &#34;amber-strict&#34;, &#34;green&#34;, &#34;red&#34;.
     * 
     */
    public Optional<Output<String>> tlp() {
        return Optional.ofNullable(this.tlp);
    }

    /**
     * Tokens for the request.
     * 
     */
    @Import(name="tokens")
    private @Nullable Output<Integer> tokens;

    /**
     * @return Tokens for the request.
     * 
     */
    public Optional<Output<Integer>> tokens() {
        return Optional.ofNullable(this.tokens);
    }

    @Import(name="updated")
    private @Nullable Output<String> updated;

    public Optional<Output<String>> updated() {
        return Optional.ofNullable(this.updated);
    }

    private CloudforceOneRequestPriorityState() {}

    private CloudforceOneRequestPriorityState(CloudforceOneRequestPriorityState $) {
        this.accountId = $.accountId;
        this.completed = $.completed;
        this.content = $.content;
        this.created = $.created;
        this.labels = $.labels;
        this.messageTokens = $.messageTokens;
        this.priority = $.priority;
        this.readableId = $.readableId;
        this.request = $.request;
        this.requirement = $.requirement;
        this.status = $.status;
        this.summary = $.summary;
        this.tlp = $.tlp;
        this.tokens = $.tokens;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudforceOneRequestPriorityState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudforceOneRequestPriorityState $;

        public Builder() {
            $ = new CloudforceOneRequestPriorityState();
        }

        public Builder(CloudforceOneRequestPriorityState defaults) {
            $ = new CloudforceOneRequestPriorityState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder completed(@Nullable Output<String> completed) {
            $.completed = completed;
            return this;
        }

        public Builder completed(String completed) {
            return completed(Output.of(completed));
        }

        /**
         * @param content Request content.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content Request content.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param labels List of labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels List of labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels List of labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param messageTokens Tokens for the request messages.
         * 
         * @return builder
         * 
         */
        public Builder messageTokens(@Nullable Output<Integer> messageTokens) {
            $.messageTokens = messageTokens;
            return this;
        }

        /**
         * @param messageTokens Tokens for the request messages.
         * 
         * @return builder
         * 
         */
        public Builder messageTokens(Integer messageTokens) {
            return messageTokens(Output.of(messageTokens));
        }

        /**
         * @param priority Priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param readableId Readable Request ID.
         * 
         * @return builder
         * 
         */
        public Builder readableId(@Nullable Output<String> readableId) {
            $.readableId = readableId;
            return this;
        }

        /**
         * @param readableId Readable Request ID.
         * 
         * @return builder
         * 
         */
        public Builder readableId(String readableId) {
            return readableId(Output.of(readableId));
        }

        /**
         * @param request Requested information from request.
         * 
         * @return builder
         * 
         */
        public Builder request(@Nullable Output<String> request) {
            $.request = request;
            return this;
        }

        /**
         * @param request Requested information from request.
         * 
         * @return builder
         * 
         */
        public Builder request(String request) {
            return request(Output.of(request));
        }

        /**
         * @param requirement Requirement.
         * 
         * @return builder
         * 
         */
        public Builder requirement(@Nullable Output<String> requirement) {
            $.requirement = requirement;
            return this;
        }

        /**
         * @param requirement Requirement.
         * 
         * @return builder
         * 
         */
        public Builder requirement(String requirement) {
            return requirement(Output.of(requirement));
        }

        /**
         * @param status Request Status.
         * Available values: &#34;open&#34;, &#34;accepted&#34;, &#34;reported&#34;, &#34;approved&#34;, &#34;completed&#34;, &#34;declined&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Request Status.
         * Available values: &#34;open&#34;, &#34;accepted&#34;, &#34;reported&#34;, &#34;approved&#34;, &#34;completed&#34;, &#34;declined&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param summary Brief description of the request.
         * 
         * @return builder
         * 
         */
        public Builder summary(@Nullable Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary Brief description of the request.
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        /**
         * @param tlp The CISA defined Traffic Light Protocol (TLP).
         * Available values: &#34;clear&#34;, &#34;amber&#34;, &#34;amber-strict&#34;, &#34;green&#34;, &#34;red&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tlp(@Nullable Output<String> tlp) {
            $.tlp = tlp;
            return this;
        }

        /**
         * @param tlp The CISA defined Traffic Light Protocol (TLP).
         * Available values: &#34;clear&#34;, &#34;amber&#34;, &#34;amber-strict&#34;, &#34;green&#34;, &#34;red&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tlp(String tlp) {
            return tlp(Output.of(tlp));
        }

        /**
         * @param tokens Tokens for the request.
         * 
         * @return builder
         * 
         */
        public Builder tokens(@Nullable Output<Integer> tokens) {
            $.tokens = tokens;
            return this;
        }

        /**
         * @param tokens Tokens for the request.
         * 
         * @return builder
         * 
         */
        public Builder tokens(Integer tokens) {
            return tokens(Output.of(tokens));
        }

        public Builder updated(@Nullable Output<String> updated) {
            $.updated = updated;
            return this;
        }

        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        public CloudforceOneRequestPriorityState build() {
            return $;
        }
    }

}
