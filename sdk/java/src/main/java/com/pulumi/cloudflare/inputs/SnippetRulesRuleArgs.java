// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnippetRulesRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnippetRulesRuleArgs Empty = new SnippetRulesRuleArgs();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="expression")
    private @Nullable Output<String> expression;

    public Optional<Output<String>> expression() {
        return Optional.ofNullable(this.expression);
    }

    /**
     * Snippet identifying name
     * 
     */
    @Import(name="snippetName")
    private @Nullable Output<String> snippetName;

    /**
     * @return Snippet identifying name
     * 
     */
    public Optional<Output<String>> snippetName() {
        return Optional.ofNullable(this.snippetName);
    }

    private SnippetRulesRuleArgs() {}

    private SnippetRulesRuleArgs(SnippetRulesRuleArgs $) {
        this.description = $.description;
        this.enabled = $.enabled;
        this.expression = $.expression;
        this.snippetName = $.snippetName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnippetRulesRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnippetRulesRuleArgs $;

        public Builder() {
            $ = new SnippetRulesRuleArgs();
        }

        public Builder(SnippetRulesRuleArgs defaults) {
            $ = new SnippetRulesRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder expression(@Nullable Output<String> expression) {
            $.expression = expression;
            return this;
        }

        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
         * @param snippetName Snippet identifying name
         * 
         * @return builder
         * 
         */
        public Builder snippetName(@Nullable Output<String> snippetName) {
            $.snippetName = snippetName;
            return this;
        }

        /**
         * @param snippetName Snippet identifying name
         * 
         * @return builder
         * 
         */
        public Builder snippetName(String snippetName) {
            return snippetName(Output.of(snippetName));
        }

        public SnippetRulesRuleArgs build() {
            return $;
        }
    }

}
