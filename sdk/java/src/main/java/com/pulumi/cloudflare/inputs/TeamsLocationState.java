// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.TeamsLocationEndpointsArgs;
import com.pulumi.cloudflare.inputs.TeamsLocationNetworkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamsLocationState extends com.pulumi.resources.ResourceArgs {

    public static final TeamsLocationState Empty = new TeamsLocationState();

    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Indicate whether this location is the default location.
     * 
     */
    @Import(name="clientDefault")
    private @Nullable Output<Boolean> clientDefault;

    /**
     * @return Indicate whether this location is the default location.
     * 
     */
    public Optional<Output<Boolean>> clientDefault() {
        return Optional.ofNullable(this.clientDefault);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Specify the identifier of the pair of IPv4 addresses assigned to this location. When creating a location, if this field is absent or set to null, the pair of shared IPv4 addresses (0e4a32c6-6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if this field is absent or set to null, the pre-assigned pair remains unchanged.
     * 
     */
    @Import(name="dnsDestinationIpsId")
    private @Nullable Output<String> dnsDestinationIpsId;

    /**
     * @return Specify the identifier of the pair of IPv4 addresses assigned to this location. When creating a location, if this field is absent or set to null, the pair of shared IPv4 addresses (0e4a32c6-6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if this field is absent or set to null, the pre-assigned pair remains unchanged.
     * 
     */
    public Optional<Output<String>> dnsDestinationIpsId() {
        return Optional.ofNullable(this.dnsDestinationIpsId);
    }

    /**
     * Specify the UUID of the IPv6 block brought to the gateway so that this location&#39;s IPv6 address is allocated from the Bring Your Own IPv6 (BYOIPv6) block rather than the standard Cloudflare IPv6 block.
     * 
     */
    @Import(name="dnsDestinationIpv6BlockId")
    private @Nullable Output<String> dnsDestinationIpv6BlockId;

    /**
     * @return Specify the UUID of the IPv6 block brought to the gateway so that this location&#39;s IPv6 address is allocated from the Bring Your Own IPv6 (BYOIPv6) block rather than the standard Cloudflare IPv6 block.
     * 
     */
    public Optional<Output<String>> dnsDestinationIpv6BlockId() {
        return Optional.ofNullable(this.dnsDestinationIpv6BlockId);
    }

    /**
     * Specify the DNS over HTTPS domain that receives DNS requests. Gateway automatically generates this value.
     * 
     */
    @Import(name="dohSubdomain")
    private @Nullable Output<String> dohSubdomain;

    /**
     * @return Specify the DNS over HTTPS domain that receives DNS requests. Gateway automatically generates this value.
     * 
     */
    public Optional<Output<String>> dohSubdomain() {
        return Optional.ofNullable(this.dohSubdomain);
    }

    /**
     * Indicate whether the location must resolve EDNS queries.
     * 
     */
    @Import(name="ecsSupport")
    private @Nullable Output<Boolean> ecsSupport;

    /**
     * @return Indicate whether the location must resolve EDNS queries.
     * 
     */
    public Optional<Output<Boolean>> ecsSupport() {
        return Optional.ofNullable(this.ecsSupport);
    }

    /**
     * Configure the destination endpoints for this location.
     * 
     */
    @Import(name="endpoints")
    private @Nullable Output<TeamsLocationEndpointsArgs> endpoints;

    /**
     * @return Configure the destination endpoints for this location.
     * 
     */
    public Optional<Output<TeamsLocationEndpointsArgs>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * Defines the automatically generated IPv6 destination IP assigned to this location. Gateway counts all DNS requests sent to this IP as requests under this location.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return Defines the automatically generated IPv6 destination IP assigned to this location. Gateway counts all DNS requests sent to this IP as requests under this location.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Show the primary destination IPv4 address from the pair identified dns*destination*ips_id. This field read-only.
     * 
     */
    @Import(name="ipv4Destination")
    private @Nullable Output<String> ipv4Destination;

    /**
     * @return Show the primary destination IPv4 address from the pair identified dns*destination*ips_id. This field read-only.
     * 
     */
    public Optional<Output<String>> ipv4Destination() {
        return Optional.ofNullable(this.ipv4Destination);
    }

    /**
     * Show the backup destination IPv4 address from the pair identified dns*destination*ips_id. This field read-only.
     * 
     */
    @Import(name="ipv4DestinationBackup")
    private @Nullable Output<String> ipv4DestinationBackup;

    /**
     * @return Show the backup destination IPv4 address from the pair identified dns*destination*ips_id. This field read-only.
     * 
     */
    public Optional<Output<String>> ipv4DestinationBackup() {
        return Optional.ofNullable(this.ipv4DestinationBackup);
    }

    /**
     * Specify the location name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specify the location name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specify the list of network ranges from which requests at this location originate. The list takes effect only if it is non-empty and the IPv4 endpoint is enabled for this location.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<TeamsLocationNetworkArgs>> networks;

    /**
     * @return Specify the list of network ranges from which requests at this location originate. The list takes effect only if it is non-empty and the IPv4 endpoint is enabled for this location.
     * 
     */
    public Optional<Output<List<TeamsLocationNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private TeamsLocationState() {}

    private TeamsLocationState(TeamsLocationState $) {
        this.accountId = $.accountId;
        this.clientDefault = $.clientDefault;
        this.createdAt = $.createdAt;
        this.dnsDestinationIpsId = $.dnsDestinationIpsId;
        this.dnsDestinationIpv6BlockId = $.dnsDestinationIpv6BlockId;
        this.dohSubdomain = $.dohSubdomain;
        this.ecsSupport = $.ecsSupport;
        this.endpoints = $.endpoints;
        this.ip = $.ip;
        this.ipv4Destination = $.ipv4Destination;
        this.ipv4DestinationBackup = $.ipv4DestinationBackup;
        this.name = $.name;
        this.networks = $.networks;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamsLocationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamsLocationState $;

        public Builder() {
            $ = new TeamsLocationState();
        }

        public Builder(TeamsLocationState defaults) {
            $ = new TeamsLocationState(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param clientDefault Indicate whether this location is the default location.
         * 
         * @return builder
         * 
         */
        public Builder clientDefault(@Nullable Output<Boolean> clientDefault) {
            $.clientDefault = clientDefault;
            return this;
        }

        /**
         * @param clientDefault Indicate whether this location is the default location.
         * 
         * @return builder
         * 
         */
        public Builder clientDefault(Boolean clientDefault) {
            return clientDefault(Output.of(clientDefault));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param dnsDestinationIpsId Specify the identifier of the pair of IPv4 addresses assigned to this location. When creating a location, if this field is absent or set to null, the pair of shared IPv4 addresses (0e4a32c6-6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if this field is absent or set to null, the pre-assigned pair remains unchanged.
         * 
         * @return builder
         * 
         */
        public Builder dnsDestinationIpsId(@Nullable Output<String> dnsDestinationIpsId) {
            $.dnsDestinationIpsId = dnsDestinationIpsId;
            return this;
        }

        /**
         * @param dnsDestinationIpsId Specify the identifier of the pair of IPv4 addresses assigned to this location. When creating a location, if this field is absent or set to null, the pair of shared IPv4 addresses (0e4a32c6-6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if this field is absent or set to null, the pre-assigned pair remains unchanged.
         * 
         * @return builder
         * 
         */
        public Builder dnsDestinationIpsId(String dnsDestinationIpsId) {
            return dnsDestinationIpsId(Output.of(dnsDestinationIpsId));
        }

        /**
         * @param dnsDestinationIpv6BlockId Specify the UUID of the IPv6 block brought to the gateway so that this location&#39;s IPv6 address is allocated from the Bring Your Own IPv6 (BYOIPv6) block rather than the standard Cloudflare IPv6 block.
         * 
         * @return builder
         * 
         */
        public Builder dnsDestinationIpv6BlockId(@Nullable Output<String> dnsDestinationIpv6BlockId) {
            $.dnsDestinationIpv6BlockId = dnsDestinationIpv6BlockId;
            return this;
        }

        /**
         * @param dnsDestinationIpv6BlockId Specify the UUID of the IPv6 block brought to the gateway so that this location&#39;s IPv6 address is allocated from the Bring Your Own IPv6 (BYOIPv6) block rather than the standard Cloudflare IPv6 block.
         * 
         * @return builder
         * 
         */
        public Builder dnsDestinationIpv6BlockId(String dnsDestinationIpv6BlockId) {
            return dnsDestinationIpv6BlockId(Output.of(dnsDestinationIpv6BlockId));
        }

        /**
         * @param dohSubdomain Specify the DNS over HTTPS domain that receives DNS requests. Gateway automatically generates this value.
         * 
         * @return builder
         * 
         */
        public Builder dohSubdomain(@Nullable Output<String> dohSubdomain) {
            $.dohSubdomain = dohSubdomain;
            return this;
        }

        /**
         * @param dohSubdomain Specify the DNS over HTTPS domain that receives DNS requests. Gateway automatically generates this value.
         * 
         * @return builder
         * 
         */
        public Builder dohSubdomain(String dohSubdomain) {
            return dohSubdomain(Output.of(dohSubdomain));
        }

        /**
         * @param ecsSupport Indicate whether the location must resolve EDNS queries.
         * 
         * @return builder
         * 
         */
        public Builder ecsSupport(@Nullable Output<Boolean> ecsSupport) {
            $.ecsSupport = ecsSupport;
            return this;
        }

        /**
         * @param ecsSupport Indicate whether the location must resolve EDNS queries.
         * 
         * @return builder
         * 
         */
        public Builder ecsSupport(Boolean ecsSupport) {
            return ecsSupport(Output.of(ecsSupport));
        }

        /**
         * @param endpoints Configure the destination endpoints for this location.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(@Nullable Output<TeamsLocationEndpointsArgs> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        /**
         * @param endpoints Configure the destination endpoints for this location.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(TeamsLocationEndpointsArgs endpoints) {
            return endpoints(Output.of(endpoints));
        }

        /**
         * @param ip Defines the automatically generated IPv6 destination IP assigned to this location. Gateway counts all DNS requests sent to this IP as requests under this location.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip Defines the automatically generated IPv6 destination IP assigned to this location. Gateway counts all DNS requests sent to this IP as requests under this location.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param ipv4Destination Show the primary destination IPv4 address from the pair identified dns*destination*ips_id. This field read-only.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Destination(@Nullable Output<String> ipv4Destination) {
            $.ipv4Destination = ipv4Destination;
            return this;
        }

        /**
         * @param ipv4Destination Show the primary destination IPv4 address from the pair identified dns*destination*ips_id. This field read-only.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Destination(String ipv4Destination) {
            return ipv4Destination(Output.of(ipv4Destination));
        }

        /**
         * @param ipv4DestinationBackup Show the backup destination IPv4 address from the pair identified dns*destination*ips_id. This field read-only.
         * 
         * @return builder
         * 
         */
        public Builder ipv4DestinationBackup(@Nullable Output<String> ipv4DestinationBackup) {
            $.ipv4DestinationBackup = ipv4DestinationBackup;
            return this;
        }

        /**
         * @param ipv4DestinationBackup Show the backup destination IPv4 address from the pair identified dns*destination*ips_id. This field read-only.
         * 
         * @return builder
         * 
         */
        public Builder ipv4DestinationBackup(String ipv4DestinationBackup) {
            return ipv4DestinationBackup(Output.of(ipv4DestinationBackup));
        }

        /**
         * @param name Specify the location name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specify the location name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks Specify the list of network ranges from which requests at this location originate. The list takes effect only if it is non-empty and the IPv4 endpoint is enabled for this location.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<TeamsLocationNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Specify the list of network ranges from which requests at this location originate. The list takes effect only if it is non-empty and the IPv4 endpoint is enabled for this location.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<TeamsLocationNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks Specify the list of network ranges from which requests at this location originate. The list takes effect only if it is non-empty and the IPv4 endpoint is enabled for this location.
         * 
         * @return builder
         * 
         */
        public Builder networks(TeamsLocationNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public TeamsLocationState build() {
            return $;
        }
    }

}
