// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.TeamsAccountSettingsActivityLogArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsAntivirusArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsBlockPageArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsBodyScanningArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsBrowserIsolationArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsCertificateArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsCustomCertificateArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsExtendedEmailMatchingArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsFipsArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsHostSelectorArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsInspectionArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsProtocolDetectionArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsSandboxArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsTlsDecryptArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamsAccountSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamsAccountSettingsArgs Empty = new TeamsAccountSettingsArgs();

    /**
     * Specify activity log settings.
     * 
     */
    @Import(name="activityLog")
    private @Nullable Output<TeamsAccountSettingsActivityLogArgs> activityLog;

    /**
     * @return Specify activity log settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsActivityLogArgs>> activityLog() {
        return Optional.ofNullable(this.activityLog);
    }

    /**
     * Specify anti-virus settings.
     * 
     */
    @Import(name="antivirus")
    private @Nullable Output<TeamsAccountSettingsAntivirusArgs> antivirus;

    /**
     * @return Specify anti-virus settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsAntivirusArgs>> antivirus() {
        return Optional.ofNullable(this.antivirus);
    }

    /**
     * Specify block page layout settings.
     * 
     */
    @Import(name="blockPage")
    private @Nullable Output<TeamsAccountSettingsBlockPageArgs> blockPage;

    /**
     * @return Specify block page layout settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsBlockPageArgs>> blockPage() {
        return Optional.ofNullable(this.blockPage);
    }

    /**
     * Specify the DLP inspection mode.
     * 
     */
    @Import(name="bodyScanning")
    private @Nullable Output<TeamsAccountSettingsBodyScanningArgs> bodyScanning;

    /**
     * @return Specify the DLP inspection mode.
     * 
     */
    public Optional<Output<TeamsAccountSettingsBodyScanningArgs>> bodyScanning() {
        return Optional.ofNullable(this.bodyScanning);
    }

    /**
     * Specify Clientless Browser Isolation settings.
     * 
     */
    @Import(name="browserIsolation")
    private @Nullable Output<TeamsAccountSettingsBrowserIsolationArgs> browserIsolation;

    /**
     * @return Specify Clientless Browser Isolation settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsBrowserIsolationArgs>> browserIsolation() {
        return Optional.ofNullable(this.browserIsolation);
    }

    /**
     * Specify certificate settings for Gateway TLS interception. If unset, the Cloudflare Root CA handles interception.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<TeamsAccountSettingsCertificateArgs> certificate;

    /**
     * @return Specify certificate settings for Gateway TLS interception. If unset, the Cloudflare Root CA handles interception.
     * 
     */
    public Optional<Output<TeamsAccountSettingsCertificateArgs>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Specify custom certificate settings for BYO-PKI. This field is deprecated; use `certificate` instead.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    @Import(name="customCertificate")
    private @Nullable Output<TeamsAccountSettingsCustomCertificateArgs> customCertificate;

    /**
     * @return Specify custom certificate settings for BYO-PKI. This field is deprecated; use `certificate` instead.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    public Optional<Output<TeamsAccountSettingsCustomCertificateArgs>> customCertificate() {
        return Optional.ofNullable(this.customCertificate);
    }

    /**
     * Specify user email settings for the firewall policies. When this is enabled, we standardize the email addresses in the identity part of the rule, so that they match the extended email variants in the firewall policies. When this setting is turned off, the email addresses in the identity part of the rule will be matched exactly as provided. If your email has `.` or `+` modifiers, you should enable this setting.
     * 
     */
    @Import(name="extendedEmailMatching")
    private @Nullable Output<TeamsAccountSettingsExtendedEmailMatchingArgs> extendedEmailMatching;

    /**
     * @return Specify user email settings for the firewall policies. When this is enabled, we standardize the email addresses in the identity part of the rule, so that they match the extended email variants in the firewall policies. When this setting is turned off, the email addresses in the identity part of the rule will be matched exactly as provided. If your email has `.` or `+` modifiers, you should enable this setting.
     * 
     */
    public Optional<Output<TeamsAccountSettingsExtendedEmailMatchingArgs>> extendedEmailMatching() {
        return Optional.ofNullable(this.extendedEmailMatching);
    }

    /**
     * Specify FIPS settings.
     * 
     */
    @Import(name="fips")
    private @Nullable Output<TeamsAccountSettingsFipsArgs> fips;

    /**
     * @return Specify FIPS settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsFipsArgs>> fips() {
        return Optional.ofNullable(this.fips);
    }

    /**
     * Enable host selection in egress policies.
     * 
     */
    @Import(name="hostSelector")
    private @Nullable Output<TeamsAccountSettingsHostSelectorArgs> hostSelector;

    /**
     * @return Enable host selection in egress policies.
     * 
     */
    public Optional<Output<TeamsAccountSettingsHostSelectorArgs>> hostSelector() {
        return Optional.ofNullable(this.hostSelector);
    }

    /**
     * Define the proxy inspection mode.
     * 
     */
    @Import(name="inspection")
    private @Nullable Output<TeamsAccountSettingsInspectionArgs> inspection;

    /**
     * @return Define the proxy inspection mode.
     * 
     */
    public Optional<Output<TeamsAccountSettingsInspectionArgs>> inspection() {
        return Optional.ofNullable(this.inspection);
    }

    /**
     * Specify whether to detect protocols from the initial bytes of client traffic.
     * 
     */
    @Import(name="protocolDetection")
    private @Nullable Output<TeamsAccountSettingsProtocolDetectionArgs> protocolDetection;

    /**
     * @return Specify whether to detect protocols from the initial bytes of client traffic.
     * 
     */
    public Optional<Output<TeamsAccountSettingsProtocolDetectionArgs>> protocolDetection() {
        return Optional.ofNullable(this.protocolDetection);
    }

    /**
     * Specify whether to enable the sandbox.
     * 
     */
    @Import(name="sandbox")
    private @Nullable Output<TeamsAccountSettingsSandboxArgs> sandbox;

    /**
     * @return Specify whether to enable the sandbox.
     * 
     */
    public Optional<Output<TeamsAccountSettingsSandboxArgs>> sandbox() {
        return Optional.ofNullable(this.sandbox);
    }

    /**
     * Specify whether to inspect encrypted HTTP traffic.
     * 
     */
    @Import(name="tlsDecrypt")
    private @Nullable Output<TeamsAccountSettingsTlsDecryptArgs> tlsDecrypt;

    /**
     * @return Specify whether to inspect encrypted HTTP traffic.
     * 
     */
    public Optional<Output<TeamsAccountSettingsTlsDecryptArgs>> tlsDecrypt() {
        return Optional.ofNullable(this.tlsDecrypt);
    }

    private TeamsAccountSettingsArgs() {}

    private TeamsAccountSettingsArgs(TeamsAccountSettingsArgs $) {
        this.activityLog = $.activityLog;
        this.antivirus = $.antivirus;
        this.blockPage = $.blockPage;
        this.bodyScanning = $.bodyScanning;
        this.browserIsolation = $.browserIsolation;
        this.certificate = $.certificate;
        this.customCertificate = $.customCertificate;
        this.extendedEmailMatching = $.extendedEmailMatching;
        this.fips = $.fips;
        this.hostSelector = $.hostSelector;
        this.inspection = $.inspection;
        this.protocolDetection = $.protocolDetection;
        this.sandbox = $.sandbox;
        this.tlsDecrypt = $.tlsDecrypt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamsAccountSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamsAccountSettingsArgs $;

        public Builder() {
            $ = new TeamsAccountSettingsArgs();
        }

        public Builder(TeamsAccountSettingsArgs defaults) {
            $ = new TeamsAccountSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activityLog Specify activity log settings.
         * 
         * @return builder
         * 
         */
        public Builder activityLog(@Nullable Output<TeamsAccountSettingsActivityLogArgs> activityLog) {
            $.activityLog = activityLog;
            return this;
        }

        /**
         * @param activityLog Specify activity log settings.
         * 
         * @return builder
         * 
         */
        public Builder activityLog(TeamsAccountSettingsActivityLogArgs activityLog) {
            return activityLog(Output.of(activityLog));
        }

        /**
         * @param antivirus Specify anti-virus settings.
         * 
         * @return builder
         * 
         */
        public Builder antivirus(@Nullable Output<TeamsAccountSettingsAntivirusArgs> antivirus) {
            $.antivirus = antivirus;
            return this;
        }

        /**
         * @param antivirus Specify anti-virus settings.
         * 
         * @return builder
         * 
         */
        public Builder antivirus(TeamsAccountSettingsAntivirusArgs antivirus) {
            return antivirus(Output.of(antivirus));
        }

        /**
         * @param blockPage Specify block page layout settings.
         * 
         * @return builder
         * 
         */
        public Builder blockPage(@Nullable Output<TeamsAccountSettingsBlockPageArgs> blockPage) {
            $.blockPage = blockPage;
            return this;
        }

        /**
         * @param blockPage Specify block page layout settings.
         * 
         * @return builder
         * 
         */
        public Builder blockPage(TeamsAccountSettingsBlockPageArgs blockPage) {
            return blockPage(Output.of(blockPage));
        }

        /**
         * @param bodyScanning Specify the DLP inspection mode.
         * 
         * @return builder
         * 
         */
        public Builder bodyScanning(@Nullable Output<TeamsAccountSettingsBodyScanningArgs> bodyScanning) {
            $.bodyScanning = bodyScanning;
            return this;
        }

        /**
         * @param bodyScanning Specify the DLP inspection mode.
         * 
         * @return builder
         * 
         */
        public Builder bodyScanning(TeamsAccountSettingsBodyScanningArgs bodyScanning) {
            return bodyScanning(Output.of(bodyScanning));
        }

        /**
         * @param browserIsolation Specify Clientless Browser Isolation settings.
         * 
         * @return builder
         * 
         */
        public Builder browserIsolation(@Nullable Output<TeamsAccountSettingsBrowserIsolationArgs> browserIsolation) {
            $.browserIsolation = browserIsolation;
            return this;
        }

        /**
         * @param browserIsolation Specify Clientless Browser Isolation settings.
         * 
         * @return builder
         * 
         */
        public Builder browserIsolation(TeamsAccountSettingsBrowserIsolationArgs browserIsolation) {
            return browserIsolation(Output.of(browserIsolation));
        }

        /**
         * @param certificate Specify certificate settings for Gateway TLS interception. If unset, the Cloudflare Root CA handles interception.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<TeamsAccountSettingsCertificateArgs> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Specify certificate settings for Gateway TLS interception. If unset, the Cloudflare Root CA handles interception.
         * 
         * @return builder
         * 
         */
        public Builder certificate(TeamsAccountSettingsCertificateArgs certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param customCertificate Specify custom certificate settings for BYO-PKI. This field is deprecated; use `certificate` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * This attribute is deprecated.
         * 
         */
        @Deprecated /* This attribute is deprecated. */
        public Builder customCertificate(@Nullable Output<TeamsAccountSettingsCustomCertificateArgs> customCertificate) {
            $.customCertificate = customCertificate;
            return this;
        }

        /**
         * @param customCertificate Specify custom certificate settings for BYO-PKI. This field is deprecated; use `certificate` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * This attribute is deprecated.
         * 
         */
        @Deprecated /* This attribute is deprecated. */
        public Builder customCertificate(TeamsAccountSettingsCustomCertificateArgs customCertificate) {
            return customCertificate(Output.of(customCertificate));
        }

        /**
         * @param extendedEmailMatching Specify user email settings for the firewall policies. When this is enabled, we standardize the email addresses in the identity part of the rule, so that they match the extended email variants in the firewall policies. When this setting is turned off, the email addresses in the identity part of the rule will be matched exactly as provided. If your email has `.` or `+` modifiers, you should enable this setting.
         * 
         * @return builder
         * 
         */
        public Builder extendedEmailMatching(@Nullable Output<TeamsAccountSettingsExtendedEmailMatchingArgs> extendedEmailMatching) {
            $.extendedEmailMatching = extendedEmailMatching;
            return this;
        }

        /**
         * @param extendedEmailMatching Specify user email settings for the firewall policies. When this is enabled, we standardize the email addresses in the identity part of the rule, so that they match the extended email variants in the firewall policies. When this setting is turned off, the email addresses in the identity part of the rule will be matched exactly as provided. If your email has `.` or `+` modifiers, you should enable this setting.
         * 
         * @return builder
         * 
         */
        public Builder extendedEmailMatching(TeamsAccountSettingsExtendedEmailMatchingArgs extendedEmailMatching) {
            return extendedEmailMatching(Output.of(extendedEmailMatching));
        }

        /**
         * @param fips Specify FIPS settings.
         * 
         * @return builder
         * 
         */
        public Builder fips(@Nullable Output<TeamsAccountSettingsFipsArgs> fips) {
            $.fips = fips;
            return this;
        }

        /**
         * @param fips Specify FIPS settings.
         * 
         * @return builder
         * 
         */
        public Builder fips(TeamsAccountSettingsFipsArgs fips) {
            return fips(Output.of(fips));
        }

        /**
         * @param hostSelector Enable host selection in egress policies.
         * 
         * @return builder
         * 
         */
        public Builder hostSelector(@Nullable Output<TeamsAccountSettingsHostSelectorArgs> hostSelector) {
            $.hostSelector = hostSelector;
            return this;
        }

        /**
         * @param hostSelector Enable host selection in egress policies.
         * 
         * @return builder
         * 
         */
        public Builder hostSelector(TeamsAccountSettingsHostSelectorArgs hostSelector) {
            return hostSelector(Output.of(hostSelector));
        }

        /**
         * @param inspection Define the proxy inspection mode.
         * 
         * @return builder
         * 
         */
        public Builder inspection(@Nullable Output<TeamsAccountSettingsInspectionArgs> inspection) {
            $.inspection = inspection;
            return this;
        }

        /**
         * @param inspection Define the proxy inspection mode.
         * 
         * @return builder
         * 
         */
        public Builder inspection(TeamsAccountSettingsInspectionArgs inspection) {
            return inspection(Output.of(inspection));
        }

        /**
         * @param protocolDetection Specify whether to detect protocols from the initial bytes of client traffic.
         * 
         * @return builder
         * 
         */
        public Builder protocolDetection(@Nullable Output<TeamsAccountSettingsProtocolDetectionArgs> protocolDetection) {
            $.protocolDetection = protocolDetection;
            return this;
        }

        /**
         * @param protocolDetection Specify whether to detect protocols from the initial bytes of client traffic.
         * 
         * @return builder
         * 
         */
        public Builder protocolDetection(TeamsAccountSettingsProtocolDetectionArgs protocolDetection) {
            return protocolDetection(Output.of(protocolDetection));
        }

        /**
         * @param sandbox Specify whether to enable the sandbox.
         * 
         * @return builder
         * 
         */
        public Builder sandbox(@Nullable Output<TeamsAccountSettingsSandboxArgs> sandbox) {
            $.sandbox = sandbox;
            return this;
        }

        /**
         * @param sandbox Specify whether to enable the sandbox.
         * 
         * @return builder
         * 
         */
        public Builder sandbox(TeamsAccountSettingsSandboxArgs sandbox) {
            return sandbox(Output.of(sandbox));
        }

        /**
         * @param tlsDecrypt Specify whether to inspect encrypted HTTP traffic.
         * 
         * @return builder
         * 
         */
        public Builder tlsDecrypt(@Nullable Output<TeamsAccountSettingsTlsDecryptArgs> tlsDecrypt) {
            $.tlsDecrypt = tlsDecrypt;
            return this;
        }

        /**
         * @param tlsDecrypt Specify whether to inspect encrypted HTTP traffic.
         * 
         * @return builder
         * 
         */
        public Builder tlsDecrypt(TeamsAccountSettingsTlsDecryptArgs tlsDecrypt) {
            return tlsDecrypt(Output.of(tlsDecrypt));
        }

        public TeamsAccountSettingsArgs build() {
            return $;
        }
    }

}
