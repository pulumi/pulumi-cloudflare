// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.TeamsAccountSettingsActivityLogArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsAntivirusArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsBlockPageArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsBodyScanningArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsBrowserIsolationArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsCertificateArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsCustomCertificateArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsExtendedEmailMatchingArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsFipsArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsHostSelectorArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsInspectionArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsProtocolDetectionArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsSandboxArgs;
import com.pulumi.cloudflare.inputs.TeamsAccountSettingsTlsDecryptArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamsAccountSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamsAccountSettingsArgs Empty = new TeamsAccountSettingsArgs();

    /**
     * Activity log settings.
     * 
     */
    @Import(name="activityLog")
    private @Nullable Output<TeamsAccountSettingsActivityLogArgs> activityLog;

    /**
     * @return Activity log settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsActivityLogArgs>> activityLog() {
        return Optional.ofNullable(this.activityLog);
    }

    /**
     * Anti-virus settings.
     * 
     */
    @Import(name="antivirus")
    private @Nullable Output<TeamsAccountSettingsAntivirusArgs> antivirus;

    /**
     * @return Anti-virus settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsAntivirusArgs>> antivirus() {
        return Optional.ofNullable(this.antivirus);
    }

    /**
     * Block page layout settings.
     * 
     */
    @Import(name="blockPage")
    private @Nullable Output<TeamsAccountSettingsBlockPageArgs> blockPage;

    /**
     * @return Block page layout settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsBlockPageArgs>> blockPage() {
        return Optional.ofNullable(this.blockPage);
    }

    /**
     * DLP body scanning settings.
     * 
     */
    @Import(name="bodyScanning")
    private @Nullable Output<TeamsAccountSettingsBodyScanningArgs> bodyScanning;

    /**
     * @return DLP body scanning settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsBodyScanningArgs>> bodyScanning() {
        return Optional.ofNullable(this.bodyScanning);
    }

    /**
     * Browser isolation settings.
     * 
     */
    @Import(name="browserIsolation")
    private @Nullable Output<TeamsAccountSettingsBrowserIsolationArgs> browserIsolation;

    /**
     * @return Browser isolation settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsBrowserIsolationArgs>> browserIsolation() {
        return Optional.ofNullable(this.browserIsolation);
    }

    /**
     * Certificate settings for Gateway TLS interception. If not specified, the Cloudflare Root CA will be used.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<TeamsAccountSettingsCertificateArgs> certificate;

    /**
     * @return Certificate settings for Gateway TLS interception. If not specified, the Cloudflare Root CA will be used.
     * 
     */
    public Optional<Output<TeamsAccountSettingsCertificateArgs>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Custom certificate settings for BYO-PKI. (deprecated and replaced by `certificate`)
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    @Import(name="customCertificate")
    private @Nullable Output<TeamsAccountSettingsCustomCertificateArgs> customCertificate;

    /**
     * @return Custom certificate settings for BYO-PKI. (deprecated and replaced by `certificate`)
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    public Optional<Output<TeamsAccountSettingsCustomCertificateArgs>> customCertificate() {
        return Optional.ofNullable(this.customCertificate);
    }

    /**
     * Extended e-mail matching settings.
     * 
     */
    @Import(name="extendedEmailMatching")
    private @Nullable Output<TeamsAccountSettingsExtendedEmailMatchingArgs> extendedEmailMatching;

    /**
     * @return Extended e-mail matching settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsExtendedEmailMatchingArgs>> extendedEmailMatching() {
        return Optional.ofNullable(this.extendedEmailMatching);
    }

    /**
     * FIPS settings.
     * 
     */
    @Import(name="fips")
    private @Nullable Output<TeamsAccountSettingsFipsArgs> fips;

    /**
     * @return FIPS settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsFipsArgs>> fips() {
        return Optional.ofNullable(this.fips);
    }

    /**
     * Setting to enable host selector in egress policies.
     * 
     */
    @Import(name="hostSelector")
    private @Nullable Output<TeamsAccountSettingsHostSelectorArgs> hostSelector;

    /**
     * @return Setting to enable host selector in egress policies.
     * 
     */
    public Optional<Output<TeamsAccountSettingsHostSelectorArgs>> hostSelector() {
        return Optional.ofNullable(this.hostSelector);
    }

    /**
     * Setting to define inspection settings
     * 
     */
    @Import(name="inspection")
    private @Nullable Output<TeamsAccountSettingsInspectionArgs> inspection;

    /**
     * @return Setting to define inspection settings
     * 
     */
    public Optional<Output<TeamsAccountSettingsInspectionArgs>> inspection() {
        return Optional.ofNullable(this.inspection);
    }

    /**
     * Protocol Detection settings.
     * 
     */
    @Import(name="protocolDetection")
    private @Nullable Output<TeamsAccountSettingsProtocolDetectionArgs> protocolDetection;

    /**
     * @return Protocol Detection settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsProtocolDetectionArgs>> protocolDetection() {
        return Optional.ofNullable(this.protocolDetection);
    }

    /**
     * Sandbox settings.
     * 
     */
    @Import(name="sandbox")
    private @Nullable Output<TeamsAccountSettingsSandboxArgs> sandbox;

    /**
     * @return Sandbox settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsSandboxArgs>> sandbox() {
        return Optional.ofNullable(this.sandbox);
    }

    /**
     * TLS interception settings.
     * 
     */
    @Import(name="tlsDecrypt")
    private @Nullable Output<TeamsAccountSettingsTlsDecryptArgs> tlsDecrypt;

    /**
     * @return TLS interception settings.
     * 
     */
    public Optional<Output<TeamsAccountSettingsTlsDecryptArgs>> tlsDecrypt() {
        return Optional.ofNullable(this.tlsDecrypt);
    }

    private TeamsAccountSettingsArgs() {}

    private TeamsAccountSettingsArgs(TeamsAccountSettingsArgs $) {
        this.activityLog = $.activityLog;
        this.antivirus = $.antivirus;
        this.blockPage = $.blockPage;
        this.bodyScanning = $.bodyScanning;
        this.browserIsolation = $.browserIsolation;
        this.certificate = $.certificate;
        this.customCertificate = $.customCertificate;
        this.extendedEmailMatching = $.extendedEmailMatching;
        this.fips = $.fips;
        this.hostSelector = $.hostSelector;
        this.inspection = $.inspection;
        this.protocolDetection = $.protocolDetection;
        this.sandbox = $.sandbox;
        this.tlsDecrypt = $.tlsDecrypt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamsAccountSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamsAccountSettingsArgs $;

        public Builder() {
            $ = new TeamsAccountSettingsArgs();
        }

        public Builder(TeamsAccountSettingsArgs defaults) {
            $ = new TeamsAccountSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activityLog Activity log settings.
         * 
         * @return builder
         * 
         */
        public Builder activityLog(@Nullable Output<TeamsAccountSettingsActivityLogArgs> activityLog) {
            $.activityLog = activityLog;
            return this;
        }

        /**
         * @param activityLog Activity log settings.
         * 
         * @return builder
         * 
         */
        public Builder activityLog(TeamsAccountSettingsActivityLogArgs activityLog) {
            return activityLog(Output.of(activityLog));
        }

        /**
         * @param antivirus Anti-virus settings.
         * 
         * @return builder
         * 
         */
        public Builder antivirus(@Nullable Output<TeamsAccountSettingsAntivirusArgs> antivirus) {
            $.antivirus = antivirus;
            return this;
        }

        /**
         * @param antivirus Anti-virus settings.
         * 
         * @return builder
         * 
         */
        public Builder antivirus(TeamsAccountSettingsAntivirusArgs antivirus) {
            return antivirus(Output.of(antivirus));
        }

        /**
         * @param blockPage Block page layout settings.
         * 
         * @return builder
         * 
         */
        public Builder blockPage(@Nullable Output<TeamsAccountSettingsBlockPageArgs> blockPage) {
            $.blockPage = blockPage;
            return this;
        }

        /**
         * @param blockPage Block page layout settings.
         * 
         * @return builder
         * 
         */
        public Builder blockPage(TeamsAccountSettingsBlockPageArgs blockPage) {
            return blockPage(Output.of(blockPage));
        }

        /**
         * @param bodyScanning DLP body scanning settings.
         * 
         * @return builder
         * 
         */
        public Builder bodyScanning(@Nullable Output<TeamsAccountSettingsBodyScanningArgs> bodyScanning) {
            $.bodyScanning = bodyScanning;
            return this;
        }

        /**
         * @param bodyScanning DLP body scanning settings.
         * 
         * @return builder
         * 
         */
        public Builder bodyScanning(TeamsAccountSettingsBodyScanningArgs bodyScanning) {
            return bodyScanning(Output.of(bodyScanning));
        }

        /**
         * @param browserIsolation Browser isolation settings.
         * 
         * @return builder
         * 
         */
        public Builder browserIsolation(@Nullable Output<TeamsAccountSettingsBrowserIsolationArgs> browserIsolation) {
            $.browserIsolation = browserIsolation;
            return this;
        }

        /**
         * @param browserIsolation Browser isolation settings.
         * 
         * @return builder
         * 
         */
        public Builder browserIsolation(TeamsAccountSettingsBrowserIsolationArgs browserIsolation) {
            return browserIsolation(Output.of(browserIsolation));
        }

        /**
         * @param certificate Certificate settings for Gateway TLS interception. If not specified, the Cloudflare Root CA will be used.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<TeamsAccountSettingsCertificateArgs> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate settings for Gateway TLS interception. If not specified, the Cloudflare Root CA will be used.
         * 
         * @return builder
         * 
         */
        public Builder certificate(TeamsAccountSettingsCertificateArgs certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param customCertificate Custom certificate settings for BYO-PKI. (deprecated and replaced by `certificate`)
         * 
         * @return builder
         * 
         * @deprecated
         * This attribute is deprecated.
         * 
         */
        @Deprecated /* This attribute is deprecated. */
        public Builder customCertificate(@Nullable Output<TeamsAccountSettingsCustomCertificateArgs> customCertificate) {
            $.customCertificate = customCertificate;
            return this;
        }

        /**
         * @param customCertificate Custom certificate settings for BYO-PKI. (deprecated and replaced by `certificate`)
         * 
         * @return builder
         * 
         * @deprecated
         * This attribute is deprecated.
         * 
         */
        @Deprecated /* This attribute is deprecated. */
        public Builder customCertificate(TeamsAccountSettingsCustomCertificateArgs customCertificate) {
            return customCertificate(Output.of(customCertificate));
        }

        /**
         * @param extendedEmailMatching Extended e-mail matching settings.
         * 
         * @return builder
         * 
         */
        public Builder extendedEmailMatching(@Nullable Output<TeamsAccountSettingsExtendedEmailMatchingArgs> extendedEmailMatching) {
            $.extendedEmailMatching = extendedEmailMatching;
            return this;
        }

        /**
         * @param extendedEmailMatching Extended e-mail matching settings.
         * 
         * @return builder
         * 
         */
        public Builder extendedEmailMatching(TeamsAccountSettingsExtendedEmailMatchingArgs extendedEmailMatching) {
            return extendedEmailMatching(Output.of(extendedEmailMatching));
        }

        /**
         * @param fips FIPS settings.
         * 
         * @return builder
         * 
         */
        public Builder fips(@Nullable Output<TeamsAccountSettingsFipsArgs> fips) {
            $.fips = fips;
            return this;
        }

        /**
         * @param fips FIPS settings.
         * 
         * @return builder
         * 
         */
        public Builder fips(TeamsAccountSettingsFipsArgs fips) {
            return fips(Output.of(fips));
        }

        /**
         * @param hostSelector Setting to enable host selector in egress policies.
         * 
         * @return builder
         * 
         */
        public Builder hostSelector(@Nullable Output<TeamsAccountSettingsHostSelectorArgs> hostSelector) {
            $.hostSelector = hostSelector;
            return this;
        }

        /**
         * @param hostSelector Setting to enable host selector in egress policies.
         * 
         * @return builder
         * 
         */
        public Builder hostSelector(TeamsAccountSettingsHostSelectorArgs hostSelector) {
            return hostSelector(Output.of(hostSelector));
        }

        /**
         * @param inspection Setting to define inspection settings
         * 
         * @return builder
         * 
         */
        public Builder inspection(@Nullable Output<TeamsAccountSettingsInspectionArgs> inspection) {
            $.inspection = inspection;
            return this;
        }

        /**
         * @param inspection Setting to define inspection settings
         * 
         * @return builder
         * 
         */
        public Builder inspection(TeamsAccountSettingsInspectionArgs inspection) {
            return inspection(Output.of(inspection));
        }

        /**
         * @param protocolDetection Protocol Detection settings.
         * 
         * @return builder
         * 
         */
        public Builder protocolDetection(@Nullable Output<TeamsAccountSettingsProtocolDetectionArgs> protocolDetection) {
            $.protocolDetection = protocolDetection;
            return this;
        }

        /**
         * @param protocolDetection Protocol Detection settings.
         * 
         * @return builder
         * 
         */
        public Builder protocolDetection(TeamsAccountSettingsProtocolDetectionArgs protocolDetection) {
            return protocolDetection(Output.of(protocolDetection));
        }

        /**
         * @param sandbox Sandbox settings.
         * 
         * @return builder
         * 
         */
        public Builder sandbox(@Nullable Output<TeamsAccountSettingsSandboxArgs> sandbox) {
            $.sandbox = sandbox;
            return this;
        }

        /**
         * @param sandbox Sandbox settings.
         * 
         * @return builder
         * 
         */
        public Builder sandbox(TeamsAccountSettingsSandboxArgs sandbox) {
            return sandbox(Output.of(sandbox));
        }

        /**
         * @param tlsDecrypt TLS interception settings.
         * 
         * @return builder
         * 
         */
        public Builder tlsDecrypt(@Nullable Output<TeamsAccountSettingsTlsDecryptArgs> tlsDecrypt) {
            $.tlsDecrypt = tlsDecrypt;
            return this;
        }

        /**
         * @param tlsDecrypt TLS interception settings.
         * 
         * @return builder
         * 
         */
        public Builder tlsDecrypt(TeamsAccountSettingsTlsDecryptArgs tlsDecrypt) {
            return tlsDecrypt(Output.of(tlsDecrypt));
        }

        public TeamsAccountSettingsArgs build() {
            return $;
        }
    }

}
