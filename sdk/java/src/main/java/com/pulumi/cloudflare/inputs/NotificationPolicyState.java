// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.NotificationPolicyFiltersArgs;
import com.pulumi.cloudflare.inputs.NotificationPolicyMechanismsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final NotificationPolicyState Empty = new NotificationPolicyState();

    /**
     * The account id
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account id
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Optional specification of how often to re-alert from the same incident, not support on all alert types.
     * 
     */
    @Import(name="alertInterval")
    private @Nullable Output<String> alertInterval;

    /**
     * @return Optional specification of how often to re-alert from the same incident, not support on all alert types.
     * 
     */
    public Optional<Output<String>> alertInterval() {
        return Optional.ofNullable(this.alertInterval);
    }

    /**
     * Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
     * 
     */
    @Import(name="alertType")
    private @Nullable Output<String> alertType;

    /**
     * @return Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
     * 
     */
    public Optional<Output<String>> alertType() {
        return Optional.ofNullable(this.alertType);
    }

    @Import(name="created")
    private @Nullable Output<String> created;

    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Optional description for the Notification policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional description for the Notification policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether or not the Notification policy is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether or not the Notification policy is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<NotificationPolicyFiltersArgs> filters;

    /**
     * @return Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
     * 
     */
    public Optional<Output<NotificationPolicyFiltersArgs>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
     * 
     */
    @Import(name="mechanisms")
    private @Nullable Output<NotificationPolicyMechanismsArgs> mechanisms;

    /**
     * @return List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
     * 
     */
    public Optional<Output<NotificationPolicyMechanismsArgs>> mechanisms() {
        return Optional.ofNullable(this.mechanisms);
    }

    @Import(name="modified")
    private @Nullable Output<String> modified;

    public Optional<Output<String>> modified() {
        return Optional.ofNullable(this.modified);
    }

    /**
     * Name of the policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private NotificationPolicyState() {}

    private NotificationPolicyState(NotificationPolicyState $) {
        this.accountId = $.accountId;
        this.alertInterval = $.alertInterval;
        this.alertType = $.alertType;
        this.created = $.created;
        this.description = $.description;
        this.enabled = $.enabled;
        this.filters = $.filters;
        this.mechanisms = $.mechanisms;
        this.modified = $.modified;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationPolicyState $;

        public Builder() {
            $ = new NotificationPolicyState();
        }

        public Builder(NotificationPolicyState defaults) {
            $ = new NotificationPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account id
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account id
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param alertInterval Optional specification of how often to re-alert from the same incident, not support on all alert types.
         * 
         * @return builder
         * 
         */
        public Builder alertInterval(@Nullable Output<String> alertInterval) {
            $.alertInterval = alertInterval;
            return this;
        }

        /**
         * @param alertInterval Optional specification of how often to re-alert from the same incident, not support on all alert types.
         * 
         * @return builder
         * 
         */
        public Builder alertInterval(String alertInterval) {
            return alertInterval(Output.of(alertInterval));
        }

        /**
         * @param alertType Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
         * 
         * @return builder
         * 
         */
        public Builder alertType(@Nullable Output<String> alertType) {
            $.alertType = alertType;
            return this;
        }

        /**
         * @param alertType Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
         * 
         * @return builder
         * 
         */
        public Builder alertType(String alertType) {
            return alertType(Output.of(alertType));
        }

        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param description Optional description for the Notification policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional description for the Notification policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether or not the Notification policy is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether or not the Notification policy is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param filters Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<NotificationPolicyFiltersArgs> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
         * 
         * @return builder
         * 
         */
        public Builder filters(NotificationPolicyFiltersArgs filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param mechanisms List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
         * 
         * @return builder
         * 
         */
        public Builder mechanisms(@Nullable Output<NotificationPolicyMechanismsArgs> mechanisms) {
            $.mechanisms = mechanisms;
            return this;
        }

        /**
         * @param mechanisms List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
         * 
         * @return builder
         * 
         */
        public Builder mechanisms(NotificationPolicyMechanismsArgs mechanisms) {
            return mechanisms(Output.of(mechanisms));
        }

        public Builder modified(@Nullable Output<String> modified) {
            $.modified = modified;
            return this;
        }

        public Builder modified(String modified) {
            return modified(Output.of(modified));
        }

        /**
         * @param name Name of the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public NotificationPolicyState build() {
            return $;
        }
    }

}
