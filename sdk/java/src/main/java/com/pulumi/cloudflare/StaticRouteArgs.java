// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StaticRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final StaticRouteArgs Empty = new StaticRouteArgs();

    /**
     * The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * List of Cloudflare colocation regions for this static route.
     * 
     */
    @Import(name="coloNames")
    private @Nullable Output<List<String>> coloNames;

    /**
     * @return List of Cloudflare colocation regions for this static route.
     * 
     */
    public Optional<Output<List<String>>> coloNames() {
        return Optional.ofNullable(this.coloNames);
    }

    /**
     * List of Cloudflare colocation names for this static route.
     * 
     */
    @Import(name="coloRegions")
    private @Nullable Output<List<String>> coloRegions;

    /**
     * @return List of Cloudflare colocation names for this static route.
     * 
     */
    public Optional<Output<List<String>>> coloRegions() {
        return Optional.ofNullable(this.coloRegions);
    }

    /**
     * Description of the static route.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the static route.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The nexthop IP address where traffic will be routed to.
     * 
     */
    @Import(name="nexthop", required=true)
    private Output<String> nexthop;

    /**
     * @return The nexthop IP address where traffic will be routed to.
     * 
     */
    public Output<String> nexthop() {
        return this.nexthop;
    }

    /**
     * Your network prefix using CIDR notation.
     * 
     */
    @Import(name="prefix", required=true)
    private Output<String> prefix;

    /**
     * @return Your network prefix using CIDR notation.
     * 
     */
    public Output<String> prefix() {
        return this.prefix;
    }

    /**
     * The priority for the static route.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return The priority for the static route.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * The optional weight for ECMP routes. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return The optional weight for ECMP routes. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private StaticRouteArgs() {}

    private StaticRouteArgs(StaticRouteArgs $) {
        this.accountId = $.accountId;
        this.coloNames = $.coloNames;
        this.coloRegions = $.coloRegions;
        this.description = $.description;
        this.nexthop = $.nexthop;
        this.prefix = $.prefix;
        this.priority = $.priority;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StaticRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StaticRouteArgs $;

        public Builder() {
            $ = new StaticRouteArgs();
        }

        public Builder(StaticRouteArgs defaults) {
            $ = new StaticRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param coloNames List of Cloudflare colocation regions for this static route.
         * 
         * @return builder
         * 
         */
        public Builder coloNames(@Nullable Output<List<String>> coloNames) {
            $.coloNames = coloNames;
            return this;
        }

        /**
         * @param coloNames List of Cloudflare colocation regions for this static route.
         * 
         * @return builder
         * 
         */
        public Builder coloNames(List<String> coloNames) {
            return coloNames(Output.of(coloNames));
        }

        /**
         * @param coloNames List of Cloudflare colocation regions for this static route.
         * 
         * @return builder
         * 
         */
        public Builder coloNames(String... coloNames) {
            return coloNames(List.of(coloNames));
        }

        /**
         * @param coloRegions List of Cloudflare colocation names for this static route.
         * 
         * @return builder
         * 
         */
        public Builder coloRegions(@Nullable Output<List<String>> coloRegions) {
            $.coloRegions = coloRegions;
            return this;
        }

        /**
         * @param coloRegions List of Cloudflare colocation names for this static route.
         * 
         * @return builder
         * 
         */
        public Builder coloRegions(List<String> coloRegions) {
            return coloRegions(Output.of(coloRegions));
        }

        /**
         * @param coloRegions List of Cloudflare colocation names for this static route.
         * 
         * @return builder
         * 
         */
        public Builder coloRegions(String... coloRegions) {
            return coloRegions(List.of(coloRegions));
        }

        /**
         * @param description Description of the static route.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the static route.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param nexthop The nexthop IP address where traffic will be routed to.
         * 
         * @return builder
         * 
         */
        public Builder nexthop(Output<String> nexthop) {
            $.nexthop = nexthop;
            return this;
        }

        /**
         * @param nexthop The nexthop IP address where traffic will be routed to.
         * 
         * @return builder
         * 
         */
        public Builder nexthop(String nexthop) {
            return nexthop(Output.of(nexthop));
        }

        /**
         * @param prefix Your network prefix using CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder prefix(Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Your network prefix using CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param priority The priority for the static route.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority for the static route.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param weight The optional weight for ECMP routes. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight The optional weight for ECMP routes. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public StaticRouteArgs build() {
            if ($.nexthop == null) {
                throw new MissingRequiredPropertyException("StaticRouteArgs", "nexthop");
            }
            if ($.prefix == null) {
                throw new MissingRequiredPropertyException("StaticRouteArgs", "prefix");
            }
            if ($.priority == null) {
                throw new MissingRequiredPropertyException("StaticRouteArgs", "priority");
            }
            return $;
        }
    }

}
