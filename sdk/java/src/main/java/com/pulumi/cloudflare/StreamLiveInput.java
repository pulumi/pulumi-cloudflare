// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.StreamLiveInputArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.StreamLiveInputState;
import com.pulumi.cloudflare.outputs.StreamLiveInputRecording;
import com.pulumi.cloudflare.outputs.StreamLiveInputRtmps;
import com.pulumi.cloudflare.outputs.StreamLiveInputRtmpsPlayback;
import com.pulumi.cloudflare.outputs.StreamLiveInputSrt;
import com.pulumi.cloudflare.outputs.StreamLiveInputSrtPlayback;
import com.pulumi.cloudflare.outputs.StreamLiveInputWebRtc;
import com.pulumi.cloudflare.outputs.StreamLiveInputWebRtcPlayback;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="cloudflare:index/streamLiveInput:StreamLiveInput")
public class StreamLiveInput extends com.pulumi.resources.CustomResource {
    /**
     * Identifier.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * The date and time the live input was created.
     * 
     */
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    /**
     * @return The date and time the live input was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * Sets the creator ID asssociated with this live input.
     * 
     */
    @Export(name="defaultCreator", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultCreator;

    /**
     * @return Sets the creator ID asssociated with this live input.
     * 
     */
    public Output<Optional<String>> defaultCreator() {
        return Codegen.optional(this.defaultCreator);
    }
    /**
     * Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     * 
     */
    @Export(name="deleteRecordingAfterDays", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> deleteRecordingAfterDays;

    /**
     * @return Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     * 
     */
    public Output<Optional<Double>> deleteRecordingAfterDays() {
        return Codegen.optional(this.deleteRecordingAfterDays);
    }
    /**
     * A unique identifier for a live input.
     * 
     */
    @Export(name="liveInputIdentifier", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> liveInputIdentifier;

    /**
     * @return A unique identifier for a live input.
     * 
     */
    public Output<Optional<String>> liveInputIdentifier() {
        return Codegen.optional(this.liveInputIdentifier);
    }
    /**
     * A user modifiable key-value store used to reference other systems of record for managing live inputs.
     * 
     */
    @Export(name="meta", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> meta;

    /**
     * @return A user modifiable key-value store used to reference other systems of record for managing live inputs.
     * 
     */
    public Output<Optional<String>> meta() {
        return Codegen.optional(this.meta);
    }
    /**
     * The date and time the live input was last modified.
     * 
     */
    @Export(name="modified", refs={String.class}, tree="[0]")
    private Output<String> modified;

    /**
     * @return The date and time the live input was last modified.
     * 
     */
    public Output<String> modified() {
        return this.modified;
    }
    /**
     * Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     * 
     */
    @Export(name="recording", refs={StreamLiveInputRecording.class}, tree="[0]")
    private Output<StreamLiveInputRecording> recording;

    /**
     * @return Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     * 
     */
    public Output<StreamLiveInputRecording> recording() {
        return this.recording;
    }
    /**
     * Details for streaming to an live input using RTMPS.
     * 
     */
    @Export(name="rtmps", refs={StreamLiveInputRtmps.class}, tree="[0]")
    private Output<StreamLiveInputRtmps> rtmps;

    /**
     * @return Details for streaming to an live input using RTMPS.
     * 
     */
    public Output<StreamLiveInputRtmps> rtmps() {
        return this.rtmps;
    }
    /**
     * Details for playback from an live input using RTMPS.
     * 
     */
    @Export(name="rtmpsPlayback", refs={StreamLiveInputRtmpsPlayback.class}, tree="[0]")
    private Output<StreamLiveInputRtmpsPlayback> rtmpsPlayback;

    /**
     * @return Details for playback from an live input using RTMPS.
     * 
     */
    public Output<StreamLiveInputRtmpsPlayback> rtmpsPlayback() {
        return this.rtmpsPlayback;
    }
    /**
     * Details for streaming to a live input using SRT.
     * 
     */
    @Export(name="srt", refs={StreamLiveInputSrt.class}, tree="[0]")
    private Output<StreamLiveInputSrt> srt;

    /**
     * @return Details for streaming to a live input using SRT.
     * 
     */
    public Output<StreamLiveInputSrt> srt() {
        return this.srt;
    }
    /**
     * Details for playback from an live input using SRT.
     * 
     */
    @Export(name="srtPlayback", refs={StreamLiveInputSrtPlayback.class}, tree="[0]")
    private Output<StreamLiveInputSrtPlayback> srtPlayback;

    /**
     * @return Details for playback from an live input using SRT.
     * 
     */
    public Output<StreamLiveInputSrtPlayback> srtPlayback() {
        return this.srtPlayback;
    }
    /**
     * The connection status of a live input.
     * Available values: &#34;connected&#34;, &#34;reconnected&#34;, &#34;reconnecting&#34;, &#34;client*disconnect&#34;, &#34;ttl*exceeded&#34;, &#34;failed*to*connect&#34;, &#34;failed*to*reconnect&#34;, &#34;new*configuration*accepted&#34;.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The connection status of a live input.
     * Available values: &#34;connected&#34;, &#34;reconnected&#34;, &#34;reconnecting&#34;, &#34;client*disconnect&#34;, &#34;ttl*exceeded&#34;, &#34;failed*to*connect&#34;, &#34;failed*to*reconnect&#34;, &#34;new*configuration*accepted&#34;.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * A unique identifier for a live input.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return A unique identifier for a live input.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Details for streaming to a live input using WebRTC.
     * 
     */
    @Export(name="webRtc", refs={StreamLiveInputWebRtc.class}, tree="[0]")
    private Output<StreamLiveInputWebRtc> webRtc;

    /**
     * @return Details for streaming to a live input using WebRTC.
     * 
     */
    public Output<StreamLiveInputWebRtc> webRtc() {
        return this.webRtc;
    }
    /**
     * Details for playback from a live input using WebRTC.
     * 
     */
    @Export(name="webRtcPlayback", refs={StreamLiveInputWebRtcPlayback.class}, tree="[0]")
    private Output<StreamLiveInputWebRtcPlayback> webRtcPlayback;

    /**
     * @return Details for playback from a live input using WebRTC.
     * 
     */
    public Output<StreamLiveInputWebRtcPlayback> webRtcPlayback() {
        return this.webRtcPlayback;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public StreamLiveInput(java.lang.String name) {
        this(name, StreamLiveInputArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public StreamLiveInput(java.lang.String name, StreamLiveInputArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public StreamLiveInput(java.lang.String name, StreamLiveInputArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/streamLiveInput:StreamLiveInput", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private StreamLiveInput(java.lang.String name, Output<java.lang.String> id, @Nullable StreamLiveInputState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/streamLiveInput:StreamLiveInput", name, state, makeResourceOptions(options, id), false);
    }

    private static StreamLiveInputArgs makeArgs(StreamLiveInputArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? StreamLiveInputArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static StreamLiveInput get(java.lang.String name, Output<java.lang.String> id, @Nullable StreamLiveInputState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new StreamLiveInput(name, id, state, options);
    }
}
