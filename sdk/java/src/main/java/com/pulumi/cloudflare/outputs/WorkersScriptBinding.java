// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.WorkersScriptBindingOutbound;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkersScriptBinding {
    /**
     * @return R2 bucket to bind to.
     * 
     */
    private @Nullable String bucketName;
    /**
     * @return Identifier of the certificate to bind to.
     * 
     */
    private @Nullable String certificateId;
    /**
     * @return The exported class name of the Durable Object.
     * 
     */
    private @Nullable String className;
    /**
     * @return The dataset name to bind to.
     * 
     */
    private @Nullable String dataset;
    /**
     * @return The environment of the script_name to bind to.
     * 
     */
    private @Nullable String environment;
    /**
     * @return Identifier of the D1 database to bind to.
     * 
     */
    private @Nullable String id;
    /**
     * @return Name of the Vectorize index to bind to.
     * 
     */
    private @Nullable String indexName;
    /**
     * @return JSON data to use.
     * 
     */
    private @Nullable String json;
    /**
     * @return A JavaScript variable name for the binding.
     * 
     */
    private String name;
    /**
     * @return Namespace to bind to.
     * 
     */
    private @Nullable String namespace;
    /**
     * @return Namespace identifier tag.
     * 
     */
    private @Nullable String namespaceId;
    /**
     * @return Outbound worker.
     * 
     */
    private @Nullable WorkersScriptBindingOutbound outbound;
    /**
     * @return Name of the Queue to bind to.
     * 
     */
    private @Nullable String queueName;
    /**
     * @return The script where the Durable Object is defined, if it is external to this Worker.
     * 
     */
    private @Nullable String scriptName;
    /**
     * @return Name of Worker to bind to.
     * 
     */
    private @Nullable String service;
    /**
     * @return The text value to use.
     * 
     */
    private @Nullable String text;
    /**
     * @return The kind of resource that the binding provides.
     * 
     */
    private String type;

    private WorkersScriptBinding() {}
    /**
     * @return R2 bucket to bind to.
     * 
     */
    public Optional<String> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }
    /**
     * @return Identifier of the certificate to bind to.
     * 
     */
    public Optional<String> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }
    /**
     * @return The exported class name of the Durable Object.
     * 
     */
    public Optional<String> className() {
        return Optional.ofNullable(this.className);
    }
    /**
     * @return The dataset name to bind to.
     * 
     */
    public Optional<String> dataset() {
        return Optional.ofNullable(this.dataset);
    }
    /**
     * @return The environment of the script_name to bind to.
     * 
     */
    public Optional<String> environment() {
        return Optional.ofNullable(this.environment);
    }
    /**
     * @return Identifier of the D1 database to bind to.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Name of the Vectorize index to bind to.
     * 
     */
    public Optional<String> indexName() {
        return Optional.ofNullable(this.indexName);
    }
    /**
     * @return JSON data to use.
     * 
     */
    public Optional<String> json() {
        return Optional.ofNullable(this.json);
    }
    /**
     * @return A JavaScript variable name for the binding.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Namespace to bind to.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Namespace identifier tag.
     * 
     */
    public Optional<String> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }
    /**
     * @return Outbound worker.
     * 
     */
    public Optional<WorkersScriptBindingOutbound> outbound() {
        return Optional.ofNullable(this.outbound);
    }
    /**
     * @return Name of the Queue to bind to.
     * 
     */
    public Optional<String> queueName() {
        return Optional.ofNullable(this.queueName);
    }
    /**
     * @return The script where the Durable Object is defined, if it is external to this Worker.
     * 
     */
    public Optional<String> scriptName() {
        return Optional.ofNullable(this.scriptName);
    }
    /**
     * @return Name of Worker to bind to.
     * 
     */
    public Optional<String> service() {
        return Optional.ofNullable(this.service);
    }
    /**
     * @return The text value to use.
     * 
     */
    public Optional<String> text() {
        return Optional.ofNullable(this.text);
    }
    /**
     * @return The kind of resource that the binding provides.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkersScriptBinding defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String bucketName;
        private @Nullable String certificateId;
        private @Nullable String className;
        private @Nullable String dataset;
        private @Nullable String environment;
        private @Nullable String id;
        private @Nullable String indexName;
        private @Nullable String json;
        private String name;
        private @Nullable String namespace;
        private @Nullable String namespaceId;
        private @Nullable WorkersScriptBindingOutbound outbound;
        private @Nullable String queueName;
        private @Nullable String scriptName;
        private @Nullable String service;
        private @Nullable String text;
        private String type;
        public Builder() {}
        public Builder(WorkersScriptBinding defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketName = defaults.bucketName;
    	      this.certificateId = defaults.certificateId;
    	      this.className = defaults.className;
    	      this.dataset = defaults.dataset;
    	      this.environment = defaults.environment;
    	      this.id = defaults.id;
    	      this.indexName = defaults.indexName;
    	      this.json = defaults.json;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.namespaceId = defaults.namespaceId;
    	      this.outbound = defaults.outbound;
    	      this.queueName = defaults.queueName;
    	      this.scriptName = defaults.scriptName;
    	      this.service = defaults.service;
    	      this.text = defaults.text;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder bucketName(@Nullable String bucketName) {

            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(@Nullable String certificateId) {

            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder className(@Nullable String className) {

            this.className = className;
            return this;
        }
        @CustomType.Setter
        public Builder dataset(@Nullable String dataset) {

            this.dataset = dataset;
            return this;
        }
        @CustomType.Setter
        public Builder environment(@Nullable String environment) {

            this.environment = environment;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder indexName(@Nullable String indexName) {

            this.indexName = indexName;
            return this;
        }
        @CustomType.Setter
        public Builder json(@Nullable String json) {

            this.json = json;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("WorkersScriptBinding", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder namespaceId(@Nullable String namespaceId) {

            this.namespaceId = namespaceId;
            return this;
        }
        @CustomType.Setter
        public Builder outbound(@Nullable WorkersScriptBindingOutbound outbound) {

            this.outbound = outbound;
            return this;
        }
        @CustomType.Setter
        public Builder queueName(@Nullable String queueName) {

            this.queueName = queueName;
            return this;
        }
        @CustomType.Setter
        public Builder scriptName(@Nullable String scriptName) {

            this.scriptName = scriptName;
            return this;
        }
        @CustomType.Setter
        public Builder service(@Nullable String service) {

            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder text(@Nullable String text) {

            this.text = text;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("WorkersScriptBinding", "type");
            }
            this.type = type;
            return this;
        }
        public WorkersScriptBinding build() {
            final var _resultValue = new WorkersScriptBinding();
            _resultValue.bucketName = bucketName;
            _resultValue.certificateId = certificateId;
            _resultValue.className = className;
            _resultValue.dataset = dataset;
            _resultValue.environment = environment;
            _resultValue.id = id;
            _resultValue.indexName = indexName;
            _resultValue.json = json;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.namespaceId = namespaceId;
            _resultValue.outbound = outbound;
            _resultValue.queueName = queueName;
            _resultValue.scriptName = scriptName;
            _resultValue.service = service;
            _resultValue.text = text;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
