// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.WorkersDeploymentAnnotationsArgs;
import com.pulumi.cloudflare.inputs.WorkersDeploymentVersionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkersDeploymentArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkersDeploymentArgs Empty = new WorkersDeploymentArgs();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    @Import(name="annotations")
    private @Nullable Output<WorkersDeploymentAnnotationsArgs> annotations;

    public Optional<Output<WorkersDeploymentAnnotationsArgs>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Name of the script, used in URLs and route configuration.
     * 
     */
    @Import(name="scriptName", required=true)
    private Output<String> scriptName;

    /**
     * @return Name of the script, used in URLs and route configuration.
     * 
     */
    public Output<String> scriptName() {
        return this.scriptName;
    }

    /**
     * Available values: &#34;percentage&#34;.
     * 
     */
    @Import(name="strategy", required=true)
    private Output<String> strategy;

    /**
     * @return Available values: &#34;percentage&#34;.
     * 
     */
    public Output<String> strategy() {
        return this.strategy;
    }

    @Import(name="versions", required=true)
    private Output<List<WorkersDeploymentVersionArgs>> versions;

    public Output<List<WorkersDeploymentVersionArgs>> versions() {
        return this.versions;
    }

    private WorkersDeploymentArgs() {}

    private WorkersDeploymentArgs(WorkersDeploymentArgs $) {
        this.accountId = $.accountId;
        this.annotations = $.annotations;
        this.scriptName = $.scriptName;
        this.strategy = $.strategy;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkersDeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkersDeploymentArgs $;

        public Builder() {
            $ = new WorkersDeploymentArgs();
        }

        public Builder(WorkersDeploymentArgs defaults) {
            $ = new WorkersDeploymentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder annotations(@Nullable Output<WorkersDeploymentAnnotationsArgs> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(WorkersDeploymentAnnotationsArgs annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param scriptName Name of the script, used in URLs and route configuration.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(Output<String> scriptName) {
            $.scriptName = scriptName;
            return this;
        }

        /**
         * @param scriptName Name of the script, used in URLs and route configuration.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(String scriptName) {
            return scriptName(Output.of(scriptName));
        }

        /**
         * @param strategy Available values: &#34;percentage&#34;.
         * 
         * @return builder
         * 
         */
        public Builder strategy(Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy Available values: &#34;percentage&#34;.
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        public Builder versions(Output<List<WorkersDeploymentVersionArgs>> versions) {
            $.versions = versions;
            return this;
        }

        public Builder versions(List<WorkersDeploymentVersionArgs> versions) {
            return versions(Output.of(versions));
        }

        public Builder versions(WorkersDeploymentVersionArgs... versions) {
            return versions(List.of(versions));
        }

        public WorkersDeploymentArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("WorkersDeploymentArgs", "accountId");
            }
            if ($.scriptName == null) {
                throw new MissingRequiredPropertyException("WorkersDeploymentArgs", "scriptName");
            }
            if ($.strategy == null) {
                throw new MissingRequiredPropertyException("WorkersDeploymentArgs", "strategy");
            }
            if ($.versions == null) {
                throw new MissingRequiredPropertyException("WorkersDeploymentArgs", "versions");
            }
            return $;
        }
    }

}
