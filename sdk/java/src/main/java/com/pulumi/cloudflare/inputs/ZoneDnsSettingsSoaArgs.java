// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class ZoneDnsSettingsSoaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneDnsSettingsSoaArgs Empty = new ZoneDnsSettingsSoaArgs();

    /**
     * Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
     * 
     */
    @Import(name="expire", required=true)
    private Output<Double> expire;

    /**
     * @return Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
     * 
     */
    public Output<Double> expire() {
        return this.expire;
    }

    /**
     * The time to live (TTL) for negative caching of records within the zone.
     * 
     */
    @Import(name="minTtl", required=true)
    private Output<Double> minTtl;

    /**
     * @return The time to live (TTL) for negative caching of records within the zone.
     * 
     */
    public Output<Double> minTtl() {
        return this.minTtl;
    }

    /**
     * The primary nameserver, which may be used for outbound zone transfers.
     * 
     */
    @Import(name="mname", required=true)
    private Output<String> mname;

    /**
     * @return The primary nameserver, which may be used for outbound zone transfers.
     * 
     */
    public Output<String> mname() {
        return this.mname;
    }

    /**
     * Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
     * 
     */
    @Import(name="refresh", required=true)
    private Output<Double> refresh;

    /**
     * @return Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
     * 
     */
    public Output<Double> refresh() {
        return this.refresh;
    }

    /**
     * Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
     * 
     */
    @Import(name="retry", required=true)
    private Output<Double> retry;

    /**
     * @return Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
     * 
     */
    public Output<Double> retry() {
        return this.retry;
    }

    /**
     * The email address of the zone administrator, with the first label representing the local part of the email address.
     * 
     */
    @Import(name="rname", required=true)
    private Output<String> rname;

    /**
     * @return The email address of the zone administrator, with the first label representing the local part of the email address.
     * 
     */
    public Output<String> rname() {
        return this.rname;
    }

    /**
     * The time to live (TTL) of the SOA record itself.
     * 
     */
    @Import(name="ttl", required=true)
    private Output<Double> ttl;

    /**
     * @return The time to live (TTL) of the SOA record itself.
     * 
     */
    public Output<Double> ttl() {
        return this.ttl;
    }

    private ZoneDnsSettingsSoaArgs() {}

    private ZoneDnsSettingsSoaArgs(ZoneDnsSettingsSoaArgs $) {
        this.expire = $.expire;
        this.minTtl = $.minTtl;
        this.mname = $.mname;
        this.refresh = $.refresh;
        this.retry = $.retry;
        this.rname = $.rname;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneDnsSettingsSoaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneDnsSettingsSoaArgs $;

        public Builder() {
            $ = new ZoneDnsSettingsSoaArgs();
        }

        public Builder(ZoneDnsSettingsSoaArgs defaults) {
            $ = new ZoneDnsSettingsSoaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expire Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
         * 
         * @return builder
         * 
         */
        public Builder expire(Output<Double> expire) {
            $.expire = expire;
            return this;
        }

        /**
         * @param expire Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
         * 
         * @return builder
         * 
         */
        public Builder expire(Double expire) {
            return expire(Output.of(expire));
        }

        /**
         * @param minTtl The time to live (TTL) for negative caching of records within the zone.
         * 
         * @return builder
         * 
         */
        public Builder minTtl(Output<Double> minTtl) {
            $.minTtl = minTtl;
            return this;
        }

        /**
         * @param minTtl The time to live (TTL) for negative caching of records within the zone.
         * 
         * @return builder
         * 
         */
        public Builder minTtl(Double minTtl) {
            return minTtl(Output.of(minTtl));
        }

        /**
         * @param mname The primary nameserver, which may be used for outbound zone transfers.
         * 
         * @return builder
         * 
         */
        public Builder mname(Output<String> mname) {
            $.mname = mname;
            return this;
        }

        /**
         * @param mname The primary nameserver, which may be used for outbound zone transfers.
         * 
         * @return builder
         * 
         */
        public Builder mname(String mname) {
            return mname(Output.of(mname));
        }

        /**
         * @param refresh Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
         * 
         * @return builder
         * 
         */
        public Builder refresh(Output<Double> refresh) {
            $.refresh = refresh;
            return this;
        }

        /**
         * @param refresh Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
         * 
         * @return builder
         * 
         */
        public Builder refresh(Double refresh) {
            return refresh(Output.of(refresh));
        }

        /**
         * @param retry Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
         * 
         * @return builder
         * 
         */
        public Builder retry(Output<Double> retry) {
            $.retry = retry;
            return this;
        }

        /**
         * @param retry Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
         * 
         * @return builder
         * 
         */
        public Builder retry(Double retry) {
            return retry(Output.of(retry));
        }

        /**
         * @param rname The email address of the zone administrator, with the first label representing the local part of the email address.
         * 
         * @return builder
         * 
         */
        public Builder rname(Output<String> rname) {
            $.rname = rname;
            return this;
        }

        /**
         * @param rname The email address of the zone administrator, with the first label representing the local part of the email address.
         * 
         * @return builder
         * 
         */
        public Builder rname(String rname) {
            return rname(Output.of(rname));
        }

        /**
         * @param ttl The time to live (TTL) of the SOA record itself.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Output<Double> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The time to live (TTL) of the SOA record itself.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Double ttl) {
            return ttl(Output.of(ttl));
        }

        public ZoneDnsSettingsSoaArgs build() {
            if ($.expire == null) {
                throw new MissingRequiredPropertyException("ZoneDnsSettingsSoaArgs", "expire");
            }
            if ($.minTtl == null) {
                throw new MissingRequiredPropertyException("ZoneDnsSettingsSoaArgs", "minTtl");
            }
            if ($.mname == null) {
                throw new MissingRequiredPropertyException("ZoneDnsSettingsSoaArgs", "mname");
            }
            if ($.refresh == null) {
                throw new MissingRequiredPropertyException("ZoneDnsSettingsSoaArgs", "refresh");
            }
            if ($.retry == null) {
                throw new MissingRequiredPropertyException("ZoneDnsSettingsSoaArgs", "retry");
            }
            if ($.rname == null) {
                throw new MissingRequiredPropertyException("ZoneDnsSettingsSoaArgs", "rname");
            }
            if ($.ttl == null) {
                throw new MissingRequiredPropertyException("ZoneDnsSettingsSoaArgs", "ttl");
            }
            return $;
        }
    }

}
