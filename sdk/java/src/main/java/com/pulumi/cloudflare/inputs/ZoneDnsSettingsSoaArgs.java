// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneDnsSettingsSoaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneDnsSettingsSoaArgs Empty = new ZoneDnsSettingsSoaArgs();

    /**
     * Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
     * 
     */
    @Import(name="expire")
    private @Nullable Output<Double> expire;

    /**
     * @return Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
     * 
     */
    public Optional<Output<Double>> expire() {
        return Optional.ofNullable(this.expire);
    }

    /**
     * The time to live (TTL) for negative caching of records within the zone.
     * 
     */
    @Import(name="minTtl")
    private @Nullable Output<Double> minTtl;

    /**
     * @return The time to live (TTL) for negative caching of records within the zone.
     * 
     */
    public Optional<Output<Double>> minTtl() {
        return Optional.ofNullable(this.minTtl);
    }

    /**
     * The primary nameserver, which may be used for outbound zone transfers. If null, a Cloudflare-assigned value will be used.
     * 
     */
    @Import(name="mname")
    private @Nullable Output<String> mname;

    /**
     * @return The primary nameserver, which may be used for outbound zone transfers. If null, a Cloudflare-assigned value will be used.
     * 
     */
    public Optional<Output<String>> mname() {
        return Optional.ofNullable(this.mname);
    }

    /**
     * Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
     * 
     */
    @Import(name="refresh")
    private @Nullable Output<Double> refresh;

    /**
     * @return Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
     * 
     */
    public Optional<Output<Double>> refresh() {
        return Optional.ofNullable(this.refresh);
    }

    /**
     * Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
     * 
     */
    @Import(name="retry")
    private @Nullable Output<Double> retry;

    /**
     * @return Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
     * 
     */
    public Optional<Output<Double>> retry() {
        return Optional.ofNullable(this.retry);
    }

    /**
     * The email address of the zone administrator, with the first label representing the local part of the email address.
     * 
     */
    @Import(name="rname")
    private @Nullable Output<String> rname;

    /**
     * @return The email address of the zone administrator, with the first label representing the local part of the email address.
     * 
     */
    public Optional<Output<String>> rname() {
        return Optional.ofNullable(this.rname);
    }

    /**
     * The time to live (TTL) of the SOA record itself.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Double> ttl;

    /**
     * @return The time to live (TTL) of the SOA record itself.
     * 
     */
    public Optional<Output<Double>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private ZoneDnsSettingsSoaArgs() {}

    private ZoneDnsSettingsSoaArgs(ZoneDnsSettingsSoaArgs $) {
        this.expire = $.expire;
        this.minTtl = $.minTtl;
        this.mname = $.mname;
        this.refresh = $.refresh;
        this.retry = $.retry;
        this.rname = $.rname;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneDnsSettingsSoaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneDnsSettingsSoaArgs $;

        public Builder() {
            $ = new ZoneDnsSettingsSoaArgs();
        }

        public Builder(ZoneDnsSettingsSoaArgs defaults) {
            $ = new ZoneDnsSettingsSoaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expire Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
         * 
         * @return builder
         * 
         */
        public Builder expire(@Nullable Output<Double> expire) {
            $.expire = expire;
            return this;
        }

        /**
         * @param expire Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
         * 
         * @return builder
         * 
         */
        public Builder expire(Double expire) {
            return expire(Output.of(expire));
        }

        /**
         * @param minTtl The time to live (TTL) for negative caching of records within the zone.
         * 
         * @return builder
         * 
         */
        public Builder minTtl(@Nullable Output<Double> minTtl) {
            $.minTtl = minTtl;
            return this;
        }

        /**
         * @param minTtl The time to live (TTL) for negative caching of records within the zone.
         * 
         * @return builder
         * 
         */
        public Builder minTtl(Double minTtl) {
            return minTtl(Output.of(minTtl));
        }

        /**
         * @param mname The primary nameserver, which may be used for outbound zone transfers. If null, a Cloudflare-assigned value will be used.
         * 
         * @return builder
         * 
         */
        public Builder mname(@Nullable Output<String> mname) {
            $.mname = mname;
            return this;
        }

        /**
         * @param mname The primary nameserver, which may be used for outbound zone transfers. If null, a Cloudflare-assigned value will be used.
         * 
         * @return builder
         * 
         */
        public Builder mname(String mname) {
            return mname(Output.of(mname));
        }

        /**
         * @param refresh Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
         * 
         * @return builder
         * 
         */
        public Builder refresh(@Nullable Output<Double> refresh) {
            $.refresh = refresh;
            return this;
        }

        /**
         * @param refresh Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
         * 
         * @return builder
         * 
         */
        public Builder refresh(Double refresh) {
            return refresh(Output.of(refresh));
        }

        /**
         * @param retry Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
         * 
         * @return builder
         * 
         */
        public Builder retry(@Nullable Output<Double> retry) {
            $.retry = retry;
            return this;
        }

        /**
         * @param retry Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
         * 
         * @return builder
         * 
         */
        public Builder retry(Double retry) {
            return retry(Output.of(retry));
        }

        /**
         * @param rname The email address of the zone administrator, with the first label representing the local part of the email address.
         * 
         * @return builder
         * 
         */
        public Builder rname(@Nullable Output<String> rname) {
            $.rname = rname;
            return this;
        }

        /**
         * @param rname The email address of the zone administrator, with the first label representing the local part of the email address.
         * 
         * @return builder
         * 
         */
        public Builder rname(String rname) {
            return rname(Output.of(rname));
        }

        /**
         * @param ttl The time to live (TTL) of the SOA record itself.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Double> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The time to live (TTL) of the SOA record itself.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Double ttl) {
            return ttl(Output.of(ttl));
        }

        public ZoneDnsSettingsSoaArgs build() {
            return $;
        }
    }

}
