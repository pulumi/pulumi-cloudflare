// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.CustomHostnameArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.CustomHostnameState;
import com.pulumi.cloudflare.outputs.CustomHostnameOwnershipVerification;
import com.pulumi.cloudflare.outputs.CustomHostnameOwnershipVerificationHttp;
import com.pulumi.cloudflare.outputs.CustomHostnameSsl;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/customHostname:CustomHostname example &#39;&lt;zone_id&gt;/&lt;custom_hostname_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/customHostname:CustomHostname")
public class CustomHostname extends com.pulumi.resources.CustomResource {
    /**
     * This is the time the hostname was created.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return This is the time the hostname was created.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
     * 
     */
    @Export(name="customMetadata", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> customMetadata;

    /**
     * @return Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
     * 
     */
    public Output<Optional<Map<String,String>>> customMetadata() {
        return Codegen.optional(this.customMetadata);
    }
    /**
     * a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
     * 
     */
    @Export(name="customOriginServer", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> customOriginServer;

    /**
     * @return a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
     * 
     */
    public Output<Optional<String>> customOriginServer() {
        return Codegen.optional(this.customOriginServer);
    }
    /**
     * A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
     * 
     */
    @Export(name="customOriginSni", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> customOriginSni;

    /**
     * @return A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
     * 
     */
    public Output<Optional<String>> customOriginSni() {
        return Codegen.optional(this.customOriginSni);
    }
    /**
     * The custom hostname that will point to your hostname via CNAME.
     * 
     */
    @Export(name="hostname", refs={String.class}, tree="[0]")
    private Output<String> hostname;

    /**
     * @return The custom hostname that will point to your hostname via CNAME.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }
    /**
     * This is a record which can be placed to activate a hostname.
     * 
     */
    @Export(name="ownershipVerification", refs={CustomHostnameOwnershipVerification.class}, tree="[0]")
    private Output<CustomHostnameOwnershipVerification> ownershipVerification;

    /**
     * @return This is a record which can be placed to activate a hostname.
     * 
     */
    public Output<CustomHostnameOwnershipVerification> ownershipVerification() {
        return this.ownershipVerification;
    }
    /**
     * This presents the token to be served by the given http url to activate a hostname.
     * 
     */
    @Export(name="ownershipVerificationHttp", refs={CustomHostnameOwnershipVerificationHttp.class}, tree="[0]")
    private Output<CustomHostnameOwnershipVerificationHttp> ownershipVerificationHttp;

    /**
     * @return This presents the token to be served by the given http url to activate a hostname.
     * 
     */
    public Output<CustomHostnameOwnershipVerificationHttp> ownershipVerificationHttp() {
        return this.ownershipVerificationHttp;
    }
    /**
     * SSL properties used when creating the custom hostname.
     * 
     */
    @Export(name="ssl", refs={CustomHostnameSsl.class}, tree="[0]")
    private Output<CustomHostnameSsl> ssl;

    /**
     * @return SSL properties used when creating the custom hostname.
     * 
     */
    public Output<CustomHostnameSsl> ssl() {
        return this.ssl;
    }
    /**
     * Status of the hostname&#39;s activation.
     * Available values: &#34;active&#34;, &#34;pending&#34;, &#34;active*redeploying&#34;, &#34;moved&#34;, &#34;pending*deletion&#34;, &#34;deleted&#34;, &#34;pending*blocked&#34;, &#34;pending*migration&#34;, &#34;pending*provisioned&#34;, &#34;test*pending&#34;, &#34;test*active&#34;, &#34;test*active*apex&#34;, &#34;test*blocked&#34;, &#34;test_failed&#34;, &#34;provisioned&#34;, &#34;blocked&#34;.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the hostname&#39;s activation.
     * Available values: &#34;active&#34;, &#34;pending&#34;, &#34;active*redeploying&#34;, &#34;moved&#34;, &#34;pending*deletion&#34;, &#34;deleted&#34;, &#34;pending*blocked&#34;, &#34;pending*migration&#34;, &#34;pending*provisioned&#34;, &#34;test*pending&#34;, &#34;test*active&#34;, &#34;test*active*apex&#34;, &#34;test*blocked&#34;, &#34;test_failed&#34;, &#34;provisioned&#34;, &#34;blocked&#34;.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * These are errors that were encountered while trying to activate a hostname.
     * 
     */
    @Export(name="verificationErrors", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> verificationErrors;

    /**
     * @return These are errors that were encountered while trying to activate a hostname.
     * 
     */
    public Output<List<String>> verificationErrors() {
        return this.verificationErrors;
    }
    /**
     * Identifier.
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CustomHostname(java.lang.String name) {
        this(name, CustomHostnameArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CustomHostname(java.lang.String name, CustomHostnameArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CustomHostname(java.lang.String name, CustomHostnameArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/customHostname:CustomHostname", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CustomHostname(java.lang.String name, Output<java.lang.String> id, @Nullable CustomHostnameState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/customHostname:CustomHostname", name, state, makeResourceOptions(options, id), false);
    }

    private static CustomHostnameArgs makeArgs(CustomHostnameArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CustomHostnameArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CustomHostname get(java.lang.String name, Output<java.lang.String> id, @Nullable CustomHostnameState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CustomHostname(name, id, state, options);
    }
}
