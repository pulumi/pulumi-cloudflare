// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.UserAgentBlockingRuleConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserAgentBlockingRuleState extends com.pulumi.resources.ResourceArgs {

    public static final UserAgentBlockingRuleState Empty = new UserAgentBlockingRuleState();

    /**
     * The rule configuration.
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<UserAgentBlockingRuleConfigurationArgs> configuration;

    /**
     * @return The rule configuration.
     * 
     */
    public Optional<Output<UserAgentBlockingRuleConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * The action to apply to a matched request.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The action to apply to a matched request.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The unique identifier of the User Agent Blocking rule.
     * 
     */
    @Import(name="uaRuleId")
    private @Nullable Output<String> uaRuleId;

    /**
     * @return The unique identifier of the User Agent Blocking rule.
     * 
     */
    public Optional<Output<String>> uaRuleId() {
        return Optional.ofNullable(this.uaRuleId);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private UserAgentBlockingRuleState() {}

    private UserAgentBlockingRuleState(UserAgentBlockingRuleState $) {
        this.configuration = $.configuration;
        this.mode = $.mode;
        this.uaRuleId = $.uaRuleId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserAgentBlockingRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserAgentBlockingRuleState $;

        public Builder() {
            $ = new UserAgentBlockingRuleState();
        }

        public Builder(UserAgentBlockingRuleState defaults) {
            $ = new UserAgentBlockingRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuration The rule configuration.
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<UserAgentBlockingRuleConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration The rule configuration.
         * 
         * @return builder
         * 
         */
        public Builder configuration(UserAgentBlockingRuleConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param mode The action to apply to a matched request.
         * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The action to apply to a matched request.
         * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param uaRuleId The unique identifier of the User Agent Blocking rule.
         * 
         * @return builder
         * 
         */
        public Builder uaRuleId(@Nullable Output<String> uaRuleId) {
            $.uaRuleId = uaRuleId;
            return this;
        }

        /**
         * @param uaRuleId The unique identifier of the User Agent Blocking rule.
         * 
         * @return builder
         * 
         */
        public Builder uaRuleId(String uaRuleId) {
            return uaRuleId(Output.of(uaRuleId));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public UserAgentBlockingRuleState build() {
            return $;
        }
    }

}
