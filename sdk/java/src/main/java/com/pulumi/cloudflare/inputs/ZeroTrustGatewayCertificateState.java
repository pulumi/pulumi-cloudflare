// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustGatewayCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustGatewayCertificateState Empty = new ZeroTrustGatewayCertificateState();

    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="activate")
    private @Nullable Output<Boolean> activate;

    public Optional<Output<Boolean>> activate() {
        return Optional.ofNullable(this.activate);
    }

    /**
     * Indicate the read-only deployment status of the certificate on Cloudflare&#39;s edge. Gateway TLS interception can use certificates in the &#39;available&#39; (previously called &#39;active&#39;) state.
     * Available values: &#34;pending*deployment&#34;, &#34;available&#34;, &#34;pending*deletion&#34;, &#34;inactive&#34;.
     * 
     */
    @Import(name="bindingStatus")
    private @Nullable Output<String> bindingStatus;

    /**
     * @return Indicate the read-only deployment status of the certificate on Cloudflare&#39;s edge. Gateway TLS interception can use certificates in the &#39;available&#39; (previously called &#39;active&#39;) state.
     * Available values: &#34;pending*deployment&#34;, &#34;available&#34;, &#34;pending*deletion&#34;, &#34;inactive&#34;.
     * 
     */
    public Optional<Output<String>> bindingStatus() {
        return Optional.ofNullable(this.bindingStatus);
    }

    /**
     * Provide the CA certificate (read-only).
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return Provide the CA certificate (read-only).
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="expiresOn")
    private @Nullable Output<String> expiresOn;

    public Optional<Output<String>> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }

    /**
     * Provide the SHA256 fingerprint of the certificate (read-only).
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return Provide the SHA256 fingerprint of the certificate (read-only).
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `certificate` (read-only).
     * 
     */
    @Import(name="inUse")
    private @Nullable Output<Boolean> inUse;

    /**
     * @return Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `certificate` (read-only).
     * 
     */
    public Optional<Output<Boolean>> inUse() {
        return Optional.ofNullable(this.inUse);
    }

    /**
     * Indicate the organization that issued the certificate (read-only).
     * 
     */
    @Import(name="issuerOrg")
    private @Nullable Output<String> issuerOrg;

    /**
     * @return Indicate the organization that issued the certificate (read-only).
     * 
     */
    public Optional<Output<String>> issuerOrg() {
        return Optional.ofNullable(this.issuerOrg);
    }

    /**
     * Provide the entire issuer field of the certificate (read-only).
     * 
     */
    @Import(name="issuerRaw")
    private @Nullable Output<String> issuerRaw;

    /**
     * @return Provide the entire issuer field of the certificate (read-only).
     * 
     */
    public Optional<Output<String>> issuerRaw() {
        return Optional.ofNullable(this.issuerRaw);
    }

    /**
     * Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.
     * Available values: &#34;custom&#34;, &#34;gatewayManaged&#34;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.
     * Available values: &#34;custom&#34;, &#34;gatewayManaged&#34;.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    @Import(name="uploadedOn")
    private @Nullable Output<String> uploadedOn;

    public Optional<Output<String>> uploadedOn() {
        return Optional.ofNullable(this.uploadedOn);
    }

    /**
     * Sets the certificate validity period in days (range: 1-10,950 days / ~30 years). Defaults to 1,825 days (5 years). **Important**: This field is only settable during the certificate creation.  Certificates becomes immutable after creation - use the `/activate` and `/deactivate` endpoints to manage certificate lifecycle.
     * 
     */
    @Import(name="validityPeriodDays")
    private @Nullable Output<Integer> validityPeriodDays;

    /**
     * @return Sets the certificate validity period in days (range: 1-10,950 days / ~30 years). Defaults to 1,825 days (5 years). **Important**: This field is only settable during the certificate creation.  Certificates becomes immutable after creation - use the `/activate` and `/deactivate` endpoints to manage certificate lifecycle.
     * 
     */
    public Optional<Output<Integer>> validityPeriodDays() {
        return Optional.ofNullable(this.validityPeriodDays);
    }

    private ZeroTrustGatewayCertificateState() {}

    private ZeroTrustGatewayCertificateState(ZeroTrustGatewayCertificateState $) {
        this.accountId = $.accountId;
        this.activate = $.activate;
        this.bindingStatus = $.bindingStatus;
        this.certificate = $.certificate;
        this.createdAt = $.createdAt;
        this.expiresOn = $.expiresOn;
        this.fingerprint = $.fingerprint;
        this.inUse = $.inUse;
        this.issuerOrg = $.issuerOrg;
        this.issuerRaw = $.issuerRaw;
        this.type = $.type;
        this.updatedAt = $.updatedAt;
        this.uploadedOn = $.uploadedOn;
        this.validityPeriodDays = $.validityPeriodDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustGatewayCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustGatewayCertificateState $;

        public Builder() {
            $ = new ZeroTrustGatewayCertificateState();
        }

        public Builder(ZeroTrustGatewayCertificateState defaults) {
            $ = new ZeroTrustGatewayCertificateState(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder activate(@Nullable Output<Boolean> activate) {
            $.activate = activate;
            return this;
        }

        public Builder activate(Boolean activate) {
            return activate(Output.of(activate));
        }

        /**
         * @param bindingStatus Indicate the read-only deployment status of the certificate on Cloudflare&#39;s edge. Gateway TLS interception can use certificates in the &#39;available&#39; (previously called &#39;active&#39;) state.
         * Available values: &#34;pending*deployment&#34;, &#34;available&#34;, &#34;pending*deletion&#34;, &#34;inactive&#34;.
         * 
         * @return builder
         * 
         */
        public Builder bindingStatus(@Nullable Output<String> bindingStatus) {
            $.bindingStatus = bindingStatus;
            return this;
        }

        /**
         * @param bindingStatus Indicate the read-only deployment status of the certificate on Cloudflare&#39;s edge. Gateway TLS interception can use certificates in the &#39;available&#39; (previously called &#39;active&#39;) state.
         * Available values: &#34;pending*deployment&#34;, &#34;available&#34;, &#34;pending*deletion&#34;, &#34;inactive&#34;.
         * 
         * @return builder
         * 
         */
        public Builder bindingStatus(String bindingStatus) {
            return bindingStatus(Output.of(bindingStatus));
        }

        /**
         * @param certificate Provide the CA certificate (read-only).
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Provide the CA certificate (read-only).
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            $.expiresOn = expiresOn;
            return this;
        }

        public Builder expiresOn(String expiresOn) {
            return expiresOn(Output.of(expiresOn));
        }

        /**
         * @param fingerprint Provide the SHA256 fingerprint of the certificate (read-only).
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint Provide the SHA256 fingerprint of the certificate (read-only).
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param inUse Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `certificate` (read-only).
         * 
         * @return builder
         * 
         */
        public Builder inUse(@Nullable Output<Boolean> inUse) {
            $.inUse = inUse;
            return this;
        }

        /**
         * @param inUse Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `certificate` (read-only).
         * 
         * @return builder
         * 
         */
        public Builder inUse(Boolean inUse) {
            return inUse(Output.of(inUse));
        }

        /**
         * @param issuerOrg Indicate the organization that issued the certificate (read-only).
         * 
         * @return builder
         * 
         */
        public Builder issuerOrg(@Nullable Output<String> issuerOrg) {
            $.issuerOrg = issuerOrg;
            return this;
        }

        /**
         * @param issuerOrg Indicate the organization that issued the certificate (read-only).
         * 
         * @return builder
         * 
         */
        public Builder issuerOrg(String issuerOrg) {
            return issuerOrg(Output.of(issuerOrg));
        }

        /**
         * @param issuerRaw Provide the entire issuer field of the certificate (read-only).
         * 
         * @return builder
         * 
         */
        public Builder issuerRaw(@Nullable Output<String> issuerRaw) {
            $.issuerRaw = issuerRaw;
            return this;
        }

        /**
         * @param issuerRaw Provide the entire issuer field of the certificate (read-only).
         * 
         * @return builder
         * 
         */
        public Builder issuerRaw(String issuerRaw) {
            return issuerRaw(Output.of(issuerRaw));
        }

        /**
         * @param type Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.
         * Available values: &#34;custom&#34;, &#34;gatewayManaged&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.
         * Available values: &#34;custom&#34;, &#34;gatewayManaged&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public Builder uploadedOn(@Nullable Output<String> uploadedOn) {
            $.uploadedOn = uploadedOn;
            return this;
        }

        public Builder uploadedOn(String uploadedOn) {
            return uploadedOn(Output.of(uploadedOn));
        }

        /**
         * @param validityPeriodDays Sets the certificate validity period in days (range: 1-10,950 days / ~30 years). Defaults to 1,825 days (5 years). **Important**: This field is only settable during the certificate creation.  Certificates becomes immutable after creation - use the `/activate` and `/deactivate` endpoints to manage certificate lifecycle.
         * 
         * @return builder
         * 
         */
        public Builder validityPeriodDays(@Nullable Output<Integer> validityPeriodDays) {
            $.validityPeriodDays = validityPeriodDays;
            return this;
        }

        /**
         * @param validityPeriodDays Sets the certificate validity period in days (range: 1-10,950 days / ~30 years). Defaults to 1,825 days (5 years). **Important**: This field is only settable during the certificate creation.  Certificates becomes immutable after creation - use the `/activate` and `/deactivate` endpoints to manage certificate lifecycle.
         * 
         * @return builder
         * 
         */
        public Builder validityPeriodDays(Integer validityPeriodDays) {
            return validityPeriodDays(Output.of(validityPeriodDays));
        }

        public ZeroTrustGatewayCertificateState build() {
            return $;
        }
    }

}
