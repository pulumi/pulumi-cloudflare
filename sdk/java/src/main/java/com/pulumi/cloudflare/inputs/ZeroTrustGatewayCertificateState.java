// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustGatewayCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustGatewayCertificateState Empty = new ZeroTrustGatewayCertificateState();

    /**
     * The account identifier to target for the resource.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account identifier to target for the resource.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Whether or not to activate a certificate. A certificate must be activated to use in Gateway certificate settings. Defaults to `false`.
     * 
     */
    @Import(name="activate")
    private @Nullable Output<Boolean> activate;

    /**
     * @return Whether or not to activate a certificate. A certificate must be activated to use in Gateway certificate settings. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> activate() {
        return Optional.ofNullable(this.activate);
    }

    /**
     * The deployment status of the certificate on the edge Available values: `IP`, `SERIAL`, `URL`, `DOMAIN`, `EMAIL`.
     * 
     */
    @Import(name="bindingStatus")
    private @Nullable Output<String> bindingStatus;

    /**
     * @return The deployment status of the certificate on the edge Available values: `IP`, `SERIAL`, `URL`, `DOMAIN`, `EMAIL`.
     * 
     */
    public Optional<Output<String>> bindingStatus() {
        return Optional.ofNullable(this.bindingStatus);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The type of certificate (custom or Gateway-managed). Must provide only one of `custom`, `gateway_managed`.
     * 
     */
    @Import(name="custom")
    private @Nullable Output<Boolean> custom;

    /**
     * @return The type of certificate (custom or Gateway-managed). Must provide only one of `custom`, `gateway_managed`.
     * 
     */
    public Optional<Output<Boolean>> custom() {
        return Optional.ofNullable(this.custom);
    }

    @Import(name="expiresOn")
    private @Nullable Output<String> expiresOn;

    public Optional<Output<String>> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }

    /**
     * The type of certificate (custom or Gateway-managed). Must provide only one of `custom`, `gateway_managed`.
     * 
     */
    @Import(name="gatewayManaged")
    private @Nullable Output<Boolean> gatewayManaged;

    /**
     * @return The type of certificate (custom or Gateway-managed). Must provide only one of `custom`, `gateway_managed`.
     * 
     */
    public Optional<Output<Boolean>> gatewayManaged() {
        return Optional.ofNullable(this.gatewayManaged);
    }

    /**
     * Whether the certificate is in use by Gateway for TLS interception and the block page.
     * 
     */
    @Import(name="inUse")
    private @Nullable Output<Boolean> inUse;

    /**
     * @return Whether the certificate is in use by Gateway for TLS interception and the block page.
     * 
     */
    public Optional<Output<Boolean>> inUse() {
        return Optional.ofNullable(this.inUse);
    }

    @Import(name="qsPackId")
    private @Nullable Output<String> qsPackId;

    public Optional<Output<String>> qsPackId() {
        return Optional.ofNullable(this.qsPackId);
    }

    @Import(name="uploadedOn")
    private @Nullable Output<String> uploadedOn;

    public Optional<Output<String>> uploadedOn() {
        return Optional.ofNullable(this.uploadedOn);
    }

    /**
     * Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years. Defaults to `1826`. Required when using `gateway_managed`. Conflicts with `custom`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="validityPeriodDays")
    private @Nullable Output<Integer> validityPeriodDays;

    /**
     * @return Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years. Defaults to `1826`. Required when using `gateway_managed`. Conflicts with `custom`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Optional<Output<Integer>> validityPeriodDays() {
        return Optional.ofNullable(this.validityPeriodDays);
    }

    private ZeroTrustGatewayCertificateState() {}

    private ZeroTrustGatewayCertificateState(ZeroTrustGatewayCertificateState $) {
        this.accountId = $.accountId;
        this.activate = $.activate;
        this.bindingStatus = $.bindingStatus;
        this.createdAt = $.createdAt;
        this.custom = $.custom;
        this.expiresOn = $.expiresOn;
        this.gatewayManaged = $.gatewayManaged;
        this.inUse = $.inUse;
        this.qsPackId = $.qsPackId;
        this.uploadedOn = $.uploadedOn;
        this.validityPeriodDays = $.validityPeriodDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustGatewayCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustGatewayCertificateState $;

        public Builder() {
            $ = new ZeroTrustGatewayCertificateState();
        }

        public Builder(ZeroTrustGatewayCertificateState defaults) {
            $ = new ZeroTrustGatewayCertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param activate Whether or not to activate a certificate. A certificate must be activated to use in Gateway certificate settings. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder activate(@Nullable Output<Boolean> activate) {
            $.activate = activate;
            return this;
        }

        /**
         * @param activate Whether or not to activate a certificate. A certificate must be activated to use in Gateway certificate settings. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder activate(Boolean activate) {
            return activate(Output.of(activate));
        }

        /**
         * @param bindingStatus The deployment status of the certificate on the edge Available values: `IP`, `SERIAL`, `URL`, `DOMAIN`, `EMAIL`.
         * 
         * @return builder
         * 
         */
        public Builder bindingStatus(@Nullable Output<String> bindingStatus) {
            $.bindingStatus = bindingStatus;
            return this;
        }

        /**
         * @param bindingStatus The deployment status of the certificate on the edge Available values: `IP`, `SERIAL`, `URL`, `DOMAIN`, `EMAIL`.
         * 
         * @return builder
         * 
         */
        public Builder bindingStatus(String bindingStatus) {
            return bindingStatus(Output.of(bindingStatus));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param custom The type of certificate (custom or Gateway-managed). Must provide only one of `custom`, `gateway_managed`.
         * 
         * @return builder
         * 
         */
        public Builder custom(@Nullable Output<Boolean> custom) {
            $.custom = custom;
            return this;
        }

        /**
         * @param custom The type of certificate (custom or Gateway-managed). Must provide only one of `custom`, `gateway_managed`.
         * 
         * @return builder
         * 
         */
        public Builder custom(Boolean custom) {
            return custom(Output.of(custom));
        }

        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            $.expiresOn = expiresOn;
            return this;
        }

        public Builder expiresOn(String expiresOn) {
            return expiresOn(Output.of(expiresOn));
        }

        /**
         * @param gatewayManaged The type of certificate (custom or Gateway-managed). Must provide only one of `custom`, `gateway_managed`.
         * 
         * @return builder
         * 
         */
        public Builder gatewayManaged(@Nullable Output<Boolean> gatewayManaged) {
            $.gatewayManaged = gatewayManaged;
            return this;
        }

        /**
         * @param gatewayManaged The type of certificate (custom or Gateway-managed). Must provide only one of `custom`, `gateway_managed`.
         * 
         * @return builder
         * 
         */
        public Builder gatewayManaged(Boolean gatewayManaged) {
            return gatewayManaged(Output.of(gatewayManaged));
        }

        /**
         * @param inUse Whether the certificate is in use by Gateway for TLS interception and the block page.
         * 
         * @return builder
         * 
         */
        public Builder inUse(@Nullable Output<Boolean> inUse) {
            $.inUse = inUse;
            return this;
        }

        /**
         * @param inUse Whether the certificate is in use by Gateway for TLS interception and the block page.
         * 
         * @return builder
         * 
         */
        public Builder inUse(Boolean inUse) {
            return inUse(Output.of(inUse));
        }

        public Builder qsPackId(@Nullable Output<String> qsPackId) {
            $.qsPackId = qsPackId;
            return this;
        }

        public Builder qsPackId(String qsPackId) {
            return qsPackId(Output.of(qsPackId));
        }

        public Builder uploadedOn(@Nullable Output<String> uploadedOn) {
            $.uploadedOn = uploadedOn;
            return this;
        }

        public Builder uploadedOn(String uploadedOn) {
            return uploadedOn(Output.of(uploadedOn));
        }

        /**
         * @param validityPeriodDays Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years. Defaults to `1826`. Required when using `gateway_managed`. Conflicts with `custom`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder validityPeriodDays(@Nullable Output<Integer> validityPeriodDays) {
            $.validityPeriodDays = validityPeriodDays;
            return this;
        }

        /**
         * @param validityPeriodDays Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years. Defaults to `1826`. Required when using `gateway_managed`. Conflicts with `custom`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder validityPeriodDays(Integer validityPeriodDays) {
            return validityPeriodDays(Output.of(validityPeriodDays));
        }

        public ZeroTrustGatewayCertificateState build() {
            return $;
        }
    }

}
