// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.RateLimitActionArgs;
import com.pulumi.cloudflare.inputs.RateLimitBypassArgs;
import com.pulumi.cloudflare.inputs.RateLimitMatchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RateLimitState extends com.pulumi.resources.ResourceArgs {

    public static final RateLimitState Empty = new RateLimitState();

    /**
     * The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    @Import(name="action")
    private @Nullable Output<RateLimitActionArgs> action;

    /**
     * @return The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    public Optional<Output<RateLimitActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
     * 
     */
    @Import(name="bypasses")
    private @Nullable Output<List<RateLimitBypassArgs>> bypasses;

    /**
     * @return Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
     * 
     */
    public Optional<Output<List<RateLimitBypassArgs>>> bypasses() {
        return Optional.ofNullable(this.bypasses);
    }

    /**
     * An informative summary of the rule. This value is sanitized and any tags will be removed.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An informative summary of the rule. This value is sanitized and any tags will be removed.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * When true, indicates that the rate limit is currently disabled.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return When true, indicates that the rate limit is currently disabled.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Determines which traffic the rate limit counts towards the threshold.
     * 
     */
    @Import(name="match")
    private @Nullable Output<RateLimitMatchArgs> match;

    /**
     * @return Determines which traffic the rate limit counts towards the threshold.
     * 
     */
    public Optional<Output<RateLimitMatchArgs>> match() {
        return Optional.ofNullable(this.match);
    }

    /**
     * The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Double> period;

    /**
     * @return The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     * 
     */
    public Optional<Output<Double>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Double> threshold;

    /**
     * @return The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     * 
     */
    public Optional<Output<Double>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    /**
     * Defines an identifier.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Defines an identifier.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private RateLimitState() {}

    private RateLimitState(RateLimitState $) {
        this.action = $.action;
        this.bypasses = $.bypasses;
        this.description = $.description;
        this.disabled = $.disabled;
        this.match = $.match;
        this.period = $.period;
        this.threshold = $.threshold;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RateLimitState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RateLimitState $;

        public Builder() {
            $ = new RateLimitState();
        }

        public Builder(RateLimitState defaults) {
            $ = new RateLimitState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to perform when the threshold of matched traffic within the configured period is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<RateLimitActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to perform when the threshold of matched traffic within the configured period is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder action(RateLimitActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param bypasses Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
         * 
         * @return builder
         * 
         */
        public Builder bypasses(@Nullable Output<List<RateLimitBypassArgs>> bypasses) {
            $.bypasses = bypasses;
            return this;
        }

        /**
         * @param bypasses Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
         * 
         * @return builder
         * 
         */
        public Builder bypasses(List<RateLimitBypassArgs> bypasses) {
            return bypasses(Output.of(bypasses));
        }

        /**
         * @param bypasses Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
         * 
         * @return builder
         * 
         */
        public Builder bypasses(RateLimitBypassArgs... bypasses) {
            return bypasses(List.of(bypasses));
        }

        /**
         * @param description An informative summary of the rule. This value is sanitized and any tags will be removed.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An informative summary of the rule. This value is sanitized and any tags will be removed.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disabled When true, indicates that the rate limit is currently disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled When true, indicates that the rate limit is currently disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param match Determines which traffic the rate limit counts towards the threshold.
         * 
         * @return builder
         * 
         */
        public Builder match(@Nullable Output<RateLimitMatchArgs> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match Determines which traffic the rate limit counts towards the threshold.
         * 
         * @return builder
         * 
         */
        public Builder match(RateLimitMatchArgs match) {
            return match(Output.of(match));
        }

        /**
         * @param period The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Double> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
         * 
         * @return builder
         * 
         */
        public Builder period(Double period) {
            return period(Output.of(period));
        }

        /**
         * @param threshold The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public RateLimitState build() {
            return $;
        }
    }

}
