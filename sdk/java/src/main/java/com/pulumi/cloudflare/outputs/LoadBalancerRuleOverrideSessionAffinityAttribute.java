// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerRuleOverrideSessionAffinityAttribute {
    /**
     * @return Configures the HTTP header names to use when header session affinity is enabled.
     * 
     */
    private @Nullable List<String> headers;
    /**
     * @return Configures how headers are used when header session affinity is enabled. Set to true to require all headers to be present on requests in order for sessions to be created or false to require at least one header to be present. Defaults to `false`.
     * 
     */
    private @Nullable Boolean requireAllHeaders;
    /**
     * @return Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`.
     * 
     */
    private @Nullable String samesite;
    /**
     * @return Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`.
     * 
     */
    private @Nullable String secure;
    /**
     * @return Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`.
     * 
     */
    private @Nullable String zeroDowntimeFailover;

    private LoadBalancerRuleOverrideSessionAffinityAttribute() {}
    /**
     * @return Configures the HTTP header names to use when header session affinity is enabled.
     * 
     */
    public List<String> headers() {
        return this.headers == null ? List.of() : this.headers;
    }
    /**
     * @return Configures how headers are used when header session affinity is enabled. Set to true to require all headers to be present on requests in order for sessions to be created or false to require at least one header to be present. Defaults to `false`.
     * 
     */
    public Optional<Boolean> requireAllHeaders() {
        return Optional.ofNullable(this.requireAllHeaders);
    }
    /**
     * @return Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`.
     * 
     */
    public Optional<String> samesite() {
        return Optional.ofNullable(this.samesite);
    }
    /**
     * @return Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`.
     * 
     */
    public Optional<String> secure() {
        return Optional.ofNullable(this.secure);
    }
    /**
     * @return Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`.
     * 
     */
    public Optional<String> zeroDowntimeFailover() {
        return Optional.ofNullable(this.zeroDowntimeFailover);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerRuleOverrideSessionAffinityAttribute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> headers;
        private @Nullable Boolean requireAllHeaders;
        private @Nullable String samesite;
        private @Nullable String secure;
        private @Nullable String zeroDowntimeFailover;
        public Builder() {}
        public Builder(LoadBalancerRuleOverrideSessionAffinityAttribute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.headers = defaults.headers;
    	      this.requireAllHeaders = defaults.requireAllHeaders;
    	      this.samesite = defaults.samesite;
    	      this.secure = defaults.secure;
    	      this.zeroDowntimeFailover = defaults.zeroDowntimeFailover;
        }

        @CustomType.Setter
        public Builder headers(@Nullable List<String> headers) {

            this.headers = headers;
            return this;
        }
        public Builder headers(String... headers) {
            return headers(List.of(headers));
        }
        @CustomType.Setter
        public Builder requireAllHeaders(@Nullable Boolean requireAllHeaders) {

            this.requireAllHeaders = requireAllHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder samesite(@Nullable String samesite) {

            this.samesite = samesite;
            return this;
        }
        @CustomType.Setter
        public Builder secure(@Nullable String secure) {

            this.secure = secure;
            return this;
        }
        @CustomType.Setter
        public Builder zeroDowntimeFailover(@Nullable String zeroDowntimeFailover) {

            this.zeroDowntimeFailover = zeroDowntimeFailover;
            return this;
        }
        public LoadBalancerRuleOverrideSessionAffinityAttribute build() {
            final var _resultValue = new LoadBalancerRuleOverrideSessionAffinityAttribute();
            _resultValue.headers = headers;
            _resultValue.requireAllHeaders = requireAllHeaders;
            _resultValue.samesite = samesite;
            _resultValue.secure = secure;
            _resultValue.zeroDowntimeFailover = zeroDowntimeFailover;
            return _resultValue;
        }
    }
}
