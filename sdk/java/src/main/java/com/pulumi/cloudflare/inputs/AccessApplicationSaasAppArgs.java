// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.AccessApplicationSaasAppCustomAttributeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessApplicationSaasAppArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessApplicationSaasAppArgs Empty = new AccessApplicationSaasAppArgs();

    /**
     * The service provider&#39;s endpoint that is responsible for receiving and parsing a SAML assertion.
     * 
     */
    @Import(name="consumerServiceUrl", required=true)
    private Output<String> consumerServiceUrl;

    /**
     * @return The service provider&#39;s endpoint that is responsible for receiving and parsing a SAML assertion.
     * 
     */
    public Output<String> consumerServiceUrl() {
        return this.consumerServiceUrl;
    }

    /**
     * Custom attribute mapped from IDPs.
     * 
     */
    @Import(name="customAttributes")
    private @Nullable Output<List<AccessApplicationSaasAppCustomAttributeArgs>> customAttributes;

    /**
     * @return Custom attribute mapped from IDPs.
     * 
     */
    public Optional<Output<List<AccessApplicationSaasAppCustomAttributeArgs>>> customAttributes() {
        return Optional.ofNullable(this.customAttributes);
    }

    /**
     * The unique identifier for the SaaS application.
     * 
     */
    @Import(name="idpEntityId")
    private @Nullable Output<String> idpEntityId;

    /**
     * @return The unique identifier for the SaaS application.
     * 
     */
    public Optional<Output<String>> idpEntityId() {
        return Optional.ofNullable(this.idpEntityId);
    }

    /**
     * The format of the name identifier sent to the SaaS application. Defaults to `email`.
     * 
     */
    @Import(name="nameIdFormat")
    private @Nullable Output<String> nameIdFormat;

    /**
     * @return The format of the name identifier sent to the SaaS application. Defaults to `email`.
     * 
     */
    public Optional<Output<String>> nameIdFormat() {
        return Optional.ofNullable(this.nameIdFormat);
    }

    /**
     * The public certificate that will be used to verify identities.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return The public certificate that will be used to verify identities.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * A globally unique name for an identity or service provider.
     * 
     */
    @Import(name="spEntityId", required=true)
    private Output<String> spEntityId;

    /**
     * @return A globally unique name for an identity or service provider.
     * 
     */
    public Output<String> spEntityId() {
        return this.spEntityId;
    }

    /**
     * The endpoint where the SaaS application will send login requests.
     * 
     */
    @Import(name="ssoEndpoint")
    private @Nullable Output<String> ssoEndpoint;

    /**
     * @return The endpoint where the SaaS application will send login requests.
     * 
     */
    public Optional<Output<String>> ssoEndpoint() {
        return Optional.ofNullable(this.ssoEndpoint);
    }

    private AccessApplicationSaasAppArgs() {}

    private AccessApplicationSaasAppArgs(AccessApplicationSaasAppArgs $) {
        this.consumerServiceUrl = $.consumerServiceUrl;
        this.customAttributes = $.customAttributes;
        this.idpEntityId = $.idpEntityId;
        this.nameIdFormat = $.nameIdFormat;
        this.publicKey = $.publicKey;
        this.spEntityId = $.spEntityId;
        this.ssoEndpoint = $.ssoEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessApplicationSaasAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessApplicationSaasAppArgs $;

        public Builder() {
            $ = new AccessApplicationSaasAppArgs();
        }

        public Builder(AccessApplicationSaasAppArgs defaults) {
            $ = new AccessApplicationSaasAppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerServiceUrl The service provider&#39;s endpoint that is responsible for receiving and parsing a SAML assertion.
         * 
         * @return builder
         * 
         */
        public Builder consumerServiceUrl(Output<String> consumerServiceUrl) {
            $.consumerServiceUrl = consumerServiceUrl;
            return this;
        }

        /**
         * @param consumerServiceUrl The service provider&#39;s endpoint that is responsible for receiving and parsing a SAML assertion.
         * 
         * @return builder
         * 
         */
        public Builder consumerServiceUrl(String consumerServiceUrl) {
            return consumerServiceUrl(Output.of(consumerServiceUrl));
        }

        /**
         * @param customAttributes Custom attribute mapped from IDPs.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(@Nullable Output<List<AccessApplicationSaasAppCustomAttributeArgs>> customAttributes) {
            $.customAttributes = customAttributes;
            return this;
        }

        /**
         * @param customAttributes Custom attribute mapped from IDPs.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(List<AccessApplicationSaasAppCustomAttributeArgs> customAttributes) {
            return customAttributes(Output.of(customAttributes));
        }

        /**
         * @param customAttributes Custom attribute mapped from IDPs.
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(AccessApplicationSaasAppCustomAttributeArgs... customAttributes) {
            return customAttributes(List.of(customAttributes));
        }

        /**
         * @param idpEntityId The unique identifier for the SaaS application.
         * 
         * @return builder
         * 
         */
        public Builder idpEntityId(@Nullable Output<String> idpEntityId) {
            $.idpEntityId = idpEntityId;
            return this;
        }

        /**
         * @param idpEntityId The unique identifier for the SaaS application.
         * 
         * @return builder
         * 
         */
        public Builder idpEntityId(String idpEntityId) {
            return idpEntityId(Output.of(idpEntityId));
        }

        /**
         * @param nameIdFormat The format of the name identifier sent to the SaaS application. Defaults to `email`.
         * 
         * @return builder
         * 
         */
        public Builder nameIdFormat(@Nullable Output<String> nameIdFormat) {
            $.nameIdFormat = nameIdFormat;
            return this;
        }

        /**
         * @param nameIdFormat The format of the name identifier sent to the SaaS application. Defaults to `email`.
         * 
         * @return builder
         * 
         */
        public Builder nameIdFormat(String nameIdFormat) {
            return nameIdFormat(Output.of(nameIdFormat));
        }

        /**
         * @param publicKey The public certificate that will be used to verify identities.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey The public certificate that will be used to verify identities.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param spEntityId A globally unique name for an identity or service provider.
         * 
         * @return builder
         * 
         */
        public Builder spEntityId(Output<String> spEntityId) {
            $.spEntityId = spEntityId;
            return this;
        }

        /**
         * @param spEntityId A globally unique name for an identity or service provider.
         * 
         * @return builder
         * 
         */
        public Builder spEntityId(String spEntityId) {
            return spEntityId(Output.of(spEntityId));
        }

        /**
         * @param ssoEndpoint The endpoint where the SaaS application will send login requests.
         * 
         * @return builder
         * 
         */
        public Builder ssoEndpoint(@Nullable Output<String> ssoEndpoint) {
            $.ssoEndpoint = ssoEndpoint;
            return this;
        }

        /**
         * @param ssoEndpoint The endpoint where the SaaS application will send login requests.
         * 
         * @return builder
         * 
         */
        public Builder ssoEndpoint(String ssoEndpoint) {
            return ssoEndpoint(Output.of(ssoEndpoint));
        }

        public AccessApplicationSaasAppArgs build() {
            if ($.consumerServiceUrl == null) {
                throw new MissingRequiredPropertyException("AccessApplicationSaasAppArgs", "consumerServiceUrl");
            }
            if ($.spEntityId == null) {
                throw new MissingRequiredPropertyException("AccessApplicationSaasAppArgs", "spEntityId");
            }
            return $;
        }
    }

}
