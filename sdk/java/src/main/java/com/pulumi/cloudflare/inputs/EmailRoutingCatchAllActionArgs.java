// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class EmailRoutingCatchAllActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EmailRoutingCatchAllActionArgs Empty = new EmailRoutingCatchAllActionArgs();

    /**
     * Type of supported action. Available values: `drop`, `forward`, `worker`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of supported action. Available values: `drop`, `forward`, `worker`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * A list with items in the following form.
     * 
     */
    @Import(name="values", required=true)
    private Output<List<String>> values;

    /**
     * @return A list with items in the following form.
     * 
     */
    public Output<List<String>> values() {
        return this.values;
    }

    private EmailRoutingCatchAllActionArgs() {}

    private EmailRoutingCatchAllActionArgs(EmailRoutingCatchAllActionArgs $) {
        this.type = $.type;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailRoutingCatchAllActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailRoutingCatchAllActionArgs $;

        public Builder() {
            $ = new EmailRoutingCatchAllActionArgs();
        }

        public Builder(EmailRoutingCatchAllActionArgs defaults) {
            $ = new EmailRoutingCatchAllActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type Type of supported action. Available values: `drop`, `forward`, `worker`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of supported action. Available values: `drop`, `forward`, `worker`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param values A list with items in the following form.
         * 
         * @return builder
         * 
         */
        public Builder values(Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values A list with items in the following form.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values A list with items in the following form.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public EmailRoutingCatchAllActionArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("EmailRoutingCatchAllActionArgs", "type");
            }
            if ($.values == null) {
                throw new MissingRequiredPropertyException("EmailRoutingCatchAllActionArgs", "values");
            }
            return $;
        }
    }

}
