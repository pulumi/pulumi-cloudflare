// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetPagesProjectsResultBuildConfig;
import com.pulumi.cloudflare.outputs.GetPagesProjectsResultDeploymentTrigger;
import com.pulumi.cloudflare.outputs.GetPagesProjectsResultEnvVars;
import com.pulumi.cloudflare.outputs.GetPagesProjectsResultLatestStage;
import com.pulumi.cloudflare.outputs.GetPagesProjectsResultSource;
import com.pulumi.cloudflare.outputs.GetPagesProjectsResultStage;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPagesProjectsResult {
    /**
     * @return A list of alias URLs pointing to this deployment.
     * 
     */
    private List<String> aliases;
    /**
     * @return Configs for the project build process.
     * 
     */
    private GetPagesProjectsResultBuildConfig buildConfig;
    /**
     * @return When the deployment was created.
     * 
     */
    private String createdOn;
    /**
     * @return Info about what caused the deployment.
     * 
     */
    private GetPagesProjectsResultDeploymentTrigger deploymentTrigger;
    /**
     * @return A dict of env variables to build this deploy.
     * 
     */
    private Map<String,GetPagesProjectsResultEnvVars> envVars;
    /**
     * @return Type of deploy.
     * 
     */
    private String environment;
    /**
     * @return Id of the deployment.
     * 
     */
    private String id;
    /**
     * @return If the deployment has been skipped.
     * 
     */
    private Boolean isSkipped;
    /**
     * @return The status of the deployment.
     * 
     */
    private GetPagesProjectsResultLatestStage latestStage;
    /**
     * @return When the deployment was last modified.
     * 
     */
    private String modifiedOn;
    /**
     * @return Id of the project.
     * 
     */
    private String projectId;
    /**
     * @return Name of the project.
     * 
     */
    private String projectName;
    /**
     * @return Short Id (8 character) of the deployment.
     * 
     */
    private String shortId;
    private GetPagesProjectsResultSource source;
    /**
     * @return List of past stages.
     * 
     */
    private List<GetPagesProjectsResultStage> stages;
    /**
     * @return The live URL to view this deployment.
     * 
     */
    private String url;

    private GetPagesProjectsResult() {}
    /**
     * @return A list of alias URLs pointing to this deployment.
     * 
     */
    public List<String> aliases() {
        return this.aliases;
    }
    /**
     * @return Configs for the project build process.
     * 
     */
    public GetPagesProjectsResultBuildConfig buildConfig() {
        return this.buildConfig;
    }
    /**
     * @return When the deployment was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return Info about what caused the deployment.
     * 
     */
    public GetPagesProjectsResultDeploymentTrigger deploymentTrigger() {
        return this.deploymentTrigger;
    }
    /**
     * @return A dict of env variables to build this deploy.
     * 
     */
    public Map<String,GetPagesProjectsResultEnvVars> envVars() {
        return this.envVars;
    }
    /**
     * @return Type of deploy.
     * 
     */
    public String environment() {
        return this.environment;
    }
    /**
     * @return Id of the deployment.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If the deployment has been skipped.
     * 
     */
    public Boolean isSkipped() {
        return this.isSkipped;
    }
    /**
     * @return The status of the deployment.
     * 
     */
    public GetPagesProjectsResultLatestStage latestStage() {
        return this.latestStage;
    }
    /**
     * @return When the deployment was last modified.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return Id of the project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Name of the project.
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return Short Id (8 character) of the deployment.
     * 
     */
    public String shortId() {
        return this.shortId;
    }
    public GetPagesProjectsResultSource source() {
        return this.source;
    }
    /**
     * @return List of past stages.
     * 
     */
    public List<GetPagesProjectsResultStage> stages() {
        return this.stages;
    }
    /**
     * @return The live URL to view this deployment.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPagesProjectsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> aliases;
        private GetPagesProjectsResultBuildConfig buildConfig;
        private String createdOn;
        private GetPagesProjectsResultDeploymentTrigger deploymentTrigger;
        private Map<String,GetPagesProjectsResultEnvVars> envVars;
        private String environment;
        private String id;
        private Boolean isSkipped;
        private GetPagesProjectsResultLatestStage latestStage;
        private String modifiedOn;
        private String projectId;
        private String projectName;
        private String shortId;
        private GetPagesProjectsResultSource source;
        private List<GetPagesProjectsResultStage> stages;
        private String url;
        public Builder() {}
        public Builder(GetPagesProjectsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aliases = defaults.aliases;
    	      this.buildConfig = defaults.buildConfig;
    	      this.createdOn = defaults.createdOn;
    	      this.deploymentTrigger = defaults.deploymentTrigger;
    	      this.envVars = defaults.envVars;
    	      this.environment = defaults.environment;
    	      this.id = defaults.id;
    	      this.isSkipped = defaults.isSkipped;
    	      this.latestStage = defaults.latestStage;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.projectId = defaults.projectId;
    	      this.projectName = defaults.projectName;
    	      this.shortId = defaults.shortId;
    	      this.source = defaults.source;
    	      this.stages = defaults.stages;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder aliases(List<String> aliases) {
            if (aliases == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "aliases");
            }
            this.aliases = aliases;
            return this;
        }
        public Builder aliases(String... aliases) {
            return aliases(List.of(aliases));
        }
        @CustomType.Setter
        public Builder buildConfig(GetPagesProjectsResultBuildConfig buildConfig) {
            if (buildConfig == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "buildConfig");
            }
            this.buildConfig = buildConfig;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentTrigger(GetPagesProjectsResultDeploymentTrigger deploymentTrigger) {
            if (deploymentTrigger == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "deploymentTrigger");
            }
            this.deploymentTrigger = deploymentTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder envVars(Map<String,GetPagesProjectsResultEnvVars> envVars) {
            if (envVars == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "envVars");
            }
            this.envVars = envVars;
            return this;
        }
        @CustomType.Setter
        public Builder environment(String environment) {
            if (environment == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "environment");
            }
            this.environment = environment;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isSkipped(Boolean isSkipped) {
            if (isSkipped == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "isSkipped");
            }
            this.isSkipped = isSkipped;
            return this;
        }
        @CustomType.Setter
        public Builder latestStage(GetPagesProjectsResultLatestStage latestStage) {
            if (latestStage == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "latestStage");
            }
            this.latestStage = latestStage;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder shortId(String shortId) {
            if (shortId == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "shortId");
            }
            this.shortId = shortId;
            return this;
        }
        @CustomType.Setter
        public Builder source(GetPagesProjectsResultSource source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder stages(List<GetPagesProjectsResultStage> stages) {
            if (stages == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "stages");
            }
            this.stages = stages;
            return this;
        }
        public Builder stages(GetPagesProjectsResultStage... stages) {
            return stages(List.of(stages));
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectsResult", "url");
            }
            this.url = url;
            return this;
        }
        public GetPagesProjectsResult build() {
            final var _resultValue = new GetPagesProjectsResult();
            _resultValue.aliases = aliases;
            _resultValue.buildConfig = buildConfig;
            _resultValue.createdOn = createdOn;
            _resultValue.deploymentTrigger = deploymentTrigger;
            _resultValue.envVars = envVars;
            _resultValue.environment = environment;
            _resultValue.id = id;
            _resultValue.isSkipped = isSkipped;
            _resultValue.latestStage = latestStage;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.projectId = projectId;
            _resultValue.projectName = projectName;
            _resultValue.shortId = shortId;
            _resultValue.source = source;
            _resultValue.stages = stages;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
