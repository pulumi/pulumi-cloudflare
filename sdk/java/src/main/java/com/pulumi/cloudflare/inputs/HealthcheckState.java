// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.HealthcheckHttpConfigArgs;
import com.pulumi.cloudflare.inputs.HealthcheckTcpConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HealthcheckState extends com.pulumi.resources.ResourceArgs {

    public static final HealthcheckState Empty = new HealthcheckState();

    /**
     * The hostname or IP address of the origin server to run health checks on.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The hostname or IP address of the origin server to run health checks on.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
     * 
     */
    @Import(name="checkRegions")
    private @Nullable Output<List<String>> checkRegions;

    /**
     * @return A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
     * 
     */
    public Optional<Output<List<String>>> checkRegions() {
        return Optional.ofNullable(this.checkRegions);
    }

    /**
     * The number of consecutive fails required from a health check before changing the health to unhealthy.
     * 
     */
    @Import(name="consecutiveFails")
    private @Nullable Output<Integer> consecutiveFails;

    /**
     * @return The number of consecutive fails required from a health check before changing the health to unhealthy.
     * 
     */
    public Optional<Output<Integer>> consecutiveFails() {
        return Optional.ofNullable(this.consecutiveFails);
    }

    /**
     * The number of consecutive successes required from a health check before changing the health to healthy.
     * 
     */
    @Import(name="consecutiveSuccesses")
    private @Nullable Output<Integer> consecutiveSuccesses;

    /**
     * @return The number of consecutive successes required from a health check before changing the health to healthy.
     * 
     */
    public Optional<Output<Integer>> consecutiveSuccesses() {
        return Optional.ofNullable(this.consecutiveSuccesses);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * A human-readable description of the health check.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human-readable description of the health check.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The current failure reason if status is unhealthy.
     * 
     */
    @Import(name="failureReason")
    private @Nullable Output<String> failureReason;

    /**
     * @return The current failure reason if status is unhealthy.
     * 
     */
    public Optional<Output<String>> failureReason() {
        return Optional.ofNullable(this.failureReason);
    }

    /**
     * Parameters specific to an HTTP or HTTPS health check.
     * 
     */
    @Import(name="httpConfig")
    private @Nullable Output<HealthcheckHttpConfigArgs> httpConfig;

    /**
     * @return Parameters specific to an HTTP or HTTPS health check.
     * 
     */
    public Optional<Output<HealthcheckHttpConfigArgs>> httpConfig() {
        return Optional.ofNullable(this.httpConfig);
    }

    /**
     * The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     * 
     */
    @Import(name="retries")
    private @Nullable Output<Integer> retries;

    /**
     * @return The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * The current status of the origin server according to the health check.
     * Available values: &#34;unknown&#34;, &#34;healthy&#34;, &#34;unhealthy&#34;, &#34;suspended&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The current status of the origin server according to the health check.
     * Available values: &#34;unknown&#34;, &#34;healthy&#34;, &#34;unhealthy&#34;, &#34;suspended&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * If suspended, no health checks are sent to the origin.
     * 
     */
    @Import(name="suspended")
    private @Nullable Output<Boolean> suspended;

    /**
     * @return If suspended, no health checks are sent to the origin.
     * 
     */
    public Optional<Output<Boolean>> suspended() {
        return Optional.ofNullable(this.suspended);
    }

    /**
     * Parameters specific to TCP health check.
     * 
     */
    @Import(name="tcpConfig")
    private @Nullable Output<HealthcheckTcpConfigArgs> tcpConfig;

    /**
     * @return Parameters specific to TCP health check.
     * 
     */
    public Optional<Output<HealthcheckTcpConfigArgs>> tcpConfig() {
        return Optional.ofNullable(this.tcpConfig);
    }

    /**
     * The timeout (in seconds) before marking the health check as failed.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The timeout (in seconds) before marking the health check as failed.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The protocol to use for the health check. Currently supported protocols are &#39;HTTP&#39;, &#39;HTTPS&#39; and &#39;TCP&#39;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The protocol to use for the health check. Currently supported protocols are &#39;HTTP&#39;, &#39;HTTPS&#39; and &#39;TCP&#39;.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private HealthcheckState() {}

    private HealthcheckState(HealthcheckState $) {
        this.address = $.address;
        this.checkRegions = $.checkRegions;
        this.consecutiveFails = $.consecutiveFails;
        this.consecutiveSuccesses = $.consecutiveSuccesses;
        this.createdOn = $.createdOn;
        this.description = $.description;
        this.failureReason = $.failureReason;
        this.httpConfig = $.httpConfig;
        this.interval = $.interval;
        this.modifiedOn = $.modifiedOn;
        this.name = $.name;
        this.retries = $.retries;
        this.status = $.status;
        this.suspended = $.suspended;
        this.tcpConfig = $.tcpConfig;
        this.timeout = $.timeout;
        this.type = $.type;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HealthcheckState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HealthcheckState $;

        public Builder() {
            $ = new HealthcheckState();
        }

        public Builder(HealthcheckState defaults) {
            $ = new HealthcheckState(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The hostname or IP address of the origin server to run health checks on.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The hostname or IP address of the origin server to run health checks on.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param checkRegions A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
         * 
         * @return builder
         * 
         */
        public Builder checkRegions(@Nullable Output<List<String>> checkRegions) {
            $.checkRegions = checkRegions;
            return this;
        }

        /**
         * @param checkRegions A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
         * 
         * @return builder
         * 
         */
        public Builder checkRegions(List<String> checkRegions) {
            return checkRegions(Output.of(checkRegions));
        }

        /**
         * @param checkRegions A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
         * 
         * @return builder
         * 
         */
        public Builder checkRegions(String... checkRegions) {
            return checkRegions(List.of(checkRegions));
        }

        /**
         * @param consecutiveFails The number of consecutive fails required from a health check before changing the health to unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder consecutiveFails(@Nullable Output<Integer> consecutiveFails) {
            $.consecutiveFails = consecutiveFails;
            return this;
        }

        /**
         * @param consecutiveFails The number of consecutive fails required from a health check before changing the health to unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder consecutiveFails(Integer consecutiveFails) {
            return consecutiveFails(Output.of(consecutiveFails));
        }

        /**
         * @param consecutiveSuccesses The number of consecutive successes required from a health check before changing the health to healthy.
         * 
         * @return builder
         * 
         */
        public Builder consecutiveSuccesses(@Nullable Output<Integer> consecutiveSuccesses) {
            $.consecutiveSuccesses = consecutiveSuccesses;
            return this;
        }

        /**
         * @param consecutiveSuccesses The number of consecutive successes required from a health check before changing the health to healthy.
         * 
         * @return builder
         * 
         */
        public Builder consecutiveSuccesses(Integer consecutiveSuccesses) {
            return consecutiveSuccesses(Output.of(consecutiveSuccesses));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param description A human-readable description of the health check.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human-readable description of the health check.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param failureReason The current failure reason if status is unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder failureReason(@Nullable Output<String> failureReason) {
            $.failureReason = failureReason;
            return this;
        }

        /**
         * @param failureReason The current failure reason if status is unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder failureReason(String failureReason) {
            return failureReason(Output.of(failureReason));
        }

        /**
         * @param httpConfig Parameters specific to an HTTP or HTTPS health check.
         * 
         * @return builder
         * 
         */
        public Builder httpConfig(@Nullable Output<HealthcheckHttpConfigArgs> httpConfig) {
            $.httpConfig = httpConfig;
            return this;
        }

        /**
         * @param httpConfig Parameters specific to an HTTP or HTTPS health check.
         * 
         * @return builder
         * 
         */
        public Builder httpConfig(HealthcheckHttpConfigArgs httpConfig) {
            return httpConfig(Output.of(httpConfig));
        }

        /**
         * @param interval The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param name A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param retries The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param status The current status of the origin server according to the health check.
         * Available values: &#34;unknown&#34;, &#34;healthy&#34;, &#34;unhealthy&#34;, &#34;suspended&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current status of the origin server according to the health check.
         * Available values: &#34;unknown&#34;, &#34;healthy&#34;, &#34;unhealthy&#34;, &#34;suspended&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param suspended If suspended, no health checks are sent to the origin.
         * 
         * @return builder
         * 
         */
        public Builder suspended(@Nullable Output<Boolean> suspended) {
            $.suspended = suspended;
            return this;
        }

        /**
         * @param suspended If suspended, no health checks are sent to the origin.
         * 
         * @return builder
         * 
         */
        public Builder suspended(Boolean suspended) {
            return suspended(Output.of(suspended));
        }

        /**
         * @param tcpConfig Parameters specific to TCP health check.
         * 
         * @return builder
         * 
         */
        public Builder tcpConfig(@Nullable Output<HealthcheckTcpConfigArgs> tcpConfig) {
            $.tcpConfig = tcpConfig;
            return this;
        }

        /**
         * @param tcpConfig Parameters specific to TCP health check.
         * 
         * @return builder
         * 
         */
        public Builder tcpConfig(HealthcheckTcpConfigArgs tcpConfig) {
            return tcpConfig(Output.of(tcpConfig));
        }

        /**
         * @param timeout The timeout (in seconds) before marking the health check as failed.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The timeout (in seconds) before marking the health check as failed.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param type The protocol to use for the health check. Currently supported protocols are &#39;HTTP&#39;, &#39;HTTPS&#39; and &#39;TCP&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The protocol to use for the health check. Currently supported protocols are &#39;HTTP&#39;, &#39;HTTPS&#39; and &#39;TCP&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public HealthcheckState build() {
            return $;
        }
    }

}
