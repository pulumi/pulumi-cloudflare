// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetAccessRulesConfiguration;
import com.pulumi.cloudflare.outputs.GetAccessRulesResult;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAccessRulesInvokeResult {
    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    private @Nullable String accountId;
    private @Nullable GetAccessRulesConfiguration configuration;
    /**
     * @return Defines the direction used to sort returned rules.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    private @Nullable String direction;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Defines the search requirements. When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
     * Available values: &#34;any&#34;, &#34;all&#34;.
     * 
     */
    private String match;
    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    private @Nullable Integer maxItems;
    /**
     * @return The action to apply to a matched request.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
     * 
     */
    private @Nullable String mode;
    /**
     * @return Defines the string to search for in the notes of existing IP Access rules.
     * Notes: For example, the string &#39;attack&#39; would match IP Access rules with notes &#39;Attack 26/02&#39; and &#39;Attack 27/02&#39;. The search is case insensitive.
     * 
     */
    private @Nullable String notes;
    /**
     * @return Defines the field used to sort returned rules.
     * Available values: &#34;configuration.target&#34;, &#34;configuration.value&#34;, &#34;mode&#34;.
     * 
     */
    private @Nullable String order;
    /**
     * @return The items returned by the data source
     * 
     */
    private List<GetAccessRulesResult> results;
    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    private @Nullable String zoneId;

    private GetAccessRulesInvokeResult() {}
    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }
    public Optional<GetAccessRulesConfiguration> configuration() {
        return Optional.ofNullable(this.configuration);
    }
    /**
     * @return Defines the direction used to sort returned rules.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Defines the search requirements. When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
     * Available values: &#34;any&#34;, &#34;all&#34;.
     * 
     */
    public String match() {
        return this.match;
    }
    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Integer> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }
    /**
     * @return The action to apply to a matched request.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return Defines the string to search for in the notes of existing IP Access rules.
     * Notes: For example, the string &#39;attack&#39; would match IP Access rules with notes &#39;Attack 26/02&#39; and &#39;Attack 27/02&#39;. The search is case insensitive.
     * 
     */
    public Optional<String> notes() {
        return Optional.ofNullable(this.notes);
    }
    /**
     * @return Defines the field used to sort returned rules.
     * Available values: &#34;configuration.target&#34;, &#34;configuration.value&#34;, &#34;mode&#34;.
     * 
     */
    public Optional<String> order() {
        return Optional.ofNullable(this.order);
    }
    /**
     * @return The items returned by the data source
     * 
     */
    public List<GetAccessRulesResult> results() {
        return this.results;
    }
    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    public Optional<String> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccessRulesInvokeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountId;
        private @Nullable GetAccessRulesConfiguration configuration;
        private @Nullable String direction;
        private String id;
        private String match;
        private @Nullable Integer maxItems;
        private @Nullable String mode;
        private @Nullable String notes;
        private @Nullable String order;
        private List<GetAccessRulesResult> results;
        private @Nullable String zoneId;
        public Builder() {}
        public Builder(GetAccessRulesInvokeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.configuration = defaults.configuration;
    	      this.direction = defaults.direction;
    	      this.id = defaults.id;
    	      this.match = defaults.match;
    	      this.maxItems = defaults.maxItems;
    	      this.mode = defaults.mode;
    	      this.notes = defaults.notes;
    	      this.order = defaults.order;
    	      this.results = defaults.results;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder accountId(@Nullable String accountId) {

            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder configuration(@Nullable GetAccessRulesConfiguration configuration) {

            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder direction(@Nullable String direction) {

            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAccessRulesInvokeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder match(String match) {
            if (match == null) {
              throw new MissingRequiredPropertyException("GetAccessRulesInvokeResult", "match");
            }
            this.match = match;
            return this;
        }
        @CustomType.Setter
        public Builder maxItems(@Nullable Integer maxItems) {

            this.maxItems = maxItems;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder notes(@Nullable String notes) {

            this.notes = notes;
            return this;
        }
        @CustomType.Setter
        public Builder order(@Nullable String order) {

            this.order = order;
            return this;
        }
        @CustomType.Setter
        public Builder results(List<GetAccessRulesResult> results) {
            if (results == null) {
              throw new MissingRequiredPropertyException("GetAccessRulesInvokeResult", "results");
            }
            this.results = results;
            return this;
        }
        public Builder results(GetAccessRulesResult... results) {
            return results(List.of(results));
        }
        @CustomType.Setter
        public Builder zoneId(@Nullable String zoneId) {

            this.zoneId = zoneId;
            return this;
        }
        public GetAccessRulesInvokeResult build() {
            final var _resultValue = new GetAccessRulesInvokeResult();
            _resultValue.accountId = accountId;
            _resultValue.configuration = configuration;
            _resultValue.direction = direction;
            _resultValue.id = id;
            _resultValue.match = match;
            _resultValue.maxItems = maxItems;
            _resultValue.mode = mode;
            _resultValue.notes = notes;
            _resultValue.order = order;
            _resultValue.results = results;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
