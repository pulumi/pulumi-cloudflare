// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkersScriptAssetsConfig {
    /**
     * @return Determines the redirects and rewrites of requests for HTML content.
     * 
     */
    private @Nullable String htmlHandling;
    /**
     * @return Determines the response when a request does not match a static asset, and there is no Worker script.
     * 
     */
    private @Nullable String notFoundHandling;
    /**
     * @return When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
     * 
     */
    private @Nullable Boolean runWorkerFirst;
    /**
     * @return When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
     * 
     */
    private @Nullable Boolean serveDirectly;

    private WorkersScriptAssetsConfig() {}
    /**
     * @return Determines the redirects and rewrites of requests for HTML content.
     * 
     */
    public Optional<String> htmlHandling() {
        return Optional.ofNullable(this.htmlHandling);
    }
    /**
     * @return Determines the response when a request does not match a static asset, and there is no Worker script.
     * 
     */
    public Optional<String> notFoundHandling() {
        return Optional.ofNullable(this.notFoundHandling);
    }
    /**
     * @return When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
     * 
     */
    public Optional<Boolean> runWorkerFirst() {
        return Optional.ofNullable(this.runWorkerFirst);
    }
    /**
     * @return When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
     * 
     */
    public Optional<Boolean> serveDirectly() {
        return Optional.ofNullable(this.serveDirectly);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkersScriptAssetsConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String htmlHandling;
        private @Nullable String notFoundHandling;
        private @Nullable Boolean runWorkerFirst;
        private @Nullable Boolean serveDirectly;
        public Builder() {}
        public Builder(WorkersScriptAssetsConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.htmlHandling = defaults.htmlHandling;
    	      this.notFoundHandling = defaults.notFoundHandling;
    	      this.runWorkerFirst = defaults.runWorkerFirst;
    	      this.serveDirectly = defaults.serveDirectly;
        }

        @CustomType.Setter
        public Builder htmlHandling(@Nullable String htmlHandling) {

            this.htmlHandling = htmlHandling;
            return this;
        }
        @CustomType.Setter
        public Builder notFoundHandling(@Nullable String notFoundHandling) {

            this.notFoundHandling = notFoundHandling;
            return this;
        }
        @CustomType.Setter
        public Builder runWorkerFirst(@Nullable Boolean runWorkerFirst) {

            this.runWorkerFirst = runWorkerFirst;
            return this;
        }
        @CustomType.Setter
        public Builder serveDirectly(@Nullable Boolean serveDirectly) {

            this.serveDirectly = serveDirectly;
            return this;
        }
        public WorkersScriptAssetsConfig build() {
            final var _resultValue = new WorkersScriptAssetsConfig();
            _resultValue.htmlHandling = htmlHandling;
            _resultValue.notFoundHandling = notFoundHandling;
            _resultValue.runWorkerFirst = runWorkerFirst;
            _resultValue.serveDirectly = serveDirectly;
            return _resultValue;
        }
    }
}
