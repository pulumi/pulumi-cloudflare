// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionalHostnameArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionalHostnameArgs Empty = new RegionalHostnameArgs();

    /**
     * DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * Identifying key for the region
     * 
     */
    @Import(name="regionKey", required=true)
    private Output<String> regionKey;

    /**
     * @return Identifying key for the region
     * 
     */
    public Output<String> regionKey() {
        return this.regionKey;
    }

    /**
     * Configure which routing method to use for the regional hostname
     * 
     */
    @Import(name="routing")
    private @Nullable Output<String> routing;

    /**
     * @return Configure which routing method to use for the regional hostname
     * 
     */
    public Optional<Output<String>> routing() {
        return Optional.ofNullable(this.routing);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private RegionalHostnameArgs() {}

    private RegionalHostnameArgs(RegionalHostnameArgs $) {
        this.hostname = $.hostname;
        this.regionKey = $.regionKey;
        this.routing = $.routing;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionalHostnameArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionalHostnameArgs $;

        public Builder() {
            $ = new RegionalHostnameArgs();
        }

        public Builder(RegionalHostnameArgs defaults) {
            $ = new RegionalHostnameArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostname DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param regionKey Identifying key for the region
         * 
         * @return builder
         * 
         */
        public Builder regionKey(Output<String> regionKey) {
            $.regionKey = regionKey;
            return this;
        }

        /**
         * @param regionKey Identifying key for the region
         * 
         * @return builder
         * 
         */
        public Builder regionKey(String regionKey) {
            return regionKey(Output.of(regionKey));
        }

        /**
         * @param routing Configure which routing method to use for the regional hostname
         * 
         * @return builder
         * 
         */
        public Builder routing(@Nullable Output<String> routing) {
            $.routing = routing;
            return this;
        }

        /**
         * @param routing Configure which routing method to use for the regional hostname
         * 
         * @return builder
         * 
         */
        public Builder routing(String routing) {
            return routing(Output.of(routing));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public RegionalHostnameArgs build() {
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("RegionalHostnameArgs", "hostname");
            }
            if ($.regionKey == null) {
                throw new MissingRequiredPropertyException("RegionalHostnameArgs", "regionKey");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("RegionalHostnameArgs", "zoneId");
            }
            return $;
        }
    }

}
