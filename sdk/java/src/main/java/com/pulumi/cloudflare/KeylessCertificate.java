// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.KeylessCertificateArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.KeylessCertificateState;
import com.pulumi.cloudflare.outputs.KeylessCertificateTunnel;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/keylessCertificate:KeylessCertificate example &#39;&lt;zone_id&gt;/&lt;keyless_certificate_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/keylessCertificate:KeylessCertificate")
public class KeylessCertificate extends com.pulumi.resources.CustomResource {
    /**
     * A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
     * Available values: &#34;ubiquitous&#34;, &#34;optimal&#34;, &#34;force&#34;.
     * 
     */
    @Export(name="bundleMethod", refs={String.class}, tree="[0]")
    private Output<String> bundleMethod;

    /**
     * @return A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
     * Available values: &#34;ubiquitous&#34;, &#34;optimal&#34;, &#34;force&#34;.
     * 
     */
    public Output<String> bundleMethod() {
        return this.bundleMethod;
    }
    /**
     * The zone&#39;s SSL certificate or SSL certificate and intermediate(s).
     * 
     */
    @Export(name="certificate", refs={String.class}, tree="[0]")
    private Output<String> certificate;

    /**
     * @return The zone&#39;s SSL certificate or SSL certificate and intermediate(s).
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }
    /**
     * When the Keyless SSL was created.
     * 
     */
    @Export(name="createdOn", refs={String.class}, tree="[0]")
    private Output<String> createdOn;

    /**
     * @return When the Keyless SSL was created.
     * 
     */
    public Output<String> createdOn() {
        return this.createdOn;
    }
    /**
     * Whether or not the Keyless SSL is on or off.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Whether or not the Keyless SSL is on or off.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * The keyless SSL name.
     * 
     */
    @Export(name="host", refs={String.class}, tree="[0]")
    private Output<String> host;

    /**
     * @return The keyless SSL name.
     * 
     */
    public Output<String> host() {
        return this.host;
    }
    /**
     * When the Keyless SSL was last modified.
     * 
     */
    @Export(name="modifiedOn", refs={String.class}, tree="[0]")
    private Output<String> modifiedOn;

    /**
     * @return When the Keyless SSL was last modified.
     * 
     */
    public Output<String> modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * The keyless SSL name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> name;

    /**
     * @return The keyless SSL name.
     * 
     */
    public Output<Optional<String>> name() {
        return Codegen.optional(this.name);
    }
    /**
     * Available permissions for the Keyless SSL for the current user requesting the item.
     * 
     */
    @Export(name="permissions", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> permissions;

    /**
     * @return Available permissions for the Keyless SSL for the current user requesting the item.
     * 
     */
    public Output<List<String>> permissions() {
        return this.permissions;
    }
    /**
     * The keyless SSL port used to communicate between Cloudflare and the client&#39;s Keyless SSL server.
     * 
     */
    @Export(name="port", refs={Double.class}, tree="[0]")
    private Output<Double> port;

    /**
     * @return The keyless SSL port used to communicate between Cloudflare and the client&#39;s Keyless SSL server.
     * 
     */
    public Output<Double> port() {
        return this.port;
    }
    /**
     * Status of the Keyless SSL.
     * Available values: &#34;active&#34;, &#34;deleted&#34;.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the Keyless SSL.
     * Available values: &#34;active&#34;, &#34;deleted&#34;.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Configuration for using Keyless SSL through a Cloudflare Tunnel
     * 
     */
    @Export(name="tunnel", refs={KeylessCertificateTunnel.class}, tree="[0]")
    private Output<KeylessCertificateTunnel> tunnel;

    /**
     * @return Configuration for using Keyless SSL through a Cloudflare Tunnel
     * 
     */
    public Output<KeylessCertificateTunnel> tunnel() {
        return this.tunnel;
    }
    /**
     * Identifier
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KeylessCertificate(java.lang.String name) {
        this(name, KeylessCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KeylessCertificate(java.lang.String name, KeylessCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KeylessCertificate(java.lang.String name, KeylessCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/keylessCertificate:KeylessCertificate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private KeylessCertificate(java.lang.String name, Output<java.lang.String> id, @Nullable KeylessCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/keylessCertificate:KeylessCertificate", name, state, makeResourceOptions(options, id), false);
    }

    private static KeylessCertificateArgs makeArgs(KeylessCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? KeylessCertificateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KeylessCertificate get(java.lang.String name, Output<java.lang.String> id, @Nullable KeylessCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KeylessCertificate(name, id, state, options);
    }
}
