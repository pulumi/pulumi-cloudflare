// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.RateLimitActionArgs;
import com.pulumi.cloudflare.inputs.RateLimitMatchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class RateLimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final RateLimitArgs Empty = new RateLimitArgs();

    /**
     * The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    @Import(name="action", required=true)
    private Output<RateLimitActionArgs> action;

    /**
     * @return The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    public Output<RateLimitActionArgs> action() {
        return this.action;
    }

    /**
     * Determines which traffic the rate limit counts towards the threshold.
     * 
     */
    @Import(name="match", required=true)
    private Output<RateLimitMatchArgs> match;

    /**
     * @return Determines which traffic the rate limit counts towards the threshold.
     * 
     */
    public Output<RateLimitMatchArgs> match() {
        return this.match;
    }

    /**
     * The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     * 
     */
    @Import(name="period", required=true)
    private Output<Double> period;

    /**
     * @return The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     * 
     */
    public Output<Double> period() {
        return this.period;
    }

    /**
     * The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    /**
     * @return The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     * 
     */
    public Output<Double> threshold() {
        return this.threshold;
    }

    /**
     * Defines an identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Defines an identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private RateLimitArgs() {}

    private RateLimitArgs(RateLimitArgs $) {
        this.action = $.action;
        this.match = $.match;
        this.period = $.period;
        this.threshold = $.threshold;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RateLimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RateLimitArgs $;

        public Builder() {
            $ = new RateLimitArgs();
        }

        public Builder(RateLimitArgs defaults) {
            $ = new RateLimitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to perform when the threshold of matched traffic within the configured period is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<RateLimitActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to perform when the threshold of matched traffic within the configured period is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder action(RateLimitActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param match Determines which traffic the rate limit counts towards the threshold.
         * 
         * @return builder
         * 
         */
        public Builder match(Output<RateLimitMatchArgs> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match Determines which traffic the rate limit counts towards the threshold.
         * 
         * @return builder
         * 
         */
        public Builder match(RateLimitMatchArgs match) {
            return match(Output.of(match));
        }

        /**
         * @param period The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
         * 
         * @return builder
         * 
         */
        public Builder period(Output<Double> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
         * 
         * @return builder
         * 
         */
        public Builder period(Double period) {
            return period(Output.of(period));
        }

        /**
         * @param threshold The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public RateLimitArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("RateLimitArgs", "action");
            }
            if ($.match == null) {
                throw new MissingRequiredPropertyException("RateLimitArgs", "match");
            }
            if ($.period == null) {
                throw new MissingRequiredPropertyException("RateLimitArgs", "period");
            }
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("RateLimitArgs", "threshold");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("RateLimitArgs", "zoneId");
            }
            return $;
        }
    }

}
