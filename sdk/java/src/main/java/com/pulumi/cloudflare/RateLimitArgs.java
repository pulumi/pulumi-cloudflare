// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.RateLimitActionArgs;
import com.pulumi.cloudflare.inputs.RateLimitCorrelateArgs;
import com.pulumi.cloudflare.inputs.RateLimitMatchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RateLimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final RateLimitArgs Empty = new RateLimitArgs();

    /**
     * The action to be performed when the threshold of matched traffic within the period defined is exceeded.
     * 
     */
    @Import(name="action", required=true)
    private Output<RateLimitActionArgs> action;

    /**
     * @return The action to be performed when the threshold of matched traffic within the period defined is exceeded.
     * 
     */
    public Output<RateLimitActionArgs> action() {
        return this.action;
    }

    @Import(name="bypassUrlPatterns")
    private @Nullable Output<List<String>> bypassUrlPatterns;

    public Optional<Output<List<String>>> bypassUrlPatterns() {
        return Optional.ofNullable(this.bypassUrlPatterns);
    }

    /**
     * Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
     * 
     */
    @Import(name="correlate")
    private @Nullable Output<RateLimitCorrelateArgs> correlate;

    /**
     * @return Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
     * 
     */
    public Optional<Output<RateLimitCorrelateArgs>> correlate() {
        return Optional.ofNullable(this.correlate);
    }

    /**
     * A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether this ratelimit is currently disabled. Defaults to `false`.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Whether this ratelimit is currently disabled. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone.
     * 
     */
    @Import(name="match")
    private @Nullable Output<RateLimitMatchArgs> match;

    /**
     * @return Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone.
     * 
     */
    public Optional<Output<RateLimitMatchArgs>> match() {
        return Optional.ofNullable(this.match);
    }

    /**
     * The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed.
     * 
     */
    @Import(name="period", required=true)
    private Output<Integer> period;

    /**
     * @return The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed.
     * 
     */
    public Output<Integer> period() {
        return this.period;
    }

    /**
     * The threshold that triggers the rate limit mitigations, combine with period.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Integer> threshold;

    /**
     * @return The threshold that triggers the rate limit mitigations, combine with period.
     * 
     */
    public Output<Integer> threshold() {
        return this.threshold;
    }

    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private RateLimitArgs() {}

    private RateLimitArgs(RateLimitArgs $) {
        this.action = $.action;
        this.bypassUrlPatterns = $.bypassUrlPatterns;
        this.correlate = $.correlate;
        this.description = $.description;
        this.disabled = $.disabled;
        this.match = $.match;
        this.period = $.period;
        this.threshold = $.threshold;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RateLimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RateLimitArgs $;

        public Builder() {
            $ = new RateLimitArgs();
        }

        public Builder(RateLimitArgs defaults) {
            $ = new RateLimitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to be performed when the threshold of matched traffic within the period defined is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<RateLimitActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to be performed when the threshold of matched traffic within the period defined is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder action(RateLimitActionArgs action) {
            return action(Output.of(action));
        }

        public Builder bypassUrlPatterns(@Nullable Output<List<String>> bypassUrlPatterns) {
            $.bypassUrlPatterns = bypassUrlPatterns;
            return this;
        }

        public Builder bypassUrlPatterns(List<String> bypassUrlPatterns) {
            return bypassUrlPatterns(Output.of(bypassUrlPatterns));
        }

        public Builder bypassUrlPatterns(String... bypassUrlPatterns) {
            return bypassUrlPatterns(List.of(bypassUrlPatterns));
        }

        /**
         * @param correlate Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
         * 
         * @return builder
         * 
         */
        public Builder correlate(@Nullable Output<RateLimitCorrelateArgs> correlate) {
            $.correlate = correlate;
            return this;
        }

        /**
         * @param correlate Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
         * 
         * @return builder
         * 
         */
        public Builder correlate(RateLimitCorrelateArgs correlate) {
            return correlate(Output.of(correlate));
        }

        /**
         * @param description A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disabled Whether this ratelimit is currently disabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Whether this ratelimit is currently disabled. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param match Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone.
         * 
         * @return builder
         * 
         */
        public Builder match(@Nullable Output<RateLimitMatchArgs> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone.
         * 
         * @return builder
         * 
         */
        public Builder match(RateLimitMatchArgs match) {
            return match(Output.of(match));
        }

        /**
         * @param period The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed.
         * 
         * @return builder
         * 
         */
        public Builder period(Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param threshold The threshold that triggers the rate limit mitigations, combine with period.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The threshold that triggers the rate limit mitigations, combine with period.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param zoneId The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public RateLimitArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("RateLimitArgs", "action");
            }
            if ($.period == null) {
                throw new MissingRequiredPropertyException("RateLimitArgs", "period");
            }
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("RateLimitArgs", "threshold");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("RateLimitArgs", "zoneId");
            }
            return $;
        }
    }

}
