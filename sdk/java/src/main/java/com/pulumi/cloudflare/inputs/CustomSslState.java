// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.CustomSslCustomSslOptionsArgs;
import com.pulumi.cloudflare.inputs.CustomSslCustomSslPriorityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomSslState extends com.pulumi.resources.ResourceArgs {

    public static final CustomSslState Empty = new CustomSslState();

    /**
     * The certificate, private key and associated optional parameters, such as bundle_method, geo_restrictions, and type.
     * 
     */
    @Import(name="customSslOptions")
    private @Nullable Output<CustomSslCustomSslOptionsArgs> customSslOptions;

    /**
     * @return The certificate, private key and associated optional parameters, such as bundle_method, geo_restrictions, and type.
     * 
     */
    public Optional<Output<CustomSslCustomSslOptionsArgs>> customSslOptions() {
        return Optional.ofNullable(this.customSslOptions);
    }

    @Import(name="customSslPriorities")
    private @Nullable Output<List<CustomSslCustomSslPriorityArgs>> customSslPriorities;

    public Optional<Output<List<CustomSslCustomSslPriorityArgs>>> customSslPriorities() {
        return Optional.ofNullable(this.customSslPriorities);
    }

    @Import(name="expiresOn")
    private @Nullable Output<String> expiresOn;

    public Optional<Output<String>> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }

    @Import(name="hosts")
    private @Nullable Output<List<String>> hosts;

    public Optional<Output<List<String>>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    @Import(name="signature")
    private @Nullable Output<String> signature;

    public Optional<Output<String>> signature() {
        return Optional.ofNullable(this.signature);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="uploadedOn")
    private @Nullable Output<String> uploadedOn;

    public Optional<Output<String>> uploadedOn() {
        return Optional.ofNullable(this.uploadedOn);
    }

    /**
     * The DNS zone id to the custom ssl cert should be added.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The DNS zone id to the custom ssl cert should be added.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private CustomSslState() {}

    private CustomSslState(CustomSslState $) {
        this.customSslOptions = $.customSslOptions;
        this.customSslPriorities = $.customSslPriorities;
        this.expiresOn = $.expiresOn;
        this.hosts = $.hosts;
        this.issuer = $.issuer;
        this.modifiedOn = $.modifiedOn;
        this.priority = $.priority;
        this.signature = $.signature;
        this.status = $.status;
        this.uploadedOn = $.uploadedOn;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomSslState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomSslState $;

        public Builder() {
            $ = new CustomSslState();
        }

        public Builder(CustomSslState defaults) {
            $ = new CustomSslState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customSslOptions The certificate, private key and associated optional parameters, such as bundle_method, geo_restrictions, and type.
         * 
         * @return builder
         * 
         */
        public Builder customSslOptions(@Nullable Output<CustomSslCustomSslOptionsArgs> customSslOptions) {
            $.customSslOptions = customSslOptions;
            return this;
        }

        /**
         * @param customSslOptions The certificate, private key and associated optional parameters, such as bundle_method, geo_restrictions, and type.
         * 
         * @return builder
         * 
         */
        public Builder customSslOptions(CustomSslCustomSslOptionsArgs customSslOptions) {
            return customSslOptions(Output.of(customSslOptions));
        }

        public Builder customSslPriorities(@Nullable Output<List<CustomSslCustomSslPriorityArgs>> customSslPriorities) {
            $.customSslPriorities = customSslPriorities;
            return this;
        }

        public Builder customSslPriorities(List<CustomSslCustomSslPriorityArgs> customSslPriorities) {
            return customSslPriorities(Output.of(customSslPriorities));
        }

        public Builder customSslPriorities(CustomSslCustomSslPriorityArgs... customSslPriorities) {
            return customSslPriorities(List.of(customSslPriorities));
        }

        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            $.expiresOn = expiresOn;
            return this;
        }

        public Builder expiresOn(String expiresOn) {
            return expiresOn(Output.of(expiresOn));
        }

        public Builder hosts(@Nullable Output<List<String>> hosts) {
            $.hosts = hosts;
            return this;
        }

        public Builder hosts(List<String> hosts) {
            return hosts(Output.of(hosts));
        }

        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public Builder signature(@Nullable Output<String> signature) {
            $.signature = signature;
            return this;
        }

        public Builder signature(String signature) {
            return signature(Output.of(signature));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder uploadedOn(@Nullable Output<String> uploadedOn) {
            $.uploadedOn = uploadedOn;
            return this;
        }

        public Builder uploadedOn(String uploadedOn) {
            return uploadedOn(Output.of(uploadedOn));
        }

        /**
         * @param zoneId The DNS zone id to the custom ssl cert should be added.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The DNS zone id to the custom ssl cert should be added.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public CustomSslState build() {
            return $;
        }
    }

}
