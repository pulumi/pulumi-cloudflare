// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamsRuleExpirationArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamsRuleExpirationArgs Empty = new TeamsRuleExpirationArgs();

    /**
     * Defines the default duration a policy active in minutes. Must set in order to use the `resetExpiration` endpoint on this rule.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return Defines the default duration a policy active in minutes. Must set in order to use the `resetExpiration` endpoint on this rule.
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * Indicates whether the policy is expired.
     * 
     */
    @Import(name="expired")
    private @Nullable Output<Boolean> expired;

    /**
     * @return Indicates whether the policy is expired.
     * 
     */
    public Optional<Output<Boolean>> expired() {
        return Optional.ofNullable(this.expired);
    }

    /**
     * Show the timestamp when the policy expires and stops applying.  The value must follow RFC 3339 and include a UTC offset.  The system accepts non-zero offsets but converts them to the equivalent UTC+00:00  value and returns timestamps with a trailing Z. Expiration policies ignore client  timezones and expire globally at the specified expiresAt time.
     * 
     */
    @Import(name="expiresAt", required=true)
    private Output<String> expiresAt;

    /**
     * @return Show the timestamp when the policy expires and stops applying.  The value must follow RFC 3339 and include a UTC offset.  The system accepts non-zero offsets but converts them to the equivalent UTC+00:00  value and returns timestamps with a trailing Z. Expiration policies ignore client  timezones and expire globally at the specified expiresAt time.
     * 
     */
    public Output<String> expiresAt() {
        return this.expiresAt;
    }

    private TeamsRuleExpirationArgs() {}

    private TeamsRuleExpirationArgs(TeamsRuleExpirationArgs $) {
        this.duration = $.duration;
        this.expired = $.expired;
        this.expiresAt = $.expiresAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamsRuleExpirationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamsRuleExpirationArgs $;

        public Builder() {
            $ = new TeamsRuleExpirationArgs();
        }

        public Builder(TeamsRuleExpirationArgs defaults) {
            $ = new TeamsRuleExpirationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param duration Defines the default duration a policy active in minutes. Must set in order to use the `resetExpiration` endpoint on this rule.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Defines the default duration a policy active in minutes. Must set in order to use the `resetExpiration` endpoint on this rule.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param expired Indicates whether the policy is expired.
         * 
         * @return builder
         * 
         */
        public Builder expired(@Nullable Output<Boolean> expired) {
            $.expired = expired;
            return this;
        }

        /**
         * @param expired Indicates whether the policy is expired.
         * 
         * @return builder
         * 
         */
        public Builder expired(Boolean expired) {
            return expired(Output.of(expired));
        }

        /**
         * @param expiresAt Show the timestamp when the policy expires and stops applying.  The value must follow RFC 3339 and include a UTC offset.  The system accepts non-zero offsets but converts them to the equivalent UTC+00:00  value and returns timestamps with a trailing Z. Expiration policies ignore client  timezones and expire globally at the specified expiresAt time.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt Show the timestamp when the policy expires and stops applying.  The value must follow RFC 3339 and include a UTC offset.  The system accepts non-zero offsets but converts them to the equivalent UTC+00:00  value and returns timestamps with a trailing Z. Expiration policies ignore client  timezones and expire globally at the specified expiresAt time.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        public TeamsRuleExpirationArgs build() {
            if ($.expiresAt == null) {
                throw new MissingRequiredPropertyException("TeamsRuleExpirationArgs", "expiresAt");
            }
            return $;
        }
    }

}
