// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZonePlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZonePlanArgs Empty = new ZonePlanArgs();

    /**
     * States if the subscription can be activated.
     * 
     */
    @Import(name="canSubscribe")
    private @Nullable Output<Boolean> canSubscribe;

    /**
     * @return States if the subscription can be activated.
     * 
     */
    public Optional<Output<Boolean>> canSubscribe() {
        return Optional.ofNullable(this.canSubscribe);
    }

    /**
     * The denomination of the customer.
     * 
     */
    @Import(name="currency")
    private @Nullable Output<String> currency;

    /**
     * @return The denomination of the customer.
     * 
     */
    public Optional<Output<String>> currency() {
        return Optional.ofNullable(this.currency);
    }

    /**
     * If this Zone is managed by another company.
     * 
     */
    @Import(name="externallyManaged")
    private @Nullable Output<Boolean> externallyManaged;

    /**
     * @return If this Zone is managed by another company.
     * 
     */
    public Optional<Output<Boolean>> externallyManaged() {
        return Optional.ofNullable(this.externallyManaged);
    }

    /**
     * How often the customer is billed.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return How often the customer is billed.
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * States if the subscription active.
     * 
     */
    @Import(name="isSubscribed")
    private @Nullable Output<Boolean> isSubscribed;

    /**
     * @return States if the subscription active.
     * 
     */
    public Optional<Output<Boolean>> isSubscribed() {
        return Optional.ofNullable(this.isSubscribed);
    }

    /**
     * If the legacy discount applies to this Zone.
     * 
     */
    @Import(name="legacyDiscount")
    private @Nullable Output<Boolean> legacyDiscount;

    /**
     * @return If the legacy discount applies to this Zone.
     * 
     */
    public Optional<Output<Boolean>> legacyDiscount() {
        return Optional.ofNullable(this.legacyDiscount);
    }

    /**
     * The legacy name of the plan.
     * 
     */
    @Import(name="legacyId")
    private @Nullable Output<String> legacyId;

    /**
     * @return The legacy name of the plan.
     * 
     */
    public Optional<Output<String>> legacyId() {
        return Optional.ofNullable(this.legacyId);
    }

    /**
     * Name of the owner
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the owner
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * How much the customer is paying.
     * 
     */
    @Import(name="price")
    private @Nullable Output<Double> price;

    /**
     * @return How much the customer is paying.
     * 
     */
    public Optional<Output<Double>> price() {
        return Optional.ofNullable(this.price);
    }

    private ZonePlanArgs() {}

    private ZonePlanArgs(ZonePlanArgs $) {
        this.canSubscribe = $.canSubscribe;
        this.currency = $.currency;
        this.externallyManaged = $.externallyManaged;
        this.frequency = $.frequency;
        this.id = $.id;
        this.isSubscribed = $.isSubscribed;
        this.legacyDiscount = $.legacyDiscount;
        this.legacyId = $.legacyId;
        this.name = $.name;
        this.price = $.price;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZonePlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZonePlanArgs $;

        public Builder() {
            $ = new ZonePlanArgs();
        }

        public Builder(ZonePlanArgs defaults) {
            $ = new ZonePlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param canSubscribe States if the subscription can be activated.
         * 
         * @return builder
         * 
         */
        public Builder canSubscribe(@Nullable Output<Boolean> canSubscribe) {
            $.canSubscribe = canSubscribe;
            return this;
        }

        /**
         * @param canSubscribe States if the subscription can be activated.
         * 
         * @return builder
         * 
         */
        public Builder canSubscribe(Boolean canSubscribe) {
            return canSubscribe(Output.of(canSubscribe));
        }

        /**
         * @param currency The denomination of the customer.
         * 
         * @return builder
         * 
         */
        public Builder currency(@Nullable Output<String> currency) {
            $.currency = currency;
            return this;
        }

        /**
         * @param currency The denomination of the customer.
         * 
         * @return builder
         * 
         */
        public Builder currency(String currency) {
            return currency(Output.of(currency));
        }

        /**
         * @param externallyManaged If this Zone is managed by another company.
         * 
         * @return builder
         * 
         */
        public Builder externallyManaged(@Nullable Output<Boolean> externallyManaged) {
            $.externallyManaged = externallyManaged;
            return this;
        }

        /**
         * @param externallyManaged If this Zone is managed by another company.
         * 
         * @return builder
         * 
         */
        public Builder externallyManaged(Boolean externallyManaged) {
            return externallyManaged(Output.of(externallyManaged));
        }

        /**
         * @param frequency How often the customer is billed.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency How often the customer is billed.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param id Identifier
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param isSubscribed States if the subscription active.
         * 
         * @return builder
         * 
         */
        public Builder isSubscribed(@Nullable Output<Boolean> isSubscribed) {
            $.isSubscribed = isSubscribed;
            return this;
        }

        /**
         * @param isSubscribed States if the subscription active.
         * 
         * @return builder
         * 
         */
        public Builder isSubscribed(Boolean isSubscribed) {
            return isSubscribed(Output.of(isSubscribed));
        }

        /**
         * @param legacyDiscount If the legacy discount applies to this Zone.
         * 
         * @return builder
         * 
         */
        public Builder legacyDiscount(@Nullable Output<Boolean> legacyDiscount) {
            $.legacyDiscount = legacyDiscount;
            return this;
        }

        /**
         * @param legacyDiscount If the legacy discount applies to this Zone.
         * 
         * @return builder
         * 
         */
        public Builder legacyDiscount(Boolean legacyDiscount) {
            return legacyDiscount(Output.of(legacyDiscount));
        }

        /**
         * @param legacyId The legacy name of the plan.
         * 
         * @return builder
         * 
         */
        public Builder legacyId(@Nullable Output<String> legacyId) {
            $.legacyId = legacyId;
            return this;
        }

        /**
         * @param legacyId The legacy name of the plan.
         * 
         * @return builder
         * 
         */
        public Builder legacyId(String legacyId) {
            return legacyId(Output.of(legacyId));
        }

        /**
         * @param name Name of the owner
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the owner
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param price How much the customer is paying.
         * 
         * @return builder
         * 
         */
        public Builder price(@Nullable Output<Double> price) {
            $.price = price;
            return this;
        }

        /**
         * @param price How much the customer is paying.
         * 
         * @return builder
         * 
         */
        public Builder price(Double price) {
            return price(Output.of(price));
        }

        public ZonePlanArgs build() {
            return $;
        }
    }

}
