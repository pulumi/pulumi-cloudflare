// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageState extends com.pulumi.resources.ResourceArgs {

    public static final ImageState Empty = new ImageState();

    /**
     * Account identifier tag.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account identifier tag.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Can set the creator field with an internal user ID.
     * 
     */
    @Import(name="creator")
    private @Nullable Output<String> creator;

    /**
     * @return Can set the creator field with an internal user ID.
     * 
     */
    public Optional<Output<String>> creator() {
        return Optional.ofNullable(this.creator);
    }

    /**
     * An image binary data. Only needed when type is uploading a file.
     * 
     */
    @Import(name="file")
    private @Nullable Output<String> file;

    /**
     * @return An image binary data. Only needed when type is uploading a file.
     * 
     */
    public Optional<Output<String>> file() {
        return Optional.ofNullable(this.file);
    }

    /**
     * Image file name.
     * 
     */
    @Import(name="filename")
    private @Nullable Output<String> filename;

    /**
     * @return Image file name.
     * 
     */
    public Optional<Output<String>> filename() {
        return Optional.ofNullable(this.filename);
    }

    /**
     * An optional custom unique identifier for your image.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return An optional custom unique identifier for your image.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<String> meta;

    /**
     * @return User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
     * 
     */
    public Optional<Output<String>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<String> metadata;

    /**
     * @return User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     * 
     */
    public Optional<Output<String>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Indicates whether the image requires a signature token for the access.
     * 
     */
    @Import(name="requireSignedUrls")
    private @Nullable Output<Boolean> requireSignedUrls;

    /**
     * @return Indicates whether the image requires a signature token for the access.
     * 
     */
    public Optional<Output<Boolean>> requireSignedUrls() {
        return Optional.ofNullable(this.requireSignedUrls);
    }

    /**
     * When the media item was uploaded.
     * 
     */
    @Import(name="uploaded")
    private @Nullable Output<String> uploaded;

    /**
     * @return When the media item was uploaded.
     * 
     */
    public Optional<Output<String>> uploaded() {
        return Optional.ofNullable(this.uploaded);
    }

    /**
     * A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * Object specifying available variants for an image.
     * 
     */
    @Import(name="variants")
    private @Nullable Output<List<String>> variants;

    /**
     * @return Object specifying available variants for an image.
     * 
     */
    public Optional<Output<List<String>>> variants() {
        return Optional.ofNullable(this.variants);
    }

    private ImageState() {}

    private ImageState(ImageState $) {
        this.accountId = $.accountId;
        this.creator = $.creator;
        this.file = $.file;
        this.filename = $.filename;
        this.imageId = $.imageId;
        this.meta = $.meta;
        this.metadata = $.metadata;
        this.requireSignedUrls = $.requireSignedUrls;
        this.uploaded = $.uploaded;
        this.url = $.url;
        this.variants = $.variants;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageState $;

        public Builder() {
            $ = new ImageState();
        }

        public Builder(ImageState defaults) {
            $ = new ImageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param creator Can set the creator field with an internal user ID.
         * 
         * @return builder
         * 
         */
        public Builder creator(@Nullable Output<String> creator) {
            $.creator = creator;
            return this;
        }

        /**
         * @param creator Can set the creator field with an internal user ID.
         * 
         * @return builder
         * 
         */
        public Builder creator(String creator) {
            return creator(Output.of(creator));
        }

        /**
         * @param file An image binary data. Only needed when type is uploading a file.
         * 
         * @return builder
         * 
         */
        public Builder file(@Nullable Output<String> file) {
            $.file = file;
            return this;
        }

        /**
         * @param file An image binary data. Only needed when type is uploading a file.
         * 
         * @return builder
         * 
         */
        public Builder file(String file) {
            return file(Output.of(file));
        }

        /**
         * @param filename Image file name.
         * 
         * @return builder
         * 
         */
        public Builder filename(@Nullable Output<String> filename) {
            $.filename = filename;
            return this;
        }

        /**
         * @param filename Image file name.
         * 
         * @return builder
         * 
         */
        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        /**
         * @param imageId An optional custom unique identifier for your image.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId An optional custom unique identifier for your image.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param meta User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<String> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
         * 
         * @return builder
         * 
         */
        public Builder meta(String meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param metadata User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
         * 
         * @return builder
         * 
         */
        public Builder metadata(String metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param requireSignedUrls Indicates whether the image requires a signature token for the access.
         * 
         * @return builder
         * 
         */
        public Builder requireSignedUrls(@Nullable Output<Boolean> requireSignedUrls) {
            $.requireSignedUrls = requireSignedUrls;
            return this;
        }

        /**
         * @param requireSignedUrls Indicates whether the image requires a signature token for the access.
         * 
         * @return builder
         * 
         */
        public Builder requireSignedUrls(Boolean requireSignedUrls) {
            return requireSignedUrls(Output.of(requireSignedUrls));
        }

        /**
         * @param uploaded When the media item was uploaded.
         * 
         * @return builder
         * 
         */
        public Builder uploaded(@Nullable Output<String> uploaded) {
            $.uploaded = uploaded;
            return this;
        }

        /**
         * @param uploaded When the media item was uploaded.
         * 
         * @return builder
         * 
         */
        public Builder uploaded(String uploaded) {
            return uploaded(Output.of(uploaded));
        }

        /**
         * @param url A URL to fetch an image from origin. Only needed when type is uploading from a URL.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url A URL to fetch an image from origin. Only needed when type is uploading from a URL.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param variants Object specifying available variants for an image.
         * 
         * @return builder
         * 
         */
        public Builder variants(@Nullable Output<List<String>> variants) {
            $.variants = variants;
            return this;
        }

        /**
         * @param variants Object specifying available variants for an image.
         * 
         * @return builder
         * 
         */
        public Builder variants(List<String> variants) {
            return variants(Output.of(variants));
        }

        /**
         * @param variants Object specifying available variants for an image.
         * 
         * @return builder
         * 
         */
        public Builder variants(String... variants) {
            return variants(List.of(variants));
        }

        public ImageState build() {
            return $;
        }
    }

}
