// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustTunnelWarpConnectorConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustTunnelWarpConnectorConnectionArgs Empty = new ZeroTrustTunnelWarpConnectorConnectionArgs();

    /**
     * UUID of the Cloudflare Tunnel connector.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return UUID of the Cloudflare Tunnel connector.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The cloudflared version used to establish this connection.
     * 
     */
    @Import(name="clientVersion")
    private @Nullable Output<String> clientVersion;

    /**
     * @return The cloudflared version used to establish this connection.
     * 
     */
    public Optional<Output<String>> clientVersion() {
        return Optional.ofNullable(this.clientVersion);
    }

    /**
     * The Cloudflare data center used for this connection.
     * 
     */
    @Import(name="coloName")
    private @Nullable Output<String> coloName;

    /**
     * @return The Cloudflare data center used for this connection.
     * 
     */
    public Optional<Output<String>> coloName() {
        return Optional.ofNullable(this.coloName);
    }

    /**
     * UUID of the Cloudflare Tunnel connection.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return UUID of the Cloudflare Tunnel connection.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If `true`, the connection has disconnected but is still being tracked. If `false`, the connection is actively serving traffic.
     * 
     */
    @Import(name="isPendingReconnect")
    private @Nullable Output<Boolean> isPendingReconnect;

    /**
     * @return Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If `true`, the connection has disconnected but is still being tracked. If `false`, the connection is actively serving traffic.
     * 
     */
    public Optional<Output<Boolean>> isPendingReconnect() {
        return Optional.ofNullable(this.isPendingReconnect);
    }

    /**
     * Timestamp of when the connection was established.
     * 
     */
    @Import(name="openedAt")
    private @Nullable Output<String> openedAt;

    /**
     * @return Timestamp of when the connection was established.
     * 
     */
    public Optional<Output<String>> openedAt() {
        return Optional.ofNullable(this.openedAt);
    }

    /**
     * The public IP address of the host running cloudflared.
     * 
     */
    @Import(name="originIp")
    private @Nullable Output<String> originIp;

    /**
     * @return The public IP address of the host running cloudflared.
     * 
     */
    public Optional<Output<String>> originIp() {
        return Optional.ofNullable(this.originIp);
    }

    /**
     * UUID of the Cloudflare Tunnel connection.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return UUID of the Cloudflare Tunnel connection.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private ZeroTrustTunnelWarpConnectorConnectionArgs() {}

    private ZeroTrustTunnelWarpConnectorConnectionArgs(ZeroTrustTunnelWarpConnectorConnectionArgs $) {
        this.clientId = $.clientId;
        this.clientVersion = $.clientVersion;
        this.coloName = $.coloName;
        this.id = $.id;
        this.isPendingReconnect = $.isPendingReconnect;
        this.openedAt = $.openedAt;
        this.originIp = $.originIp;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustTunnelWarpConnectorConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustTunnelWarpConnectorConnectionArgs $;

        public Builder() {
            $ = new ZeroTrustTunnelWarpConnectorConnectionArgs();
        }

        public Builder(ZeroTrustTunnelWarpConnectorConnectionArgs defaults) {
            $ = new ZeroTrustTunnelWarpConnectorConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId UUID of the Cloudflare Tunnel connector.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId UUID of the Cloudflare Tunnel connector.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientVersion The cloudflared version used to establish this connection.
         * 
         * @return builder
         * 
         */
        public Builder clientVersion(@Nullable Output<String> clientVersion) {
            $.clientVersion = clientVersion;
            return this;
        }

        /**
         * @param clientVersion The cloudflared version used to establish this connection.
         * 
         * @return builder
         * 
         */
        public Builder clientVersion(String clientVersion) {
            return clientVersion(Output.of(clientVersion));
        }

        /**
         * @param coloName The Cloudflare data center used for this connection.
         * 
         * @return builder
         * 
         */
        public Builder coloName(@Nullable Output<String> coloName) {
            $.coloName = coloName;
            return this;
        }

        /**
         * @param coloName The Cloudflare data center used for this connection.
         * 
         * @return builder
         * 
         */
        public Builder coloName(String coloName) {
            return coloName(Output.of(coloName));
        }

        /**
         * @param id UUID of the Cloudflare Tunnel connection.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id UUID of the Cloudflare Tunnel connection.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param isPendingReconnect Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If `true`, the connection has disconnected but is still being tracked. If `false`, the connection is actively serving traffic.
         * 
         * @return builder
         * 
         */
        public Builder isPendingReconnect(@Nullable Output<Boolean> isPendingReconnect) {
            $.isPendingReconnect = isPendingReconnect;
            return this;
        }

        /**
         * @param isPendingReconnect Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If `true`, the connection has disconnected but is still being tracked. If `false`, the connection is actively serving traffic.
         * 
         * @return builder
         * 
         */
        public Builder isPendingReconnect(Boolean isPendingReconnect) {
            return isPendingReconnect(Output.of(isPendingReconnect));
        }

        /**
         * @param openedAt Timestamp of when the connection was established.
         * 
         * @return builder
         * 
         */
        public Builder openedAt(@Nullable Output<String> openedAt) {
            $.openedAt = openedAt;
            return this;
        }

        /**
         * @param openedAt Timestamp of when the connection was established.
         * 
         * @return builder
         * 
         */
        public Builder openedAt(String openedAt) {
            return openedAt(Output.of(openedAt));
        }

        /**
         * @param originIp The public IP address of the host running cloudflared.
         * 
         * @return builder
         * 
         */
        public Builder originIp(@Nullable Output<String> originIp) {
            $.originIp = originIp;
            return this;
        }

        /**
         * @param originIp The public IP address of the host running cloudflared.
         * 
         * @return builder
         * 
         */
        public Builder originIp(String originIp) {
            return originIp(Output.of(originIp));
        }

        /**
         * @param uuid UUID of the Cloudflare Tunnel connection.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid UUID of the Cloudflare Tunnel connection.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public ZeroTrustTunnelWarpConnectorConnectionArgs build() {
            return $;
        }
    }

}
