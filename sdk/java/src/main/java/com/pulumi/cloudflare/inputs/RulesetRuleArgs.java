// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleExposedCredentialCheckArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleLoggingArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleRatelimitArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulesetRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetRuleArgs Empty = new RulesetRuleArgs();

    /**
     * The action to perform when the rule matches.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;compress*response&#34;, &#34;execute&#34;, &#34;js*challenge&#34;, &#34;log&#34;, &#34;managed*challenge&#34;, &#34;redirect&#34;, &#34;rewrite&#34;, &#34;route&#34;, &#34;score&#34;, &#34;serve*error&#34;, &#34;set*config&#34;, &#34;skip&#34;, &#34;set*cache*settings&#34;, &#34;log*custom*field&#34;, &#34;ddos*dynamic&#34;, &#34;force*connection*close&#34;.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return The action to perform when the rule matches.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;compress*response&#34;, &#34;execute&#34;, &#34;js*challenge&#34;, &#34;log&#34;, &#34;managed*challenge&#34;, &#34;redirect&#34;, &#34;rewrite&#34;, &#34;route&#34;, &#34;score&#34;, &#34;serve*error&#34;, &#34;set*config&#34;, &#34;skip&#34;, &#34;set*cache*settings&#34;, &#34;log*custom*field&#34;, &#34;ddos*dynamic&#34;, &#34;force*connection*close&#34;.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The parameters configuring the rule&#39;s action.
     * 
     */
    @Import(name="actionParameters")
    private @Nullable Output<RulesetRuleActionParametersArgs> actionParameters;

    /**
     * @return The parameters configuring the rule&#39;s action.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersArgs>> actionParameters() {
        return Optional.ofNullable(this.actionParameters);
    }

    /**
     * The categories of the rule.
     * 
     */
    @Import(name="categories")
    private @Nullable Output<List<String>> categories;

    /**
     * @return The categories of the rule.
     * 
     */
    public Optional<Output<List<String>>> categories() {
        return Optional.ofNullable(this.categories);
    }

    /**
     * An informative description of the rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An informative description of the rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the rule should be executed.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the rule should be executed.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Configure checks for exposed credentials.
     * 
     */
    @Import(name="exposedCredentialCheck")
    private @Nullable Output<RulesetRuleExposedCredentialCheckArgs> exposedCredentialCheck;

    /**
     * @return Configure checks for exposed credentials.
     * 
     */
    public Optional<Output<RulesetRuleExposedCredentialCheckArgs>> exposedCredentialCheck() {
        return Optional.ofNullable(this.exposedCredentialCheck);
    }

    /**
     * The expression defining which traffic will match the rule.
     * 
     */
    @Import(name="expression")
    private @Nullable Output<String> expression;

    /**
     * @return The expression defining which traffic will match the rule.
     * 
     */
    public Optional<Output<String>> expression() {
        return Optional.ofNullable(this.expression);
    }

    /**
     * The unique ID of the rule.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The unique ID of the rule.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * An object configuring the rule&#39;s logging behavior.
     * 
     */
    @Import(name="logging")
    private @Nullable Output<RulesetRuleLoggingArgs> logging;

    /**
     * @return An object configuring the rule&#39;s logging behavior.
     * 
     */
    public Optional<Output<RulesetRuleLoggingArgs>> logging() {
        return Optional.ofNullable(this.logging);
    }

    /**
     * An object configuring the rule&#39;s ratelimit behavior.
     * 
     */
    @Import(name="ratelimit")
    private @Nullable Output<RulesetRuleRatelimitArgs> ratelimit;

    /**
     * @return An object configuring the rule&#39;s ratelimit behavior.
     * 
     */
    public Optional<Output<RulesetRuleRatelimitArgs>> ratelimit() {
        return Optional.ofNullable(this.ratelimit);
    }

    /**
     * The reference of the rule (the rule ID by default).
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    /**
     * @return The reference of the rule (the rule ID by default).
     * 
     */
    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    private RulesetRuleArgs() {}

    private RulesetRuleArgs(RulesetRuleArgs $) {
        this.action = $.action;
        this.actionParameters = $.actionParameters;
        this.categories = $.categories;
        this.description = $.description;
        this.enabled = $.enabled;
        this.exposedCredentialCheck = $.exposedCredentialCheck;
        this.expression = $.expression;
        this.id = $.id;
        this.logging = $.logging;
        this.ratelimit = $.ratelimit;
        this.ref = $.ref;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRuleArgs $;

        public Builder() {
            $ = new RulesetRuleArgs();
        }

        public Builder(RulesetRuleArgs defaults) {
            $ = new RulesetRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to perform when the rule matches.
         * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;compress*response&#34;, &#34;execute&#34;, &#34;js*challenge&#34;, &#34;log&#34;, &#34;managed*challenge&#34;, &#34;redirect&#34;, &#34;rewrite&#34;, &#34;route&#34;, &#34;score&#34;, &#34;serve*error&#34;, &#34;set*config&#34;, &#34;skip&#34;, &#34;set*cache*settings&#34;, &#34;log*custom*field&#34;, &#34;ddos*dynamic&#34;, &#34;force*connection*close&#34;.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to perform when the rule matches.
         * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;compress*response&#34;, &#34;execute&#34;, &#34;js*challenge&#34;, &#34;log&#34;, &#34;managed*challenge&#34;, &#34;redirect&#34;, &#34;rewrite&#34;, &#34;route&#34;, &#34;score&#34;, &#34;serve*error&#34;, &#34;set*config&#34;, &#34;skip&#34;, &#34;set*cache*settings&#34;, &#34;log*custom*field&#34;, &#34;ddos*dynamic&#34;, &#34;force*connection*close&#34;.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param actionParameters The parameters configuring the rule&#39;s action.
         * 
         * @return builder
         * 
         */
        public Builder actionParameters(@Nullable Output<RulesetRuleActionParametersArgs> actionParameters) {
            $.actionParameters = actionParameters;
            return this;
        }

        /**
         * @param actionParameters The parameters configuring the rule&#39;s action.
         * 
         * @return builder
         * 
         */
        public Builder actionParameters(RulesetRuleActionParametersArgs actionParameters) {
            return actionParameters(Output.of(actionParameters));
        }

        /**
         * @param categories The categories of the rule.
         * 
         * @return builder
         * 
         */
        public Builder categories(@Nullable Output<List<String>> categories) {
            $.categories = categories;
            return this;
        }

        /**
         * @param categories The categories of the rule.
         * 
         * @return builder
         * 
         */
        public Builder categories(List<String> categories) {
            return categories(Output.of(categories));
        }

        /**
         * @param categories The categories of the rule.
         * 
         * @return builder
         * 
         */
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }

        /**
         * @param description An informative description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An informative description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the rule should be executed.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the rule should be executed.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param exposedCredentialCheck Configure checks for exposed credentials.
         * 
         * @return builder
         * 
         */
        public Builder exposedCredentialCheck(@Nullable Output<RulesetRuleExposedCredentialCheckArgs> exposedCredentialCheck) {
            $.exposedCredentialCheck = exposedCredentialCheck;
            return this;
        }

        /**
         * @param exposedCredentialCheck Configure checks for exposed credentials.
         * 
         * @return builder
         * 
         */
        public Builder exposedCredentialCheck(RulesetRuleExposedCredentialCheckArgs exposedCredentialCheck) {
            return exposedCredentialCheck(Output.of(exposedCredentialCheck));
        }

        /**
         * @param expression The expression defining which traffic will match the rule.
         * 
         * @return builder
         * 
         */
        public Builder expression(@Nullable Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression The expression defining which traffic will match the rule.
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
         * @param id The unique ID of the rule.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID of the rule.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param logging An object configuring the rule&#39;s logging behavior.
         * 
         * @return builder
         * 
         */
        public Builder logging(@Nullable Output<RulesetRuleLoggingArgs> logging) {
            $.logging = logging;
            return this;
        }

        /**
         * @param logging An object configuring the rule&#39;s logging behavior.
         * 
         * @return builder
         * 
         */
        public Builder logging(RulesetRuleLoggingArgs logging) {
            return logging(Output.of(logging));
        }

        /**
         * @param ratelimit An object configuring the rule&#39;s ratelimit behavior.
         * 
         * @return builder
         * 
         */
        public Builder ratelimit(@Nullable Output<RulesetRuleRatelimitArgs> ratelimit) {
            $.ratelimit = ratelimit;
            return this;
        }

        /**
         * @param ratelimit An object configuring the rule&#39;s ratelimit behavior.
         * 
         * @return builder
         * 
         */
        public Builder ratelimit(RulesetRuleRatelimitArgs ratelimit) {
            return ratelimit(Output.of(ratelimit));
        }

        /**
         * @param ref The reference of the rule (the rule ID by default).
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref The reference of the rule (the rule ID by default).
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        public RulesetRuleArgs build() {
            return $;
        }
    }

}
