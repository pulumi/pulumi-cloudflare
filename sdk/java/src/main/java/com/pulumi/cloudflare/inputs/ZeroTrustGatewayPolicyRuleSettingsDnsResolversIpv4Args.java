// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args Empty = new ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args();

    /**
     * Specify the IPv4 address of the upstream resolver.
     * 
     */
    @Import(name="ip", required=true)
    private Output<String> ip;

    /**
     * @return Specify the IPv4 address of the upstream resolver.
     * 
     */
    public Output<String> ip() {
        return this.ip;
    }

    /**
     * Specify a port number to use for the upstream resolver. Defaults to 53 if unspecified.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Specify a port number to use for the upstream resolver. Defaults to 53 if unspecified.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Indicate whether to connect to this resolver over a private network. Must set when vnetId set.
     * 
     */
    @Import(name="routeThroughPrivateNetwork")
    private @Nullable Output<Boolean> routeThroughPrivateNetwork;

    /**
     * @return Indicate whether to connect to this resolver over a private network. Must set when vnetId set.
     * 
     */
    public Optional<Output<Boolean>> routeThroughPrivateNetwork() {
        return Optional.ofNullable(this.routeThroughPrivateNetwork);
    }

    /**
     * Specify an optional virtual network for this resolver. Uses default virtual network id if omitted.
     * 
     */
    @Import(name="vnetId")
    private @Nullable Output<String> vnetId;

    /**
     * @return Specify an optional virtual network for this resolver. Uses default virtual network id if omitted.
     * 
     */
    public Optional<Output<String>> vnetId() {
        return Optional.ofNullable(this.vnetId);
    }

    private ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args() {}

    private ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args(ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args $) {
        this.ip = $.ip;
        this.port = $.port;
        this.routeThroughPrivateNetwork = $.routeThroughPrivateNetwork;
        this.vnetId = $.vnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args $;

        public Builder() {
            $ = new ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args();
        }

        public Builder(ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args defaults) {
            $ = new ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param ip Specify the IPv4 address of the upstream resolver.
         * 
         * @return builder
         * 
         */
        public Builder ip(Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip Specify the IPv4 address of the upstream resolver.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param port Specify a port number to use for the upstream resolver. Defaults to 53 if unspecified.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Specify a port number to use for the upstream resolver. Defaults to 53 if unspecified.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param routeThroughPrivateNetwork Indicate whether to connect to this resolver over a private network. Must set when vnetId set.
         * 
         * @return builder
         * 
         */
        public Builder routeThroughPrivateNetwork(@Nullable Output<Boolean> routeThroughPrivateNetwork) {
            $.routeThroughPrivateNetwork = routeThroughPrivateNetwork;
            return this;
        }

        /**
         * @param routeThroughPrivateNetwork Indicate whether to connect to this resolver over a private network. Must set when vnetId set.
         * 
         * @return builder
         * 
         */
        public Builder routeThroughPrivateNetwork(Boolean routeThroughPrivateNetwork) {
            return routeThroughPrivateNetwork(Output.of(routeThroughPrivateNetwork));
        }

        /**
         * @param vnetId Specify an optional virtual network for this resolver. Uses default virtual network id if omitted.
         * 
         * @return builder
         * 
         */
        public Builder vnetId(@Nullable Output<String> vnetId) {
            $.vnetId = vnetId;
            return this;
        }

        /**
         * @param vnetId Specify an optional virtual network for this resolver. Uses default virtual network id if omitted.
         * 
         * @return builder
         * 
         */
        public Builder vnetId(String vnetId) {
            return vnetId(Output.of(vnetId));
        }

        public ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args build() {
            if ($.ip == null) {
                throw new MissingRequiredPropertyException("ZeroTrustGatewayPolicyRuleSettingsDnsResolversIpv4Args", "ip");
            }
            return $;
        }
    }

}
