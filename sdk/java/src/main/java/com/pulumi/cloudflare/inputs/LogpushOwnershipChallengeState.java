// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogpushOwnershipChallengeState extends com.pulumi.resources.ResourceArgs {

    public static final LogpushOwnershipChallengeState Empty = new LogpushOwnershipChallengeState();

    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Uniquely identifies a resource (such as an s3 bucket) where data. will be pushed. Additional configuration parameters supported by the destination may be included.
     * 
     */
    @Import(name="destinationConf")
    private @Nullable Output<String> destinationConf;

    /**
     * @return Uniquely identifies a resource (such as an s3 bucket) where data. will be pushed. Additional configuration parameters supported by the destination may be included.
     * 
     */
    public Optional<Output<String>> destinationConf() {
        return Optional.ofNullable(this.destinationConf);
    }

    @Import(name="filename")
    private @Nullable Output<String> filename;

    public Optional<Output<String>> filename() {
        return Optional.ofNullable(this.filename);
    }

    @Import(name="message")
    private @Nullable Output<String> message;

    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    @Import(name="valid")
    private @Nullable Output<Boolean> valid;

    public Optional<Output<Boolean>> valid() {
        return Optional.ofNullable(this.valid);
    }

    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private LogpushOwnershipChallengeState() {}

    private LogpushOwnershipChallengeState(LogpushOwnershipChallengeState $) {
        this.accountId = $.accountId;
        this.destinationConf = $.destinationConf;
        this.filename = $.filename;
        this.message = $.message;
        this.valid = $.valid;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogpushOwnershipChallengeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogpushOwnershipChallengeState $;

        public Builder() {
            $ = new LogpushOwnershipChallengeState();
        }

        public Builder(LogpushOwnershipChallengeState defaults) {
            $ = new LogpushOwnershipChallengeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param destinationConf Uniquely identifies a resource (such as an s3 bucket) where data. will be pushed. Additional configuration parameters supported by the destination may be included.
         * 
         * @return builder
         * 
         */
        public Builder destinationConf(@Nullable Output<String> destinationConf) {
            $.destinationConf = destinationConf;
            return this;
        }

        /**
         * @param destinationConf Uniquely identifies a resource (such as an s3 bucket) where data. will be pushed. Additional configuration parameters supported by the destination may be included.
         * 
         * @return builder
         * 
         */
        public Builder destinationConf(String destinationConf) {
            return destinationConf(Output.of(destinationConf));
        }

        public Builder filename(@Nullable Output<String> filename) {
            $.filename = filename;
            return this;
        }

        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        public Builder message(String message) {
            return message(Output.of(message));
        }

        public Builder valid(@Nullable Output<Boolean> valid) {
            $.valid = valid;
            return this;
        }

        public Builder valid(Boolean valid) {
            return valid(Output.of(valid));
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public LogpushOwnershipChallengeState build() {
            return $;
        }
    }

}
