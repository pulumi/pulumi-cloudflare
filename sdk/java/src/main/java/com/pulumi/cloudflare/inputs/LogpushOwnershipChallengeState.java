// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogpushOwnershipChallengeState extends com.pulumi.resources.ResourceArgs {

    public static final LogpushOwnershipChallengeState Empty = new LogpushOwnershipChallengeState();

    /**
     * The account ID where the logpush ownership challenge should be created. Either `account_id` or `zone_id` are required.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account ID where the logpush ownership challenge should be created. Either `account_id` or `zone_id` are required.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included. See [Logpush destination documentation](https://developers.cloudflare.com/logs/logpush/logpush-configuration-api/understanding-logpush-api/#destination).
     * 
     */
    @Import(name="destinationConf")
    private @Nullable Output<String> destinationConf;

    /**
     * @return Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included. See [Logpush destination documentation](https://developers.cloudflare.com/logs/logpush/logpush-configuration-api/understanding-logpush-api/#destination).
     * 
     */
    public Optional<Output<String>> destinationConf() {
        return Optional.ofNullable(this.destinationConf);
    }

    /**
     * The filename of the ownership challenge which
     * contains the contents required for Logpush Job creation.
     * 
     */
    @Import(name="ownershipChallengeFilename")
    private @Nullable Output<String> ownershipChallengeFilename;

    /**
     * @return The filename of the ownership challenge which
     * contains the contents required for Logpush Job creation.
     * 
     */
    public Optional<Output<String>> ownershipChallengeFilename() {
        return Optional.ofNullable(this.ownershipChallengeFilename);
    }

    /**
     * The zone ID where the logpush ownership challenge should be created. Either `account_id` or `zone_id` are required.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone ID where the logpush ownership challenge should be created. Either `account_id` or `zone_id` are required.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private LogpushOwnershipChallengeState() {}

    private LogpushOwnershipChallengeState(LogpushOwnershipChallengeState $) {
        this.accountId = $.accountId;
        this.destinationConf = $.destinationConf;
        this.ownershipChallengeFilename = $.ownershipChallengeFilename;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogpushOwnershipChallengeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogpushOwnershipChallengeState $;

        public Builder() {
            $ = new LogpushOwnershipChallengeState();
        }

        public Builder(LogpushOwnershipChallengeState defaults) {
            $ = new LogpushOwnershipChallengeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account ID where the logpush ownership challenge should be created. Either `account_id` or `zone_id` are required.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account ID where the logpush ownership challenge should be created. Either `account_id` or `zone_id` are required.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param destinationConf Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included. See [Logpush destination documentation](https://developers.cloudflare.com/logs/logpush/logpush-configuration-api/understanding-logpush-api/#destination).
         * 
         * @return builder
         * 
         */
        public Builder destinationConf(@Nullable Output<String> destinationConf) {
            $.destinationConf = destinationConf;
            return this;
        }

        /**
         * @param destinationConf Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included. See [Logpush destination documentation](https://developers.cloudflare.com/logs/logpush/logpush-configuration-api/understanding-logpush-api/#destination).
         * 
         * @return builder
         * 
         */
        public Builder destinationConf(String destinationConf) {
            return destinationConf(Output.of(destinationConf));
        }

        /**
         * @param ownershipChallengeFilename The filename of the ownership challenge which
         * contains the contents required for Logpush Job creation.
         * 
         * @return builder
         * 
         */
        public Builder ownershipChallengeFilename(@Nullable Output<String> ownershipChallengeFilename) {
            $.ownershipChallengeFilename = ownershipChallengeFilename;
            return this;
        }

        /**
         * @param ownershipChallengeFilename The filename of the ownership challenge which
         * contains the contents required for Logpush Job creation.
         * 
         * @return builder
         * 
         */
        public Builder ownershipChallengeFilename(String ownershipChallengeFilename) {
            return ownershipChallengeFilename(Output.of(ownershipChallengeFilename));
        }

        /**
         * @param zoneId The zone ID where the logpush ownership challenge should be created. Either `account_id` or `zone_id` are required.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID where the logpush ownership challenge should be created. Either `account_id` or `zone_id` are required.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public LogpushOwnershipChallengeState build() {
            return $;
        }
    }

}
