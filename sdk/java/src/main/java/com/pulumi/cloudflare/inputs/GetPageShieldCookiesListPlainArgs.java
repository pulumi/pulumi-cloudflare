// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPageShieldCookiesListPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPageShieldCookiesListPlainArgs Empty = new GetPageShieldCookiesListPlainArgs();

    /**
     * The direction used to sort returned cookies.&#39;
     * 
     */
    @Import(name="direction")
    private @Nullable String direction;

    /**
     * @return The direction used to sort returned cookies.&#39;
     * 
     */
    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * Filters the returned cookies that match the specified domain attribute
     * 
     */
    @Import(name="domain")
    private @Nullable String domain;

    /**
     * @return Filters the returned cookies that match the specified domain attribute
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Export the list of cookies as a file.
     * 
     */
    @Import(name="export")
    private @Nullable String export;

    /**
     * @return Export the list of cookies as a file.
     * 
     */
    public Optional<String> export() {
        return Optional.ofNullable(this.export);
    }

    /**
     * Includes cookies that match one or more URL-encoded hostnames separated by commas.
     * 
     */
    @Import(name="hosts")
    private @Nullable String hosts;

    /**
     * @return Includes cookies that match one or more URL-encoded hostnames separated by commas.
     * 
     */
    public Optional<String> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    @Import(name="httpOnly")
    private @Nullable Boolean httpOnly;

    public Optional<Boolean> httpOnly() {
        return Optional.ofNullable(this.httpOnly);
    }

    @Import(name="maxItems")
    private @Nullable Integer maxItems;

    public Optional<Integer> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="orderBy")
    private @Nullable String orderBy;

    public Optional<String> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    @Import(name="page")
    private @Nullable String page;

    public Optional<String> page() {
        return Optional.ofNullable(this.page);
    }

    @Import(name="pageUrl")
    private @Nullable String pageUrl;

    public Optional<String> pageUrl() {
        return Optional.ofNullable(this.pageUrl);
    }

    @Import(name="path")
    private @Nullable String path;

    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    @Import(name="perPage")
    private @Nullable Double perPage;

    public Optional<Double> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    @Import(name="sameSite")
    private @Nullable String sameSite;

    public Optional<String> sameSite() {
        return Optional.ofNullable(this.sameSite);
    }

    @Import(name="secure")
    private @Nullable Boolean secure;

    public Optional<Boolean> secure() {
        return Optional.ofNullable(this.secure);
    }

    @Import(name="type")
    private @Nullable String type;

    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId", required=true)
    private String zoneId;

    /**
     * @return Identifier
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    private GetPageShieldCookiesListPlainArgs() {}

    private GetPageShieldCookiesListPlainArgs(GetPageShieldCookiesListPlainArgs $) {
        this.direction = $.direction;
        this.domain = $.domain;
        this.export = $.export;
        this.hosts = $.hosts;
        this.httpOnly = $.httpOnly;
        this.maxItems = $.maxItems;
        this.name = $.name;
        this.orderBy = $.orderBy;
        this.page = $.page;
        this.pageUrl = $.pageUrl;
        this.path = $.path;
        this.perPage = $.perPage;
        this.sameSite = $.sameSite;
        this.secure = $.secure;
        this.type = $.type;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPageShieldCookiesListPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPageShieldCookiesListPlainArgs $;

        public Builder() {
            $ = new GetPageShieldCookiesListPlainArgs();
        }

        public Builder(GetPageShieldCookiesListPlainArgs defaults) {
            $ = new GetPageShieldCookiesListPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction The direction used to sort returned cookies.&#39;
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable String direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param domain Filters the returned cookies that match the specified domain attribute
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable String domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param export Export the list of cookies as a file.
         * 
         * @return builder
         * 
         */
        public Builder export(@Nullable String export) {
            $.export = export;
            return this;
        }

        /**
         * @param hosts Includes cookies that match one or more URL-encoded hostnames separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder hosts(@Nullable String hosts) {
            $.hosts = hosts;
            return this;
        }

        public Builder httpOnly(@Nullable Boolean httpOnly) {
            $.httpOnly = httpOnly;
            return this;
        }

        public Builder maxItems(@Nullable Integer maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder orderBy(@Nullable String orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        public Builder page(@Nullable String page) {
            $.page = page;
            return this;
        }

        public Builder pageUrl(@Nullable String pageUrl) {
            $.pageUrl = pageUrl;
            return this;
        }

        public Builder path(@Nullable String path) {
            $.path = path;
            return this;
        }

        public Builder perPage(@Nullable Double perPage) {
            $.perPage = perPage;
            return this;
        }

        public Builder sameSite(@Nullable String sameSite) {
            $.sameSite = sameSite;
            return this;
        }

        public Builder secure(@Nullable Boolean secure) {
            $.secure = secure;
            return this;
        }

        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        public GetPageShieldCookiesListPlainArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetPageShieldCookiesListPlainArgs", "zoneId");
            }
            return $;
        }
    }

}
