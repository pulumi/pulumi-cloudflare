// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetHealthcheckHttpConfig;
import com.pulumi.cloudflare.outputs.GetHealthcheckTcpConfig;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetHealthcheckResult {
    /**
     * @return The hostname or IP address of the origin server to run health checks on.
     * 
     */
    private String address;
    /**
     * @return A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
     * 
     */
    private List<String> checkRegions;
    /**
     * @return The number of consecutive fails required from a health check before changing the health to unhealthy.
     * 
     */
    private Integer consecutiveFails;
    /**
     * @return The number of consecutive successes required from a health check before changing the health to healthy.
     * 
     */
    private Integer consecutiveSuccesses;
    private String createdOn;
    /**
     * @return A human-readable description of the health check.
     * 
     */
    private String description;
    /**
     * @return The current failure reason if status is unhealthy.
     * 
     */
    private String failureReason;
    /**
     * @return Identifier
     * 
     */
    private @Nullable String healthcheckId;
    /**
     * @return Parameters specific to an HTTP or HTTPS health check.
     * 
     */
    private GetHealthcheckHttpConfig httpConfig;
    /**
     * @return Identifier
     * 
     */
    private String id;
    /**
     * @return The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
     * 
     */
    private Integer interval;
    private String modifiedOn;
    /**
     * @return A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
     * 
     */
    private String name;
    /**
     * @return The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     * 
     */
    private Integer retries;
    /**
     * @return The current status of the origin server according to the health check.
     * Available values: &#34;unknown&#34;, &#34;healthy&#34;, &#34;unhealthy&#34;, &#34;suspended&#34;.
     * 
     */
    private String status;
    /**
     * @return If suspended, no health checks are sent to the origin.
     * 
     */
    private Boolean suspended;
    /**
     * @return Parameters specific to TCP health check.
     * 
     */
    private GetHealthcheckTcpConfig tcpConfig;
    /**
     * @return The timeout (in seconds) before marking the health check as failed.
     * 
     */
    private Integer timeout;
    /**
     * @return The protocol to use for the health check. Currently supported protocols are &#39;HTTP&#39;, &#39;HTTPS&#39; and &#39;TCP&#39;.
     * 
     */
    private String type;
    /**
     * @return Identifier
     * 
     */
    private String zoneId;

    private GetHealthcheckResult() {}
    /**
     * @return The hostname or IP address of the origin server to run health checks on.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
     * 
     */
    public List<String> checkRegions() {
        return this.checkRegions;
    }
    /**
     * @return The number of consecutive fails required from a health check before changing the health to unhealthy.
     * 
     */
    public Integer consecutiveFails() {
        return this.consecutiveFails;
    }
    /**
     * @return The number of consecutive successes required from a health check before changing the health to healthy.
     * 
     */
    public Integer consecutiveSuccesses() {
        return this.consecutiveSuccesses;
    }
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return A human-readable description of the health check.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The current failure reason if status is unhealthy.
     * 
     */
    public String failureReason() {
        return this.failureReason;
    }
    /**
     * @return Identifier
     * 
     */
    public Optional<String> healthcheckId() {
        return Optional.ofNullable(this.healthcheckId);
    }
    /**
     * @return Parameters specific to an HTTP or HTTPS health check.
     * 
     */
    public GetHealthcheckHttpConfig httpConfig() {
        return this.httpConfig;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     * 
     */
    public Integer retries() {
        return this.retries;
    }
    /**
     * @return The current status of the origin server according to the health check.
     * Available values: &#34;unknown&#34;, &#34;healthy&#34;, &#34;unhealthy&#34;, &#34;suspended&#34;.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return If suspended, no health checks are sent to the origin.
     * 
     */
    public Boolean suspended() {
        return this.suspended;
    }
    /**
     * @return Parameters specific to TCP health check.
     * 
     */
    public GetHealthcheckTcpConfig tcpConfig() {
        return this.tcpConfig;
    }
    /**
     * @return The timeout (in seconds) before marking the health check as failed.
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return The protocol to use for the health check. Currently supported protocols are &#39;HTTP&#39;, &#39;HTTPS&#39; and &#39;TCP&#39;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Identifier
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHealthcheckResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private List<String> checkRegions;
        private Integer consecutiveFails;
        private Integer consecutiveSuccesses;
        private String createdOn;
        private String description;
        private String failureReason;
        private @Nullable String healthcheckId;
        private GetHealthcheckHttpConfig httpConfig;
        private String id;
        private Integer interval;
        private String modifiedOn;
        private String name;
        private Integer retries;
        private String status;
        private Boolean suspended;
        private GetHealthcheckTcpConfig tcpConfig;
        private Integer timeout;
        private String type;
        private String zoneId;
        public Builder() {}
        public Builder(GetHealthcheckResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.checkRegions = defaults.checkRegions;
    	      this.consecutiveFails = defaults.consecutiveFails;
    	      this.consecutiveSuccesses = defaults.consecutiveSuccesses;
    	      this.createdOn = defaults.createdOn;
    	      this.description = defaults.description;
    	      this.failureReason = defaults.failureReason;
    	      this.healthcheckId = defaults.healthcheckId;
    	      this.httpConfig = defaults.httpConfig;
    	      this.id = defaults.id;
    	      this.interval = defaults.interval;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.name = defaults.name;
    	      this.retries = defaults.retries;
    	      this.status = defaults.status;
    	      this.suspended = defaults.suspended;
    	      this.tcpConfig = defaults.tcpConfig;
    	      this.timeout = defaults.timeout;
    	      this.type = defaults.type;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder checkRegions(List<String> checkRegions) {
            if (checkRegions == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "checkRegions");
            }
            this.checkRegions = checkRegions;
            return this;
        }
        public Builder checkRegions(String... checkRegions) {
            return checkRegions(List.of(checkRegions));
        }
        @CustomType.Setter
        public Builder consecutiveFails(Integer consecutiveFails) {
            if (consecutiveFails == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "consecutiveFails");
            }
            this.consecutiveFails = consecutiveFails;
            return this;
        }
        @CustomType.Setter
        public Builder consecutiveSuccesses(Integer consecutiveSuccesses) {
            if (consecutiveSuccesses == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "consecutiveSuccesses");
            }
            this.consecutiveSuccesses = consecutiveSuccesses;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder failureReason(String failureReason) {
            if (failureReason == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "failureReason");
            }
            this.failureReason = failureReason;
            return this;
        }
        @CustomType.Setter
        public Builder healthcheckId(@Nullable String healthcheckId) {

            this.healthcheckId = healthcheckId;
            return this;
        }
        @CustomType.Setter
        public Builder httpConfig(GetHealthcheckHttpConfig httpConfig) {
            if (httpConfig == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "httpConfig");
            }
            this.httpConfig = httpConfig;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interval(Integer interval) {
            if (interval == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "interval");
            }
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder retries(Integer retries) {
            if (retries == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "retries");
            }
            this.retries = retries;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder suspended(Boolean suspended) {
            if (suspended == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "suspended");
            }
            this.suspended = suspended;
            return this;
        }
        @CustomType.Setter
        public Builder tcpConfig(GetHealthcheckTcpConfig tcpConfig) {
            if (tcpConfig == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "tcpConfig");
            }
            this.tcpConfig = tcpConfig;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetHealthcheckResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetHealthcheckResult build() {
            final var _resultValue = new GetHealthcheckResult();
            _resultValue.address = address;
            _resultValue.checkRegions = checkRegions;
            _resultValue.consecutiveFails = consecutiveFails;
            _resultValue.consecutiveSuccesses = consecutiveSuccesses;
            _resultValue.createdOn = createdOn;
            _resultValue.description = description;
            _resultValue.failureReason = failureReason;
            _resultValue.healthcheckId = healthcheckId;
            _resultValue.httpConfig = httpConfig;
            _resultValue.id = id;
            _resultValue.interval = interval;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.name = name;
            _resultValue.retries = retries;
            _resultValue.status = status;
            _resultValue.suspended = suspended;
            _resultValue.tcpConfig = tcpConfig;
            _resultValue.timeout = timeout;
            _resultValue.type = type;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
