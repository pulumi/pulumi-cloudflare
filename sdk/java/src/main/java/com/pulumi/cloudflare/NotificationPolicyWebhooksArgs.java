// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationPolicyWebhooksArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationPolicyWebhooksArgs Empty = new NotificationPolicyWebhooksArgs();

    /**
     * The account id
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return The account id
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * The name of the webhook destination. This will be included in the request body when you receive a webhook notification.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the webhook destination. This will be included in the request body when you receive a webhook notification.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Optional secret that will be passed in the `cf-webhook-auth` header when dispatching generic webhook notifications or formatted for supported destinations. Secrets are not returned in any API response body.
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return Optional secret that will be passed in the `cf-webhook-auth` header when dispatching generic webhook notifications or formatted for supported destinations. Secrets are not returned in any API response body.
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    /**
     * The POST endpoint to call when dispatching a notification.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The POST endpoint to call when dispatching a notification.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private NotificationPolicyWebhooksArgs() {}

    private NotificationPolicyWebhooksArgs(NotificationPolicyWebhooksArgs $) {
        this.accountId = $.accountId;
        this.name = $.name;
        this.secret = $.secret;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationPolicyWebhooksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationPolicyWebhooksArgs $;

        public Builder() {
            $ = new NotificationPolicyWebhooksArgs();
        }

        public Builder(NotificationPolicyWebhooksArgs defaults) {
            $ = new NotificationPolicyWebhooksArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account id
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account id
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param name The name of the webhook destination. This will be included in the request body when you receive a webhook notification.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the webhook destination. This will be included in the request body when you receive a webhook notification.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secret Optional secret that will be passed in the `cf-webhook-auth` header when dispatching generic webhook notifications or formatted for supported destinations. Secrets are not returned in any API response body.
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret Optional secret that will be passed in the `cf-webhook-auth` header when dispatching generic webhook notifications or formatted for supported destinations. Secrets are not returned in any API response body.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        /**
         * @param url The POST endpoint to call when dispatching a notification.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The POST endpoint to call when dispatching a notification.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public NotificationPolicyWebhooksArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("NotificationPolicyWebhooksArgs", "accountId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("NotificationPolicyWebhooksArgs", "name");
            }
            if ($.url == null) {
                throw new MissingRequiredPropertyException("NotificationPolicyWebhooksArgs", "url");
            }
            return $;
        }
    }

}
