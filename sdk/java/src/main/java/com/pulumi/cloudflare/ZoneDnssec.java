// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.ZoneDnssecArgs;
import com.pulumi.cloudflare.inputs.ZoneDnssecState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.ZoneDnssec;
 * import com.pulumi.cloudflare.ZoneDnssecArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleZoneDnssec = new ZoneDnssec("exampleZoneDnssec", ZoneDnssecArgs.builder()
 *             .zoneId("023e105f4ecef8ad9ca31a8372d0c353")
 *             .dnssecMultiSigner(false)
 *             .dnssecPresigned(true)
 *             .dnssecUseNsec3(false)
 *             .status("active")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/zoneDnssec:ZoneDnssec example &#39;&lt;zone_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/zoneDnssec:ZoneDnssec")
public class ZoneDnssec extends com.pulumi.resources.CustomResource {
    /**
     * Algorithm key code.
     * 
     */
    @Export(name="algorithm", refs={String.class}, tree="[0]")
    private Output<String> algorithm;

    /**
     * @return Algorithm key code.
     * 
     */
    public Output<String> algorithm() {
        return this.algorithm;
    }
    /**
     * Digest hash.
     * 
     */
    @Export(name="digest", refs={String.class}, tree="[0]")
    private Output<String> digest;

    /**
     * @return Digest hash.
     * 
     */
    public Output<String> digest() {
        return this.digest;
    }
    /**
     * Type of digest algorithm.
     * 
     */
    @Export(name="digestAlgorithm", refs={String.class}, tree="[0]")
    private Output<String> digestAlgorithm;

    /**
     * @return Type of digest algorithm.
     * 
     */
    public Output<String> digestAlgorithm() {
        return this.digestAlgorithm;
    }
    /**
     * Coded type for digest algorithm.
     * 
     */
    @Export(name="digestType", refs={String.class}, tree="[0]")
    private Output<String> digestType;

    /**
     * @return Coded type for digest algorithm.
     * 
     */
    public Output<String> digestType() {
        return this.digestType;
    }
    /**
     * If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
     * providers to serve a DNSSEC-signed zone at the same time.
     * This is required for DNSKEY records (except those automatically
     * generated by Cloudflare) to be added to the zone.
     * 
     */
    @Export(name="dnssecMultiSigner", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dnssecMultiSigner;

    /**
     * @return If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
     * providers to serve a DNSSEC-signed zone at the same time.
     * This is required for DNSKEY records (except those automatically
     * generated by Cloudflare) to be added to the zone.
     * 
     */
    public Output<Optional<Boolean>> dnssecMultiSigner() {
        return Codegen.optional(this.dnssecMultiSigner);
    }
    /**
     * If true, allows Cloudflare to transfer in a DNSSEC-signed zone
     * including signatures from an external provider, without requiring
     * Cloudflare to sign any records on the fly.
     * 
     * Note that this feature has some limitations.
     * See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.
     * 
     */
    @Export(name="dnssecPresigned", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dnssecPresigned;

    /**
     * @return If true, allows Cloudflare to transfer in a DNSSEC-signed zone
     * including signatures from an external provider, without requiring
     * Cloudflare to sign any records on the fly.
     * 
     * Note that this feature has some limitations.
     * See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.
     * 
     */
    public Output<Optional<Boolean>> dnssecPresigned() {
        return Codegen.optional(this.dnssecPresigned);
    }
    /**
     * If true, enables the use of NSEC3 together with DNSSEC on the zone.
     * Combined with setting dnssec_presigned to true, this enables the use of
     * NSEC3 records when transferring in from an external provider.
     * If dnssec_presigned is instead set to false (default), NSEC3 records will be
     * generated and signed at request time.
     * 
     * See [DNSSEC with NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.
     * 
     */
    @Export(name="dnssecUseNsec3", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dnssecUseNsec3;

    /**
     * @return If true, enables the use of NSEC3 together with DNSSEC on the zone.
     * Combined with setting dnssec_presigned to true, this enables the use of
     * NSEC3 records when transferring in from an external provider.
     * If dnssec_presigned is instead set to false (default), NSEC3 records will be
     * generated and signed at request time.
     * 
     * See [DNSSEC with NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.
     * 
     */
    public Output<Optional<Boolean>> dnssecUseNsec3() {
        return Codegen.optional(this.dnssecUseNsec3);
    }
    /**
     * Full DS record.
     * 
     */
    @Export(name="ds", refs={String.class}, tree="[0]")
    private Output<String> ds;

    /**
     * @return Full DS record.
     * 
     */
    public Output<String> ds() {
        return this.ds;
    }
    /**
     * Flag for DNSSEC record.
     * 
     */
    @Export(name="flags", refs={Double.class}, tree="[0]")
    private Output<Double> flags;

    /**
     * @return Flag for DNSSEC record.
     * 
     */
    public Output<Double> flags() {
        return this.flags;
    }
    /**
     * Code for key tag.
     * 
     */
    @Export(name="keyTag", refs={Double.class}, tree="[0]")
    private Output<Double> keyTag;

    /**
     * @return Code for key tag.
     * 
     */
    public Output<Double> keyTag() {
        return this.keyTag;
    }
    /**
     * Algorithm key type.
     * 
     */
    @Export(name="keyType", refs={String.class}, tree="[0]")
    private Output<String> keyType;

    /**
     * @return Algorithm key type.
     * 
     */
    public Output<String> keyType() {
        return this.keyType;
    }
    /**
     * When DNSSEC was last modified.
     * 
     */
    @Export(name="modifiedOn", refs={String.class}, tree="[0]")
    private Output<String> modifiedOn;

    /**
     * @return When DNSSEC was last modified.
     * 
     */
    public Output<String> modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * Public key for DS record.
     * 
     */
    @Export(name="publicKey", refs={String.class}, tree="[0]")
    private Output<String> publicKey;

    /**
     * @return Public key for DS record.
     * 
     */
    public Output<String> publicKey() {
        return this.publicKey;
    }
    /**
     * Status of DNSSEC, based on user-desired state and presence of necessary records.
     * Available values: &#34;active&#34;, &#34;disabled&#34;.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> status;

    /**
     * @return Status of DNSSEC, based on user-desired state and presence of necessary records.
     * Available values: &#34;active&#34;, &#34;disabled&#34;.
     * 
     */
    public Output<Optional<String>> status() {
        return Codegen.optional(this.status);
    }
    /**
     * Identifier.
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ZoneDnssec(java.lang.String name) {
        this(name, ZoneDnssecArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ZoneDnssec(java.lang.String name, ZoneDnssecArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ZoneDnssec(java.lang.String name, ZoneDnssecArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/zoneDnssec:ZoneDnssec", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ZoneDnssec(java.lang.String name, Output<java.lang.String> id, @Nullable ZoneDnssecState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/zoneDnssec:ZoneDnssec", name, state, makeResourceOptions(options, id), false);
    }

    private static ZoneDnssecArgs makeArgs(ZoneDnssecArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ZoneDnssecArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ZoneDnssec get(java.lang.String name, Output<java.lang.String> id, @Nullable ZoneDnssecState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ZoneDnssec(name, id, state, options);
    }
}
