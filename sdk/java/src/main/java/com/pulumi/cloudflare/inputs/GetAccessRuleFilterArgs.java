// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.GetAccessRuleFilterConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAccessRuleFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetAccessRuleFilterArgs Empty = new GetAccessRuleFilterArgs();

    @Import(name="configuration")
    private @Nullable Output<GetAccessRuleFilterConfigurationArgs> configuration;

    public Optional<Output<GetAccessRuleFilterConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * The direction used to sort returned rules.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<String> direction;

    /**
     * @return The direction used to sort returned rules.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    public Optional<Output<String>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
     * Available values: &#34;any&#34;, &#34;all&#34;.
     * 
     */
    @Import(name="match", required=true)
    private Output<String> match;

    /**
     * @return When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
     * Available values: &#34;any&#34;, &#34;all&#34;.
     * 
     */
    public Output<String> match() {
        return this.match;
    }

    /**
     * The action to apply to a matched request.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The action to apply to a matched request.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The string to search for in the notes of existing IP Access rules.
     * Notes: For example, the string &#39;attack&#39; would match IP Access rules with notes &#39;Attack 26/02&#39; and &#39;Attack 27/02&#39;. The search is case insensitive.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return The string to search for in the notes of existing IP Access rules.
     * Notes: For example, the string &#39;attack&#39; would match IP Access rules with notes &#39;Attack 26/02&#39; and &#39;Attack 27/02&#39;. The search is case insensitive.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * The field used to sort returned rules.
     * Available values: &#34;configuration.target&#34;, &#34;configuration.value&#34;, &#34;mode&#34;.
     * 
     */
    @Import(name="order")
    private @Nullable Output<String> order;

    /**
     * @return The field used to sort returned rules.
     * Available values: &#34;configuration.target&#34;, &#34;configuration.value&#34;, &#34;mode&#34;.
     * 
     */
    public Optional<Output<String>> order() {
        return Optional.ofNullable(this.order);
    }

    private GetAccessRuleFilterArgs() {}

    private GetAccessRuleFilterArgs(GetAccessRuleFilterArgs $) {
        this.configuration = $.configuration;
        this.direction = $.direction;
        this.match = $.match;
        this.mode = $.mode;
        this.notes = $.notes;
        this.order = $.order;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAccessRuleFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAccessRuleFilterArgs $;

        public Builder() {
            $ = new GetAccessRuleFilterArgs();
        }

        public Builder(GetAccessRuleFilterArgs defaults) {
            $ = new GetAccessRuleFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder configuration(@Nullable Output<GetAccessRuleFilterConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        public Builder configuration(GetAccessRuleFilterConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param direction The direction used to sort returned rules.
         * Available values: &#34;asc&#34;, &#34;desc&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction The direction used to sort returned rules.
         * Available values: &#34;asc&#34;, &#34;desc&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param match When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
         * Available values: &#34;any&#34;, &#34;all&#34;.
         * 
         * @return builder
         * 
         */
        public Builder match(Output<String> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
         * Available values: &#34;any&#34;, &#34;all&#34;.
         * 
         * @return builder
         * 
         */
        public Builder match(String match) {
            return match(Output.of(match));
        }

        /**
         * @param mode The action to apply to a matched request.
         * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The action to apply to a matched request.
         * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param notes The string to search for in the notes of existing IP Access rules.
         * Notes: For example, the string &#39;attack&#39; would match IP Access rules with notes &#39;Attack 26/02&#39; and &#39;Attack 27/02&#39;. The search is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes The string to search for in the notes of existing IP Access rules.
         * Notes: For example, the string &#39;attack&#39; would match IP Access rules with notes &#39;Attack 26/02&#39; and &#39;Attack 27/02&#39;. The search is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param order The field used to sort returned rules.
         * Available values: &#34;configuration.target&#34;, &#34;configuration.value&#34;, &#34;mode&#34;.
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable Output<String> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order The field used to sort returned rules.
         * Available values: &#34;configuration.target&#34;, &#34;configuration.value&#34;, &#34;mode&#34;.
         * 
         * @return builder
         * 
         */
        public Builder order(String order) {
            return order(Output.of(order));
        }

        public GetAccessRuleFilterArgs build() {
            if ($.match == null) {
                throw new MissingRequiredPropertyException("GetAccessRuleFilterArgs", "match");
            }
            return $;
        }
    }

}
