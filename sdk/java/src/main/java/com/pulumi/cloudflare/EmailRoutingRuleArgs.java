// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.EmailRoutingRuleActionArgs;
import com.pulumi.cloudflare.inputs.EmailRoutingRuleMatcherArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EmailRoutingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final EmailRoutingRuleArgs Empty = new EmailRoutingRuleArgs();

    /**
     * Actions to take when a match is found.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<EmailRoutingRuleActionArgs>> actions;

    /**
     * @return Actions to take when a match is found.
     * 
     */
    public Optional<Output<List<EmailRoutingRuleActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * Whether the email routing rule is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the email routing rule is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Matching patterns to forward to your actions.
     * 
     */
    @Import(name="matchers")
    private @Nullable Output<List<EmailRoutingRuleMatcherArgs>> matchers;

    /**
     * @return Matching patterns to forward to your actions.
     * 
     */
    public Optional<Output<List<EmailRoutingRuleMatcherArgs>>> matchers() {
        return Optional.ofNullable(this.matchers);
    }

    /**
     * Routing rule name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Routing rule name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The priority of the email routing rule.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority of the email routing rule.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The zone identifier to target for the resource.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private EmailRoutingRuleArgs() {}

    private EmailRoutingRuleArgs(EmailRoutingRuleArgs $) {
        this.actions = $.actions;
        this.enabled = $.enabled;
        this.matchers = $.matchers;
        this.name = $.name;
        this.priority = $.priority;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailRoutingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailRoutingRuleArgs $;

        public Builder() {
            $ = new EmailRoutingRuleArgs();
        }

        public Builder(EmailRoutingRuleArgs defaults) {
            $ = new EmailRoutingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions Actions to take when a match is found.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<EmailRoutingRuleActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions Actions to take when a match is found.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<EmailRoutingRuleActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions Actions to take when a match is found.
         * 
         * @return builder
         * 
         */
        public Builder actions(EmailRoutingRuleActionArgs... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param enabled Whether the email routing rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the email routing rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param matchers Matching patterns to forward to your actions.
         * 
         * @return builder
         * 
         */
        public Builder matchers(@Nullable Output<List<EmailRoutingRuleMatcherArgs>> matchers) {
            $.matchers = matchers;
            return this;
        }

        /**
         * @param matchers Matching patterns to forward to your actions.
         * 
         * @return builder
         * 
         */
        public Builder matchers(List<EmailRoutingRuleMatcherArgs> matchers) {
            return matchers(Output.of(matchers));
        }

        /**
         * @param matchers Matching patterns to forward to your actions.
         * 
         * @return builder
         * 
         */
        public Builder matchers(EmailRoutingRuleMatcherArgs... matchers) {
            return matchers(List.of(matchers));
        }

        /**
         * @param name Routing rule name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Routing rule name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority The priority of the email routing rule.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the email routing rule.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param zoneId The zone identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public EmailRoutingRuleArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("EmailRoutingRuleArgs", "name");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("EmailRoutingRuleArgs", "zoneId");
            }
            return $;
        }
    }

}
