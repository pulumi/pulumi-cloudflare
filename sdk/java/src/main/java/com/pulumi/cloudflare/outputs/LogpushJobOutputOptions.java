// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogpushJobOutputOptions {
    /**
     * @return String to be prepended before each batch.
     * 
     */
    private @Nullable String batchPrefix;
    /**
     * @return String to be appended after each batch.
     * 
     */
    private @Nullable String batchSuffix;
    /**
     * @return Mitigation for CVE-2021-44228. If set to true, will cause all occurrences of ${ in the generated files to be replaced with x{. Defaults to `false`.
     * 
     */
    private @Nullable Boolean cve20214428;
    /**
     * @return String to join fields. This field be ignored when record_template is set. Defaults to `,`.
     * 
     */
    private @Nullable String fieldDelimiter;
    /**
     * @return List of field names to be included in the Logpush output.
     * 
     */
    private @Nullable List<String> fieldNames;
    /**
     * @return Specifies the output type. Available values: `ndjson`, `csv`. Defaults to `ndjson`.
     * 
     */
    private @Nullable String outputType;
    /**
     * @return String to be inserted in-between the records as separator.
     * 
     */
    private @Nullable String recordDelimiter;
    /**
     * @return String to be prepended before each record. Defaults to `{`.
     * 
     */
    private @Nullable String recordPrefix;
    /**
     * @return String to be appended after each record. Defaults to `}`.
     * 
     */
    private @Nullable String recordSuffix;
    /**
     * @return String to use as template for each record instead of the default comma-separated list.
     * 
     */
    private @Nullable String recordTemplate;
    /**
     * @return Specifies the sampling rate. Defaults to `1`.
     * 
     */
    private @Nullable Double sampleRate;
    /**
     * @return Specifies the format for timestamps. Available values: `unixnano`, `unix`, `rfc3339`. Defaults to `unixnano`.
     * 
     */
    private @Nullable String timestampFormat;

    private LogpushJobOutputOptions() {}
    /**
     * @return String to be prepended before each batch.
     * 
     */
    public Optional<String> batchPrefix() {
        return Optional.ofNullable(this.batchPrefix);
    }
    /**
     * @return String to be appended after each batch.
     * 
     */
    public Optional<String> batchSuffix() {
        return Optional.ofNullable(this.batchSuffix);
    }
    /**
     * @return Mitigation for CVE-2021-44228. If set to true, will cause all occurrences of ${ in the generated files to be replaced with x{. Defaults to `false`.
     * 
     */
    public Optional<Boolean> cve20214428() {
        return Optional.ofNullable(this.cve20214428);
    }
    /**
     * @return String to join fields. This field be ignored when record_template is set. Defaults to `,`.
     * 
     */
    public Optional<String> fieldDelimiter() {
        return Optional.ofNullable(this.fieldDelimiter);
    }
    /**
     * @return List of field names to be included in the Logpush output.
     * 
     */
    public List<String> fieldNames() {
        return this.fieldNames == null ? List.of() : this.fieldNames;
    }
    /**
     * @return Specifies the output type. Available values: `ndjson`, `csv`. Defaults to `ndjson`.
     * 
     */
    public Optional<String> outputType() {
        return Optional.ofNullable(this.outputType);
    }
    /**
     * @return String to be inserted in-between the records as separator.
     * 
     */
    public Optional<String> recordDelimiter() {
        return Optional.ofNullable(this.recordDelimiter);
    }
    /**
     * @return String to be prepended before each record. Defaults to `{`.
     * 
     */
    public Optional<String> recordPrefix() {
        return Optional.ofNullable(this.recordPrefix);
    }
    /**
     * @return String to be appended after each record. Defaults to `}`.
     * 
     */
    public Optional<String> recordSuffix() {
        return Optional.ofNullable(this.recordSuffix);
    }
    /**
     * @return String to use as template for each record instead of the default comma-separated list.
     * 
     */
    public Optional<String> recordTemplate() {
        return Optional.ofNullable(this.recordTemplate);
    }
    /**
     * @return Specifies the sampling rate. Defaults to `1`.
     * 
     */
    public Optional<Double> sampleRate() {
        return Optional.ofNullable(this.sampleRate);
    }
    /**
     * @return Specifies the format for timestamps. Available values: `unixnano`, `unix`, `rfc3339`. Defaults to `unixnano`.
     * 
     */
    public Optional<String> timestampFormat() {
        return Optional.ofNullable(this.timestampFormat);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogpushJobOutputOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String batchPrefix;
        private @Nullable String batchSuffix;
        private @Nullable Boolean cve20214428;
        private @Nullable String fieldDelimiter;
        private @Nullable List<String> fieldNames;
        private @Nullable String outputType;
        private @Nullable String recordDelimiter;
        private @Nullable String recordPrefix;
        private @Nullable String recordSuffix;
        private @Nullable String recordTemplate;
        private @Nullable Double sampleRate;
        private @Nullable String timestampFormat;
        public Builder() {}
        public Builder(LogpushJobOutputOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchPrefix = defaults.batchPrefix;
    	      this.batchSuffix = defaults.batchSuffix;
    	      this.cve20214428 = defaults.cve20214428;
    	      this.fieldDelimiter = defaults.fieldDelimiter;
    	      this.fieldNames = defaults.fieldNames;
    	      this.outputType = defaults.outputType;
    	      this.recordDelimiter = defaults.recordDelimiter;
    	      this.recordPrefix = defaults.recordPrefix;
    	      this.recordSuffix = defaults.recordSuffix;
    	      this.recordTemplate = defaults.recordTemplate;
    	      this.sampleRate = defaults.sampleRate;
    	      this.timestampFormat = defaults.timestampFormat;
        }

        @CustomType.Setter
        public Builder batchPrefix(@Nullable String batchPrefix) {

            this.batchPrefix = batchPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder batchSuffix(@Nullable String batchSuffix) {

            this.batchSuffix = batchSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder cve20214428(@Nullable Boolean cve20214428) {

            this.cve20214428 = cve20214428;
            return this;
        }
        @CustomType.Setter
        public Builder fieldDelimiter(@Nullable String fieldDelimiter) {

            this.fieldDelimiter = fieldDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder fieldNames(@Nullable List<String> fieldNames) {

            this.fieldNames = fieldNames;
            return this;
        }
        public Builder fieldNames(String... fieldNames) {
            return fieldNames(List.of(fieldNames));
        }
        @CustomType.Setter
        public Builder outputType(@Nullable String outputType) {

            this.outputType = outputType;
            return this;
        }
        @CustomType.Setter
        public Builder recordDelimiter(@Nullable String recordDelimiter) {

            this.recordDelimiter = recordDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder recordPrefix(@Nullable String recordPrefix) {

            this.recordPrefix = recordPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder recordSuffix(@Nullable String recordSuffix) {

            this.recordSuffix = recordSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder recordTemplate(@Nullable String recordTemplate) {

            this.recordTemplate = recordTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder sampleRate(@Nullable Double sampleRate) {

            this.sampleRate = sampleRate;
            return this;
        }
        @CustomType.Setter
        public Builder timestampFormat(@Nullable String timestampFormat) {

            this.timestampFormat = timestampFormat;
            return this;
        }
        public LogpushJobOutputOptions build() {
            final var _resultValue = new LogpushJobOutputOptions();
            _resultValue.batchPrefix = batchPrefix;
            _resultValue.batchSuffix = batchSuffix;
            _resultValue.cve20214428 = cve20214428;
            _resultValue.fieldDelimiter = fieldDelimiter;
            _resultValue.fieldNames = fieldNames;
            _resultValue.outputType = outputType;
            _resultValue.recordDelimiter = recordDelimiter;
            _resultValue.recordPrefix = recordPrefix;
            _resultValue.recordSuffix = recordSuffix;
            _resultValue.recordTemplate = recordTemplate;
            _resultValue.sampleRate = sampleRate;
            _resultValue.timestampFormat = timestampFormat;
            return _resultValue;
        }
    }
}
