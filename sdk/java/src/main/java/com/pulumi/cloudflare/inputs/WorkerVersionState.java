// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.WorkerVersionAnnotationsArgs;
import com.pulumi.cloudflare.inputs.WorkerVersionAssetsArgs;
import com.pulumi.cloudflare.inputs.WorkerVersionBindingArgs;
import com.pulumi.cloudflare.inputs.WorkerVersionLimitsArgs;
import com.pulumi.cloudflare.inputs.WorkerVersionMigrationsArgs;
import com.pulumi.cloudflare.inputs.WorkerVersionModuleArgs;
import com.pulumi.cloudflare.inputs.WorkerVersionPlacementArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkerVersionState extends com.pulumi.resources.ResourceArgs {

    public static final WorkerVersionState Empty = new WorkerVersionState();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Metadata about the version.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<WorkerVersionAnnotationsArgs> annotations;

    /**
     * @return Metadata about the version.
     * 
     */
    public Optional<Output<WorkerVersionAnnotationsArgs>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Configuration for assets within a Worker.
     * 
     */
    @Import(name="assets")
    private @Nullable Output<WorkerVersionAssetsArgs> assets;

    /**
     * @return Configuration for assets within a Worker.
     * 
     */
    public Optional<Output<WorkerVersionAssetsArgs>> assets() {
        return Optional.ofNullable(this.assets);
    }

    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     * 
     */
    @Import(name="bindings")
    private @Nullable Output<List<WorkerVersionBindingArgs>> bindings;

    /**
     * @return List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     * 
     */
    public Optional<Output<List<WorkerVersionBindingArgs>>> bindings() {
        return Optional.ofNullable(this.bindings);
    }

    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     * 
     */
    @Import(name="compatibilityDate")
    private @Nullable Output<String> compatibilityDate;

    /**
     * @return Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     * 
     */
    public Optional<Output<String>> compatibilityDate() {
        return Optional.ofNullable(this.compatibilityDate);
    }

    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
     * 
     */
    @Import(name="compatibilityFlags")
    private @Nullable Output<List<String>> compatibilityFlags;

    /**
     * @return Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
     * 
     */
    public Optional<Output<List<String>>> compatibilityFlags() {
        return Optional.ofNullable(this.compatibilityFlags);
    }

    /**
     * When the version was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return When the version was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * Resource limits enforced at runtime.
     * 
     */
    @Import(name="limits")
    private @Nullable Output<WorkerVersionLimitsArgs> limits;

    /**
     * @return Resource limits enforced at runtime.
     * 
     */
    public Optional<Output<WorkerVersionLimitsArgs>> limits() {
        return Optional.ofNullable(this.limits);
    }

    /**
     * The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
     * 
     */
    @Import(name="mainModule")
    private @Nullable Output<String> mainModule;

    /**
     * @return The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
     * 
     */
    public Optional<Output<String>> mainModule() {
        return Optional.ofNullable(this.mainModule);
    }

    /**
     * Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
     * 
     */
    @Import(name="migrations")
    private @Nullable Output<WorkerVersionMigrationsArgs> migrations;

    /**
     * @return Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
     * 
     */
    public Optional<Output<WorkerVersionMigrationsArgs>> migrations() {
        return Optional.ofNullable(this.migrations);
    }

    /**
     * Code, sourcemaps, and other content used at runtime.
     * 
     * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
     * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
     * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
     * included as modules named `_headers` and `_redirects` with content type `text/plain`.
     * 
     */
    @Import(name="modules")
    private @Nullable Output<List<WorkerVersionModuleArgs>> modules;

    /**
     * @return Code, sourcemaps, and other content used at runtime.
     * 
     * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
     * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
     * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
     * included as modules named `_headers` and `_redirects` with content type `text/plain`.
     * 
     */
    public Optional<Output<List<WorkerVersionModuleArgs>>> modules() {
        return Optional.ofNullable(this.modules);
    }

    /**
     * The integer version number, starting from one.
     * 
     */
    @Import(name="number")
    private @Nullable Output<Integer> number;

    /**
     * @return The integer version number, starting from one.
     * 
     */
    public Optional<Output<Integer>> number() {
        return Optional.ofNullable(this.number);
    }

    /**
     * Placement settings for the version.
     * 
     */
    @Import(name="placement")
    private @Nullable Output<WorkerVersionPlacementArgs> placement;

    /**
     * @return Placement settings for the version.
     * 
     */
    public Optional<Output<WorkerVersionPlacementArgs>> placement() {
        return Optional.ofNullable(this.placement);
    }

    /**
     * The client used to create the version.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The client used to create the version.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Usage model for the version.
     * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    @Import(name="usageModel")
    private @Nullable Output<String> usageModel;

    /**
     * @return Usage model for the version.
     * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    public Optional<Output<String>> usageModel() {
        return Optional.ofNullable(this.usageModel);
    }

    /**
     * Identifier for the Worker, which can be ID or name.
     * 
     */
    @Import(name="workerId")
    private @Nullable Output<String> workerId;

    /**
     * @return Identifier for the Worker, which can be ID or name.
     * 
     */
    public Optional<Output<String>> workerId() {
        return Optional.ofNullable(this.workerId);
    }

    private WorkerVersionState() {}

    private WorkerVersionState(WorkerVersionState $) {
        this.accountId = $.accountId;
        this.annotations = $.annotations;
        this.assets = $.assets;
        this.bindings = $.bindings;
        this.compatibilityDate = $.compatibilityDate;
        this.compatibilityFlags = $.compatibilityFlags;
        this.createdOn = $.createdOn;
        this.limits = $.limits;
        this.mainModule = $.mainModule;
        this.migrations = $.migrations;
        this.modules = $.modules;
        this.number = $.number;
        this.placement = $.placement;
        this.source = $.source;
        this.usageModel = $.usageModel;
        this.workerId = $.workerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerVersionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerVersionState $;

        public Builder() {
            $ = new WorkerVersionState();
        }

        public Builder(WorkerVersionState defaults) {
            $ = new WorkerVersionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param annotations Metadata about the version.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<WorkerVersionAnnotationsArgs> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Metadata about the version.
         * 
         * @return builder
         * 
         */
        public Builder annotations(WorkerVersionAnnotationsArgs annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param assets Configuration for assets within a Worker.
         * 
         * @return builder
         * 
         */
        public Builder assets(@Nullable Output<WorkerVersionAssetsArgs> assets) {
            $.assets = assets;
            return this;
        }

        /**
         * @param assets Configuration for assets within a Worker.
         * 
         * @return builder
         * 
         */
        public Builder assets(WorkerVersionAssetsArgs assets) {
            return assets(Output.of(assets));
        }

        /**
         * @param bindings List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
         * 
         * @return builder
         * 
         */
        public Builder bindings(@Nullable Output<List<WorkerVersionBindingArgs>> bindings) {
            $.bindings = bindings;
            return this;
        }

        /**
         * @param bindings List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
         * 
         * @return builder
         * 
         */
        public Builder bindings(List<WorkerVersionBindingArgs> bindings) {
            return bindings(Output.of(bindings));
        }

        /**
         * @param bindings List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
         * 
         * @return builder
         * 
         */
        public Builder bindings(WorkerVersionBindingArgs... bindings) {
            return bindings(List.of(bindings));
        }

        /**
         * @param compatibilityDate Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityDate(@Nullable Output<String> compatibilityDate) {
            $.compatibilityDate = compatibilityDate;
            return this;
        }

        /**
         * @param compatibilityDate Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityDate(String compatibilityDate) {
            return compatibilityDate(Output.of(compatibilityDate));
        }

        /**
         * @param compatibilityFlags Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityFlags(@Nullable Output<List<String>> compatibilityFlags) {
            $.compatibilityFlags = compatibilityFlags;
            return this;
        }

        /**
         * @param compatibilityFlags Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityFlags(List<String> compatibilityFlags) {
            return compatibilityFlags(Output.of(compatibilityFlags));
        }

        /**
         * @param compatibilityFlags Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityFlags(String... compatibilityFlags) {
            return compatibilityFlags(List.of(compatibilityFlags));
        }

        /**
         * @param createdOn When the version was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn When the version was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param limits Resource limits enforced at runtime.
         * 
         * @return builder
         * 
         */
        public Builder limits(@Nullable Output<WorkerVersionLimitsArgs> limits) {
            $.limits = limits;
            return this;
        }

        /**
         * @param limits Resource limits enforced at runtime.
         * 
         * @return builder
         * 
         */
        public Builder limits(WorkerVersionLimitsArgs limits) {
            return limits(Output.of(limits));
        }

        /**
         * @param mainModule The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
         * 
         * @return builder
         * 
         */
        public Builder mainModule(@Nullable Output<String> mainModule) {
            $.mainModule = mainModule;
            return this;
        }

        /**
         * @param mainModule The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
         * 
         * @return builder
         * 
         */
        public Builder mainModule(String mainModule) {
            return mainModule(Output.of(mainModule));
        }

        /**
         * @param migrations Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
         * 
         * @return builder
         * 
         */
        public Builder migrations(@Nullable Output<WorkerVersionMigrationsArgs> migrations) {
            $.migrations = migrations;
            return this;
        }

        /**
         * @param migrations Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
         * 
         * @return builder
         * 
         */
        public Builder migrations(WorkerVersionMigrationsArgs migrations) {
            return migrations(Output.of(migrations));
        }

        /**
         * @param modules Code, sourcemaps, and other content used at runtime.
         * 
         * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
         * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
         * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
         * included as modules named `_headers` and `_redirects` with content type `text/plain`.
         * 
         * @return builder
         * 
         */
        public Builder modules(@Nullable Output<List<WorkerVersionModuleArgs>> modules) {
            $.modules = modules;
            return this;
        }

        /**
         * @param modules Code, sourcemaps, and other content used at runtime.
         * 
         * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
         * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
         * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
         * included as modules named `_headers` and `_redirects` with content type `text/plain`.
         * 
         * @return builder
         * 
         */
        public Builder modules(List<WorkerVersionModuleArgs> modules) {
            return modules(Output.of(modules));
        }

        /**
         * @param modules Code, sourcemaps, and other content used at runtime.
         * 
         * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
         * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
         * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
         * included as modules named `_headers` and `_redirects` with content type `text/plain`.
         * 
         * @return builder
         * 
         */
        public Builder modules(WorkerVersionModuleArgs... modules) {
            return modules(List.of(modules));
        }

        /**
         * @param number The integer version number, starting from one.
         * 
         * @return builder
         * 
         */
        public Builder number(@Nullable Output<Integer> number) {
            $.number = number;
            return this;
        }

        /**
         * @param number The integer version number, starting from one.
         * 
         * @return builder
         * 
         */
        public Builder number(Integer number) {
            return number(Output.of(number));
        }

        /**
         * @param placement Placement settings for the version.
         * 
         * @return builder
         * 
         */
        public Builder placement(@Nullable Output<WorkerVersionPlacementArgs> placement) {
            $.placement = placement;
            return this;
        }

        /**
         * @param placement Placement settings for the version.
         * 
         * @return builder
         * 
         */
        public Builder placement(WorkerVersionPlacementArgs placement) {
            return placement(Output.of(placement));
        }

        /**
         * @param source The client used to create the version.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The client used to create the version.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param usageModel Usage model for the version.
         * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
         * 
         * @return builder
         * 
         * @deprecated
         * This attribute is deprecated.
         * 
         */
        @Deprecated /* This attribute is deprecated. */
        public Builder usageModel(@Nullable Output<String> usageModel) {
            $.usageModel = usageModel;
            return this;
        }

        /**
         * @param usageModel Usage model for the version.
         * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
         * 
         * @return builder
         * 
         * @deprecated
         * This attribute is deprecated.
         * 
         */
        @Deprecated /* This attribute is deprecated. */
        public Builder usageModel(String usageModel) {
            return usageModel(Output.of(usageModel));
        }

        /**
         * @param workerId Identifier for the Worker, which can be ID or name.
         * 
         * @return builder
         * 
         */
        public Builder workerId(@Nullable Output<String> workerId) {
            $.workerId = workerId;
            return this;
        }

        /**
         * @param workerId Identifier for the Worker, which can be ID or name.
         * 
         * @return builder
         * 
         */
        public Builder workerId(String workerId) {
            return workerId(Output.of(workerId));
        }

        public WorkerVersionState build() {
            return $;
        }
    }

}
