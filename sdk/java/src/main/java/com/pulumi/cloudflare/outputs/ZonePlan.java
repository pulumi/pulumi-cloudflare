// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ZonePlan {
    /**
     * @return States if the subscription can be activated.
     * 
     */
    private @Nullable Boolean canSubscribe;
    /**
     * @return The denomination of the customer.
     * 
     */
    private @Nullable String currency;
    /**
     * @return If this Zone is managed by another company.
     * 
     */
    private @Nullable Boolean externallyManaged;
    /**
     * @return How often the customer is billed.
     * 
     */
    private @Nullable String frequency;
    /**
     * @return Identifier
     * 
     */
    private @Nullable String id;
    /**
     * @return States if the subscription active.
     * 
     */
    private @Nullable Boolean isSubscribed;
    /**
     * @return If the legacy discount applies to this Zone.
     * 
     */
    private @Nullable Boolean legacyDiscount;
    /**
     * @return The legacy name of the plan.
     * 
     */
    private @Nullable String legacyId;
    /**
     * @return Name of the owner
     * 
     */
    private @Nullable String name;
    /**
     * @return How much the customer is paying.
     * 
     */
    private @Nullable Double price;

    private ZonePlan() {}
    /**
     * @return States if the subscription can be activated.
     * 
     */
    public Optional<Boolean> canSubscribe() {
        return Optional.ofNullable(this.canSubscribe);
    }
    /**
     * @return The denomination of the customer.
     * 
     */
    public Optional<String> currency() {
        return Optional.ofNullable(this.currency);
    }
    /**
     * @return If this Zone is managed by another company.
     * 
     */
    public Optional<Boolean> externallyManaged() {
        return Optional.ofNullable(this.externallyManaged);
    }
    /**
     * @return How often the customer is billed.
     * 
     */
    public Optional<String> frequency() {
        return Optional.ofNullable(this.frequency);
    }
    /**
     * @return Identifier
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return States if the subscription active.
     * 
     */
    public Optional<Boolean> isSubscribed() {
        return Optional.ofNullable(this.isSubscribed);
    }
    /**
     * @return If the legacy discount applies to this Zone.
     * 
     */
    public Optional<Boolean> legacyDiscount() {
        return Optional.ofNullable(this.legacyDiscount);
    }
    /**
     * @return The legacy name of the plan.
     * 
     */
    public Optional<String> legacyId() {
        return Optional.ofNullable(this.legacyId);
    }
    /**
     * @return Name of the owner
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return How much the customer is paying.
     * 
     */
    public Optional<Double> price() {
        return Optional.ofNullable(this.price);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ZonePlan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean canSubscribe;
        private @Nullable String currency;
        private @Nullable Boolean externallyManaged;
        private @Nullable String frequency;
        private @Nullable String id;
        private @Nullable Boolean isSubscribed;
        private @Nullable Boolean legacyDiscount;
        private @Nullable String legacyId;
        private @Nullable String name;
        private @Nullable Double price;
        public Builder() {}
        public Builder(ZonePlan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canSubscribe = defaults.canSubscribe;
    	      this.currency = defaults.currency;
    	      this.externallyManaged = defaults.externallyManaged;
    	      this.frequency = defaults.frequency;
    	      this.id = defaults.id;
    	      this.isSubscribed = defaults.isSubscribed;
    	      this.legacyDiscount = defaults.legacyDiscount;
    	      this.legacyId = defaults.legacyId;
    	      this.name = defaults.name;
    	      this.price = defaults.price;
        }

        @CustomType.Setter
        public Builder canSubscribe(@Nullable Boolean canSubscribe) {

            this.canSubscribe = canSubscribe;
            return this;
        }
        @CustomType.Setter
        public Builder currency(@Nullable String currency) {

            this.currency = currency;
            return this;
        }
        @CustomType.Setter
        public Builder externallyManaged(@Nullable Boolean externallyManaged) {

            this.externallyManaged = externallyManaged;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(@Nullable String frequency) {

            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isSubscribed(@Nullable Boolean isSubscribed) {

            this.isSubscribed = isSubscribed;
            return this;
        }
        @CustomType.Setter
        public Builder legacyDiscount(@Nullable Boolean legacyDiscount) {

            this.legacyDiscount = legacyDiscount;
            return this;
        }
        @CustomType.Setter
        public Builder legacyId(@Nullable String legacyId) {

            this.legacyId = legacyId;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder price(@Nullable Double price) {

            this.price = price;
            return this;
        }
        public ZonePlan build() {
            final var _resultValue = new ZonePlan();
            _resultValue.canSubscribe = canSubscribe;
            _resultValue.currency = currency;
            _resultValue.externallyManaged = externallyManaged;
            _resultValue.frequency = frequency;
            _resultValue.id = id;
            _resultValue.isSubscribed = isSubscribed;
            _resultValue.legacyDiscount = legacyDiscount;
            _resultValue.legacyId = legacyId;
            _resultValue.name = name;
            _resultValue.price = price;
            return _resultValue;
        }
    }
}
