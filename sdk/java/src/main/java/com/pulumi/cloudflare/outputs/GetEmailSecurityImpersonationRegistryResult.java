// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetEmailSecurityImpersonationRegistryFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEmailSecurityImpersonationRegistryResult {
    /**
     * @return Account Identifier
     * 
     */
    private String accountId;
    private String comments;
    private String createdAt;
    private Integer directoryId;
    private Integer directoryNodeId;
    private @Nullable Integer displayNameId;
    private String email;
    private String externalDirectoryNodeId;
    private @Nullable GetEmailSecurityImpersonationRegistryFilter filter;
    /**
     * @return The ID of this resource.
     * 
     */
    private Integer id;
    private Boolean isEmailRegex;
    private String lastModified;
    private String name;
    private String provenance;

    private GetEmailSecurityImpersonationRegistryResult() {}
    /**
     * @return Account Identifier
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    public String comments() {
        return this.comments;
    }
    public String createdAt() {
        return this.createdAt;
    }
    public Integer directoryId() {
        return this.directoryId;
    }
    public Integer directoryNodeId() {
        return this.directoryNodeId;
    }
    public Optional<Integer> displayNameId() {
        return Optional.ofNullable(this.displayNameId);
    }
    public String email() {
        return this.email;
    }
    public String externalDirectoryNodeId() {
        return this.externalDirectoryNodeId;
    }
    public Optional<GetEmailSecurityImpersonationRegistryFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public Integer id() {
        return this.id;
    }
    public Boolean isEmailRegex() {
        return this.isEmailRegex;
    }
    public String lastModified() {
        return this.lastModified;
    }
    public String name() {
        return this.name;
    }
    public String provenance() {
        return this.provenance;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEmailSecurityImpersonationRegistryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String comments;
        private String createdAt;
        private Integer directoryId;
        private Integer directoryNodeId;
        private @Nullable Integer displayNameId;
        private String email;
        private String externalDirectoryNodeId;
        private @Nullable GetEmailSecurityImpersonationRegistryFilter filter;
        private Integer id;
        private Boolean isEmailRegex;
        private String lastModified;
        private String name;
        private String provenance;
        public Builder() {}
        public Builder(GetEmailSecurityImpersonationRegistryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.comments = defaults.comments;
    	      this.createdAt = defaults.createdAt;
    	      this.directoryId = defaults.directoryId;
    	      this.directoryNodeId = defaults.directoryNodeId;
    	      this.displayNameId = defaults.displayNameId;
    	      this.email = defaults.email;
    	      this.externalDirectoryNodeId = defaults.externalDirectoryNodeId;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.isEmailRegex = defaults.isEmailRegex;
    	      this.lastModified = defaults.lastModified;
    	      this.name = defaults.name;
    	      this.provenance = defaults.provenance;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder comments(String comments) {
            if (comments == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "comments");
            }
            this.comments = comments;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder directoryId(Integer directoryId) {
            if (directoryId == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "directoryId");
            }
            this.directoryId = directoryId;
            return this;
        }
        @CustomType.Setter
        public Builder directoryNodeId(Integer directoryNodeId) {
            if (directoryNodeId == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "directoryNodeId");
            }
            this.directoryNodeId = directoryNodeId;
            return this;
        }
        @CustomType.Setter
        public Builder displayNameId(@Nullable Integer displayNameId) {

            this.displayNameId = displayNameId;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder externalDirectoryNodeId(String externalDirectoryNodeId) {
            if (externalDirectoryNodeId == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "externalDirectoryNodeId");
            }
            this.externalDirectoryNodeId = externalDirectoryNodeId;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable GetEmailSecurityImpersonationRegistryFilter filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isEmailRegex(Boolean isEmailRegex) {
            if (isEmailRegex == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "isEmailRegex");
            }
            this.isEmailRegex = isEmailRegex;
            return this;
        }
        @CustomType.Setter
        public Builder lastModified(String lastModified) {
            if (lastModified == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "lastModified");
            }
            this.lastModified = lastModified;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder provenance(String provenance) {
            if (provenance == null) {
              throw new MissingRequiredPropertyException("GetEmailSecurityImpersonationRegistryResult", "provenance");
            }
            this.provenance = provenance;
            return this;
        }
        public GetEmailSecurityImpersonationRegistryResult build() {
            final var _resultValue = new GetEmailSecurityImpersonationRegistryResult();
            _resultValue.accountId = accountId;
            _resultValue.comments = comments;
            _resultValue.createdAt = createdAt;
            _resultValue.directoryId = directoryId;
            _resultValue.directoryNodeId = directoryNodeId;
            _resultValue.displayNameId = displayNameId;
            _resultValue.email = email;
            _resultValue.externalDirectoryNodeId = externalDirectoryNodeId;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.isEmailRegex = isEmailRegex;
            _resultValue.lastModified = lastModified;
            _resultValue.name = name;
            _resultValue.provenance = provenance;
            return _resultValue;
        }
    }
}
