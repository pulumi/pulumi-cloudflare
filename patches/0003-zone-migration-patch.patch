From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Venelin <venelin@pulumi.com>
Date: Thu, 13 Feb 2025 12:28:03 +0200
Subject: [PATCH] zone migration patch

update zone migration

diff --git a/internal/services/zone/migrations.go b/internal/services/zone/migrations.go
index afe7595ab..997f19104 100644
--- a/internal/services/zone/migrations.go
+++ b/internal/services/zone/migrations.go
@@ -6,10 +6,179 @@ import (
 	"context"
 
 	"github.com/hashicorp/terraform-plugin-framework/resource"
+	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
+	"github.com/hashicorp/terraform-plugin-go/tftypes"
 )
 
 var _ resource.ResourceWithUpgradeState = (*ZoneResource)(nil)
 
+var zoneV0Data = tftypes.Object{
+	AttributeTypes: map[string]tftypes.Type{
+		"id":         tftypes.String,
+		"zone":       tftypes.String,
+		"account_id": tftypes.String,
+		"vanity_name_servers": tftypes.List{
+			ElementType: tftypes.String,
+		},
+		"type":   tftypes.String,
+		"paused": tftypes.Bool,
+		"status": tftypes.String,
+		"name_servers": tftypes.List{
+			ElementType: tftypes.String,
+		},
+		"meta": tftypes.Map{
+			ElementType: tftypes.Bool,
+		},
+		"jump_start": tftypes.Bool,
+	},
+}
+
+var metaObjData = tftypes.Object{
+	AttributeTypes: map[string]tftypes.Type{
+		"cdn_only":                 tftypes.Bool,
+		"custom_certificate_quota": tftypes.Number,
+		"dns_only":                 tftypes.Bool,
+		"foundation_dns":           tftypes.Bool,
+		"page_rule_quota":          tftypes.Number,
+		"phishing_detected":        tftypes.Bool,
+		"step":                     tftypes.Number,
+	},
+}
+
+var zoneOwnerData = tftypes.Object{
+	AttributeTypes: map[string]tftypes.Type{
+		"id":   tftypes.String,
+		"name": tftypes.String,
+		"type": tftypes.String,
+	},
+}
+
+var zoneV1Data = tftypes.Object{
+	AttributeTypes: map[string]tftypes.Type{
+		"id":   tftypes.String,
+		"name": tftypes.String,
+		"account": tftypes.Object{
+			AttributeTypes: map[string]tftypes.Type{
+				"id": tftypes.String,
+			},
+		},
+		"vanity_name_servers": tftypes.List{
+			ElementType: tftypes.String,
+		},
+		"type":               tftypes.String,
+		"activated_on":       tftypes.String,
+		"created_on":         tftypes.String,
+		"development_mode":   tftypes.Number,
+		"modified_on":        tftypes.String,
+		"original_dnshost":   tftypes.String,
+		"original_registrar": tftypes.String,
+		"paused":             tftypes.Bool,
+		"status":             tftypes.String,
+		"name_servers": tftypes.List{
+			ElementType: tftypes.String,
+		},
+		"original_name_servers": tftypes.List{
+			ElementType: tftypes.String,
+		},
+		"meta": metaObjData,
+		"owner": zoneOwnerData,
+	},
+	OptionalAttributes: map[string]struct{}{
+		"activated_on":          {},
+		"created_on":            {},
+		"development_mode":      {},
+		"modified_on":           {},
+		"original_dnshost":      {},
+		"original_registrar":    {},
+		"original_name_servers": {},
+		"owner":                 {},
+	},
+}
+
 func (r *ZoneResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
-	return map[int64]resource.StateUpgrader{}
+	return map[int64]resource.StateUpgrader{
+		0: {
+			StateUpgrader: func(ctx context.Context, req resource.UpgradeStateRequest, resp *resource.UpgradeStateResponse) {
+				priorState, err := req.RawState.UnmarshalWithOpts(zoneV0Data, tfprotov6.UnmarshalOpts{
+					ValueFromJSONOpts: tftypes.ValueFromJSONOpts{
+						IgnoreUndefinedAttributes: true,
+					},
+				})
+				if err != nil {
+					resp.Diagnostics.AddError("Unable to Unmarshal Prior State", err.Error())
+					return
+				}
+
+				var state map[string]tftypes.Value
+				err = priorState.As(&state)
+				if err != nil {
+					resp.Diagnostics.AddError("Unable to Parse Prior State", err.Error())
+					return
+				}
+
+				state["name"] = state["zone"]
+				delete(state, "zone")
+
+				state["account"] = tftypes.NewValue(
+					tftypes.Object{
+						AttributeTypes: map[string]tftypes.Type{
+							"id": tftypes.String,
+						},
+					},
+					map[string]tftypes.Value{
+						"id": state["account_id"],
+					},
+				)
+				delete(state, "account_id")
+				delete(state, "jump_start")
+
+				var metaMap map[string]tftypes.Value
+				err = state["meta"].As(&metaMap)
+				if err != nil {
+					resp.Diagnostics.AddError("Unable to Parse Prior Meta", err.Error())
+					return
+				}
+
+				metaObj := tftypes.NewValue(
+					metaObjData,
+					map[string]tftypes.Value{
+						"cdn_only":                 tftypes.NewValue(tftypes.Bool, false),
+						"custom_certificate_quota": tftypes.NewValue(tftypes.Number, 0),
+						"dns_only":                 tftypes.NewValue(tftypes.Bool, false),
+						"foundation_dns":           tftypes.NewValue(tftypes.Bool, false),
+						"page_rule_quota":          tftypes.NewValue(tftypes.Number, 0),
+						"phishing_detected":        tftypes.NewValue(tftypes.Bool, false),
+						"step":                     tftypes.NewValue(tftypes.Number, 0),
+					},
+				)
+				state["meta"] = metaObj
+
+				state["activated_on"] = tftypes.NewValue(tftypes.String, "2006-01-02T15:04:05+07:00")
+				state["created_on"] = tftypes.NewValue(tftypes.String, "2006-01-02T15:04:05+07:00")
+				state["development_mode"] = tftypes.NewValue(tftypes.Number, 0)
+				state["modified_on"] = tftypes.NewValue(tftypes.String, "2006-01-02T15:04:05+07:00")
+				state["original_dnshost"] = tftypes.NewValue(tftypes.String, "")
+				state["original_registrar"] = tftypes.NewValue(tftypes.String, "")
+				state["original_name_servers"] = tftypes.NewValue(tftypes.List{
+					ElementType: tftypes.String,
+				}, []tftypes.Value{})
+				state["owner"] = tftypes.NewValue(zoneOwnerData, map[string]tftypes.Value{
+					"id":   tftypes.NewValue(tftypes.String, ""),
+					"name": tftypes.NewValue(tftypes.String, ""),
+					"type": tftypes.NewValue(tftypes.String, ""),
+				})
+
+				dynamicValue, err := tfprotov6.NewDynamicValue(zoneV1Data, tftypes.NewValue(zoneV1Data, state))
+				if err != nil {
+					resp.Diagnostics.AddError(
+						"Unable to Convert Upgraded State",
+						err.Error(),
+					)
+					return
+				}
+
+				resp.DynamicValue = &dynamicValue
+			},
+		},
+	}
 }
diff --git a/internal/services/zone/schema.go b/internal/services/zone/schema.go
index 554d38dda..6d5eee661 100644
--- a/internal/services/zone/schema.go
+++ b/internal/services/zone/schema.go
@@ -23,6 +23,7 @@ var _ resource.ResourceWithConfigValidators = (*ZoneResource)(nil)
 
 func ResourceSchema(ctx context.Context) schema.Schema {
 	return schema.Schema{
+		Version: 1,
 		Attributes: map[string]schema.Attribute{
 			"id": schema.StringAttribute{
 				Description:   "Identifier",
