From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Venelin <venelin@pulumi.com>
Date: Thu, 13 Feb 2025 12:28:03 +0200
Subject: [PATCH] zone migration patch


diff --git a/internal/services/zone/migrations.go b/internal/services/zone/migrations.go
index afe7595ab..b507ff14f 100644
--- a/internal/services/zone/migrations.go
+++ b/internal/services/zone/migrations.go
@@ -5,11 +5,209 @@ package zone
 import (
 	"context"
 
+	"github.com/cloudflare/terraform-provider-cloudflare/internal/apijson"
+	"github.com/cloudflare/terraform-provider-cloudflare/internal/customfield"
+	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
+	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
+	"github.com/hashicorp/terraform-plugin-framework/attr"
 	"github.com/hashicorp/terraform-plugin-framework/resource"
+	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
+	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
+	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
+	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
+	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
+	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
+	"github.com/hashicorp/terraform-plugin-framework/types"
+	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
 )
 
 var _ resource.ResourceWithUpgradeState = (*ZoneResource)(nil)
 
+type ZoneModelV0 struct {
+	ID                types.String                   `tfsdk:"id" json:"id,computed"`
+	Zone              types.String                   `tfsdk:"zone" json:"name,required"`
+	AccountID         types.String                   `tfsdk:"account_id" json:"account_id,required"`
+	VanityNameServers *[]types.String                `tfsdk:"vanity_name_servers" json:"vanity_name_servers,optional"`
+	Type              types.String                   `tfsdk:"type" json:"type,computed_optional"`
+	Paused            types.Bool                     `tfsdk:"paused" json:"paused,computed"`
+	Status            types.String                   `tfsdk:"status" json:"status,computed"`
+	NameServers       customfield.List[types.String] `tfsdk:"name_servers" json:"name_servers,computed"`
+	Meta              types.Map                      `tfsdk:"meta" json:"meta,computed"`
+	JumpStart         types.Bool                     `tfsdk:"jump_start" json:"jump_start,optional"`
+}
+
+func (m ZoneModelV0) MarshalJSON() (data []byte, err error) {
+	return apijson.MarshalRoot(m)
+}
+
+func (m ZoneModelV0) MarshalJSONForUpdate(state ZoneModel) (data []byte, err error) {
+	return apijson.MarshalForPatch(m, state)
+}
+
+type ZoneMetaModelV0 struct {
+	CDNOnly                types.Bool  `tfsdk:"cdn_only" json:"cdn_only,computed"`
+	CustomCertificateQuota types.Int64 `tfsdk:"custom_certificate_quota" json:"custom_certificate_quota,computed"`
+	DNSOnly                types.Bool  `tfsdk:"dns_only" json:"dns_only,computed"`
+	FoundationDNS          types.Bool  `tfsdk:"foundation_dns" json:"foundation_dns,computed"`
+	PageRuleQuota          types.Int64 `tfsdk:"page_rule_quota" json:"page_rule_quota,computed"`
+	PhishingDetected       types.Bool  `tfsdk:"phishing_detected" json:"phishing_detected,computed"`
+	Step                   types.Int64 `tfsdk:"step" json:"step,computed"`
+}
+
+type ZoneOwnerModelV0 struct {
+	ID   types.String `tfsdk:"id" json:"id,computed"`
+	Name types.String `tfsdk:"name" json:"name,computed"`
+	Type types.String `tfsdk:"type" json:"type,computed"`
+}
+
 func (r *ZoneResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
-	return map[int64]resource.StateUpgrader{}
+	return map[int64]resource.StateUpgrader{
+		0: {
+			PriorSchema: &schema.Schema{
+				Attributes: map[string]schema.Attribute{
+					"id": schema.StringAttribute{
+						Description:   "Identifier",
+						Computed:      true,
+						PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
+					},
+					"zone": schema.StringAttribute{
+						Description:   "The domain name",
+						Required:      true,
+						PlanModifiers: []planmodifier.String{stringplanmodifier.RequiresReplace()},
+					},
+					"account_id": schema.StringAttribute{
+						Description: "The account ID",
+						Required:    true,
+					},
+					"vanity_name_servers": schema.ListAttribute{
+						Description: "An array of domains used for custom name servers. This is only\navailable for Business and Enterprise plans.",
+						Optional:    true,
+						ElementType: types.StringType,
+					},
+					"type": schema.StringAttribute{
+						Description: "A full zone implies that DNS is hosted with Cloudflare. A partial zone is\ntypically a partner-hosted zone or a CNAME setup.\n",
+						Computed:    true,
+						Optional:    true,
+						Validators: []validator.String{
+							stringvalidator.OneOfCaseInsensitive(
+								"full",
+								"partial",
+								"secondary",
+							),
+						},
+						Default: stringdefault.StaticString("full"),
+					},
+					"paused": schema.BoolAttribute{
+						Description: "Indicates whether the zone is only using Cloudflare DNS services. A\ntrue value means the zone will not receive security or performance\nbenefits.\n",
+						Computed:    true,
+						Default:     booldefault.StaticBool(false),
+					},
+					"status": schema.StringAttribute{
+						Description: "The zone status on Cloudflare.",
+						Computed:    true,
+						Validators: []validator.String{
+							stringvalidator.OneOfCaseInsensitive(
+								"initializing",
+								"pending",
+								"active",
+								"moved",
+							),
+						},
+					},
+					"name_servers": schema.ListAttribute{
+						Description: "The name servers Cloudflare assigns to a zone",
+						Computed:    true,
+						CustomType:  customfield.NewListType[types.String](ctx),
+						ElementType: types.StringType,
+					},
+					"meta": schema.MapAttribute{
+						Description: "Metadata about the zone",
+						Computed:    true,
+						ElementType: types.BoolType,
+					},
+					"jump_start": schema.BoolAttribute{
+						Optional: true,
+					},
+				},
+			},
+			StateUpgrader: func(ctx context.Context, req resource.UpgradeStateRequest, resp *resource.UpgradeStateResponse) {
+				var priorStateData ZoneModelV0
+				diags := req.State.Get(ctx, &priorStateData)
+
+				resp.Diagnostics.Append(diags...)
+				if resp.Diagnostics.HasError() {
+					return
+				}
+
+				metaDataObj, diags := basetypes.NewObjectValueFrom(
+					ctx,
+					map[string]attr.Type{
+						"cdn_only":                 types.BoolType,
+						"custom_certificate_quota": types.Int64Type,
+						"dns_only":                 types.BoolType,
+						"foundation_dns":           types.BoolType,
+						"page_rule_quota":          types.Int64Type,
+						"phishing_detected":        types.BoolType,
+						"step":                     types.Int64Type,
+					},
+					map[string]attr.Value{
+						"cdn_only":                 priorStateData.Meta.Elements()["cdn_only"],
+						"custom_certificate_quota": basetypes.NewInt64Null(),
+						"dns_only":                 priorStateData.Meta.Elements()["dns_only"],
+						"foundation_dns":           priorStateData.Meta.Elements()["foundation_dns"],
+						"page_rule_quota":          basetypes.NewInt64Null(),
+						"phishing_detected":        priorStateData.Meta.Elements()["phishing_detected"],
+						"step":                     basetypes.NewInt64Null(),
+					},
+				)
+
+				ownerObj, diags := basetypes.NewObjectValueFrom(
+					ctx,
+					map[string]attr.Type{
+						"id":   types.StringType,
+						"name": types.StringType,
+						"type": types.StringType,
+					},
+					map[string]attr.Value{
+						"id":   basetypes.NewStringNull(),
+						"name": basetypes.NewStringNull(),
+						"type": basetypes.NewStringNull(),
+					},
+				)
+
+				upgradedStateData := ZoneModel{
+					ID:   priorStateData.ID,
+					Name: priorStateData.Zone,
+					Account: &ZoneAccountModel{
+						ID: priorStateData.AccountID,
+					},
+					VanityNameServers:   priorStateData.VanityNameServers,
+					Type:                priorStateData.Type,
+					ActivatedOn:         timetypes.NewRFC3339Null(),
+					CreatedOn:           timetypes.NewRFC3339Null(),
+					DevelopmentMode:     types.Float64Value(0),
+					ModifiedOn:          timetypes.NewRFC3339Null(),
+					OriginalDnshost:     types.StringNull(),
+					OriginalRegistrar:   types.StringNull(),
+					Paused:              priorStateData.Paused,
+					Status:              priorStateData.Status,
+					NameServers:         priorStateData.NameServers,
+					OriginalNameServers: customfield.List[types.String]{},
+					Meta: customfield.NestedObject[ZoneMetaModel]{
+						ObjectValue: metaDataObj,
+					},
+					Owner: customfield.NestedObject[ZoneOwnerModel]{
+						ObjectValue: ownerObj,
+					},
+				}
+
+				diags = resp.State.Set(ctx, upgradedStateData)
+
+				resp.Diagnostics.Append(diags...)
+				if resp.Diagnostics.HasError() {
+					return
+				}
+			},
+		},
+	}
 }
diff --git a/internal/services/zone/schema.go b/internal/services/zone/schema.go
index a22dd587d..a46c77fbd 100644
--- a/internal/services/zone/schema.go
+++ b/internal/services/zone/schema.go
@@ -23,6 +23,7 @@ var _ resource.ResourceWithConfigValidators = (*ZoneResource)(nil)
 
 func ResourceSchema(ctx context.Context) schema.Schema {
 	return schema.Schema{
+		Version: 1,
 		Attributes: map[string]schema.Attribute{
 			"id": schema.StringAttribute{
 				Description:   "Identifier",
